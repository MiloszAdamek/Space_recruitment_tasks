
WS2812B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003c78  08003c78  00004c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c88  08003c88  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c88  08003c88  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c88  08003c88  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c88  08003c88  00004c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c8c  08003c8c  00004c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08003c9c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003c9c  00005174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca0d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b0  00000000  00000000  00011a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00013b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1c  00000000  00000000  00014838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025224  00000000  00000000  00015254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef46  00000000  00000000  0003a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1771  00000000  00000000  000493be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ab2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003618  00000000  00000000  0013ab74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0013e18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003c60 	.word	0x08003c60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003c60 	.word	0x08003c60

08000218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800021e:	4b12      	ldr	r3, [pc, #72]	@ (8000268 <MX_DMA_Init+0x50>)
 8000220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000222:	4a11      	ldr	r2, [pc, #68]	@ (8000268 <MX_DMA_Init+0x50>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6493      	str	r3, [r2, #72]	@ 0x48
 800022a:	4b0f      	ldr	r3, [pc, #60]	@ (8000268 <MX_DMA_Init+0x50>)
 800022c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800022e:	f003 0304 	and.w	r3, r3, #4
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000236:	4b0c      	ldr	r3, [pc, #48]	@ (8000268 <MX_DMA_Init+0x50>)
 8000238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800023a:	4a0b      	ldr	r2, [pc, #44]	@ (8000268 <MX_DMA_Init+0x50>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6493      	str	r3, [r2, #72]	@ 0x48
 8000242:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <MX_DMA_Init+0x50>)
 8000244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800024e:	2200      	movs	r2, #0
 8000250:	2100      	movs	r1, #0
 8000252:	200b      	movs	r0, #11
 8000254:	f000 fd33 	bl	8000cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000258:	200b      	movs	r0, #11
 800025a:	f000 fd4a 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

}
 800025e:	bf00      	nop
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000

0800026c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b088      	sub	sp, #32
 8000270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000272:	f107 030c 	add.w	r3, r7, #12
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000282:	4b1b      	ldr	r3, [pc, #108]	@ (80002f0 <MX_GPIO_Init+0x84>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000286:	4a1a      	ldr	r2, [pc, #104]	@ (80002f0 <MX_GPIO_Init+0x84>)
 8000288:	f043 0304 	orr.w	r3, r3, #4
 800028c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800028e:	4b18      	ldr	r3, [pc, #96]	@ (80002f0 <MX_GPIO_Init+0x84>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000292:	f003 0304 	and.w	r3, r3, #4
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029a:	4b15      	ldr	r3, [pc, #84]	@ (80002f0 <MX_GPIO_Init+0x84>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800029e:	4a14      	ldr	r2, [pc, #80]	@ (80002f0 <MX_GPIO_Init+0x84>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002a6:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <MX_GPIO_Init+0x84>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80002b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80002c0:	f107 030c 	add.w	r3, r7, #12
 80002c4:	4619      	mov	r1, r3
 80002c6:	480b      	ldr	r0, [pc, #44]	@ (80002f4 <MX_GPIO_Init+0x88>)
 80002c8:	f000 ffa0 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002da:	f107 030c 	add.w	r3, r7, #12
 80002de:	4619      	mov	r1, r3
 80002e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e4:	f000 ff92 	bl	800120c <HAL_GPIO_Init>

}
 80002e8:	bf00      	nop
 80002ea:	3720      	adds	r7, #32
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40021000 	.word	0x40021000
 80002f4:	48000800 	.word	0x48000800

080002f8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Funkcja realizująca temat zadania
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	// TIM2 generuje przerwanie co 10ms
    if (htim == &htim2) {
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a3a      	ldr	r2, [pc, #232]	@ (80003ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d16c      	bne.n	80003e2 <HAL_TIM_PeriodElapsedCallback+0xea>
        uint32_t current_time = HAL_GetTick();
 8000308:	f000 fbf2 	bl	8000af0 <HAL_GetTick>
 800030c:	6138      	str	r0, [r7, #16]

        // Obsługa prostokątnej zmiany R co 1,5 s
        if ((current_time - last_time) >= 1500) {
 800030e:	4b38      	ldr	r3, [pc, #224]	@ (80003f0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	693a      	ldr	r2, [r7, #16]
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	f240 52db 	movw	r2, #1499	@ 0x5db
 800031a:	4293      	cmp	r3, r2
 800031c:	d90c      	bls.n	8000338 <HAL_TIM_PeriodElapsedCallback+0x40>
            red_state = !red_state;  // Zmieniaj stan R
 800031e:	4b35      	ldr	r3, [pc, #212]	@ (80003f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	bf0c      	ite	eq
 8000326:	2301      	moveq	r3, #1
 8000328:	2300      	movne	r3, #0
 800032a:	b2db      	uxtb	r3, r3
 800032c:	461a      	mov	r2, r3
 800032e:	4b31      	ldr	r3, [pc, #196]	@ (80003f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000330:	701a      	strb	r2, [r3, #0]
            last_time = current_time;
 8000332:	4a2f      	ldr	r2, [pc, #188]	@ (80003f0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000334:	693b      	ldr	r3, [r7, #16]
 8000336:	6013      	str	r3, [r2, #0]
        }
        uint8_t red_value = red_state ? 255 : 0;
 8000338:	4b2e      	ldr	r3, [pc, #184]	@ (80003f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8000340:	23ff      	movs	r3, #255	@ 0xff
 8000342:	e000      	b.n	8000346 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8000344:	2300      	movs	r3, #0
 8000346:	73fb      	strb	r3, [r7, #15]

        // Obsługa piłokształtnej zmiany G -> 300 cykli = 3s,
        if (cycle_step < 300) { // Faza wzrostu
 8000348:	4b2b      	ldr	r3, [pc, #172]	@ (80003f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000350:	d20f      	bcs.n	8000372 <HAL_TIM_PeriodElapsedCallback+0x7a>
            green_intensity = (cycle_step * 255) / 300; // Zwiększ intensywność od 0 do 255 przez 300 kroków
 8000352:	4b29      	ldr	r3, [pc, #164]	@ (80003f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	461a      	mov	r2, r3
 8000358:	4613      	mov	r3, r2
 800035a:	021b      	lsls	r3, r3, #8
 800035c:	1a9b      	subs	r3, r3, r2
 800035e:	4a27      	ldr	r2, [pc, #156]	@ (80003fc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000360:	fb82 1203 	smull	r1, r2, r2, r3
 8000364:	1152      	asrs	r2, r2, #5
 8000366:	17db      	asrs	r3, r3, #31
 8000368:	1ad3      	subs	r3, r2, r3
 800036a:	b2da      	uxtb	r2, r3
 800036c:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800036e:	701a      	strb	r2, [r3, #0]
 8000370:	e002      	b.n	8000378 <HAL_TIM_PeriodElapsedCallback+0x80>
        } else {
            green_intensity = 0; // Natychmiastowy spadek do 0
 8000372:	4b23      	ldr	r3, [pc, #140]	@ (8000400 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
        }

        // Zwiększ krok cyklu
        cycle_step++;
 8000378:	4b1f      	ldr	r3, [pc, #124]	@ (80003f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	3301      	adds	r3, #1
 800037e:	b29a      	uxth	r2, r3
 8000380:	4b1d      	ldr	r3, [pc, #116]	@ (80003f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000382:	801a      	strh	r2, [r3, #0]
        if (cycle_step >= 300) { // Resetuj po pełnym cyklu
 8000384:	4b1c      	ldr	r3, [pc, #112]	@ (80003f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800038c:	d302      	bcc.n	8000394 <HAL_TIM_PeriodElapsedCallback+0x9c>
            cycle_step = 0;
 800038e:	4b1a      	ldr	r3, [pc, #104]	@ (80003f8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000390:	2200      	movs	r2, #0
 8000392:	801a      	strh	r2, [r3, #0]
        }

        // Obsługa mrugania B przy aktywnej fladze blink ustawianej w przerwaniu od przycisku
        uint8_t b_value = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	75fb      	strb	r3, [r7, #23]
        if (blink_active) {
 8000398:	4b1a      	ldr	r3, [pc, #104]	@ (8000404 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d017      	beq.n	80003d0 <HAL_TIM_PeriodElapsedCallback+0xd8>
            b_value = (blink_count % 2) ? 255 : 0;
 80003a0:	4b19      	ldr	r3, [pc, #100]	@ (8000408 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	f003 0301 	and.w	r3, r3, #1
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <HAL_TIM_PeriodElapsedCallback+0xba>
 80003ae:	23ff      	movs	r3, #255	@ 0xff
 80003b0:	e000      	b.n	80003b4 <HAL_TIM_PeriodElapsedCallback+0xbc>
 80003b2:	2300      	movs	r3, #0
 80003b4:	75fb      	strb	r3, [r7, #23]
            blink_count--;
 80003b6:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80003c0:	701a      	strb	r2, [r3, #0]
            if (blink_count == 0) {
 80003c2:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d102      	bne.n	80003d0 <HAL_TIM_PeriodElapsedCallback+0xd8>
                blink_active = 0;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	701a      	strb	r2, [r3, #0]
            }
        }

        ws2812b_set_color(0, red_value, green_intensity, b_value);
 80003d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000400 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80003d2:	781a      	ldrb	r2, [r3, #0]
 80003d4:	7dfb      	ldrb	r3, [r7, #23]
 80003d6:	7bf9      	ldrb	r1, [r7, #15]
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 fac5 	bl	8000968 <ws2812b_set_color>
        ws2812b_update();
 80003de:	f000 fab5 	bl	800094c <ws2812b_update>
    }
}
 80003e2:	bf00      	nop
 80003e4:	3718      	adds	r7, #24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000034 	.word	0x20000034
 80003f0:	20000030 	.word	0x20000030
 80003f4:	20000028 	.word	0x20000028
 80003f8:	2000002a 	.word	0x2000002a
 80003fc:	1b4e81b5 	.word	0x1b4e81b5
 8000400:	20000029 	.word	0x20000029
 8000404:	2000002c 	.word	0x2000002c
 8000408:	2000002d 	.word	0x2000002d

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000410:	f000 fb09 	bl	8000a26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000414:	f000 f812 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000418:	f7ff ff28 	bl	800026c <MX_GPIO_Init>
  MX_DMA_Init();
 800041c:	f7ff fefc 	bl	8000218 <MX_DMA_Init>
  MX_TIM3_Init();
 8000420:	f000 f926 	bl	8000670 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000424:	f000 f8d6 	bl	80005d4 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2); // Włączenie przerwań dla TIM2
 8000428:	4803      	ldr	r0, [pc, #12]	@ (8000438 <main+0x2c>)
 800042a:	f001 fee3 	bl	80021f4 <HAL_TIM_Base_Start_IT>

  /* USER CODE BEGIN 2 */
  ws2812b_init(); // Inicjalizacja biblioteki do obsługi ws2812b
 800042e:	f000 fa5d 	bl	80008ec <ws2812b_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000432:	bf00      	nop
 8000434:	e7fd      	b.n	8000432 <main+0x26>
 8000436:	bf00      	nop
 8000438:	20000034 	.word	0x20000034

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b094      	sub	sp, #80	@ 0x50
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0318 	add.w	r3, r7, #24
 8000446:	2238      	movs	r2, #56	@ 0x38
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f003 fbdc 	bl	8003c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800045e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000462:	f001 f855 	bl	8001510 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000466:	2302      	movs	r3, #2
 8000468:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800046e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000470:	2340      	movs	r3, #64	@ 0x40
 8000472:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000474:	2302      	movs	r3, #2
 8000476:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000478:	2302      	movs	r3, #2
 800047a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800047c:	2301      	movs	r3, #1
 800047e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000480:	230a      	movs	r3, #10
 8000482:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000484:	2302      	movs	r3, #2
 8000486:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000488:	2302      	movs	r3, #2
 800048a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800048c:	2302      	movs	r3, #2
 800048e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	f107 0318 	add.w	r3, r7, #24
 8000494:	4618      	mov	r0, r3
 8000496:	f001 f8ef 	bl	8001678 <HAL_RCC_OscConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80004a0:	f000 f818 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a4:	230f      	movs	r3, #15
 80004a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a8:	2303      	movs	r3, #3
 80004aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2102      	movs	r1, #2
 80004bc:	4618      	mov	r0, r3
 80004be:	f001 fbed 	bl	8001c9c <HAL_RCC_ClockConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004c8:	f000 f804 	bl	80004d4 <Error_Handler>
  }
}
 80004cc:	bf00      	nop
 80004ce:	3750      	adds	r7, #80	@ 0x50
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <Error_Handler+0x8>

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <HAL_MspInit+0x44>)
 80004e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000524 <HAL_MspInit+0x44>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <HAL_MspInit+0x44>)
 80004f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <HAL_MspInit+0x44>)
 8000500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000502:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <HAL_MspInit+0x44>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000508:	6593      	str	r3, [r2, #88]	@ 0x58
 800050a:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <HAL_MspInit+0x44>)
 800050c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800050e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000516:	f001 f89f 	bl	8001658 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <NMI_Handler+0x4>

08000530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <HardFault_Handler+0x4>

08000538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <MemManage_Handler+0x4>

08000540 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <UsageFault_Handler+0x4>

08000550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057e:	f000 faa5 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800058c:	4802      	ldr	r0, [pc, #8]	@ (8000598 <DMA1_Channel1_IRQHandler+0x10>)
 800058e:	f000 fcee 	bl	8000f6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000cc 	.word	0x200000cc

0800059c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005a0:	4802      	ldr	r0, [pc, #8]	@ (80005ac <TIM2_IRQHandler+0x10>)
 80005a2:	f002 f92d 	bl	8002800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000034 	.word	0x20000034

080005b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <SystemInit+0x20>)
 80005b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ba:	4a05      	ldr	r2, [pc, #20]	@ (80005d0 <SystemInit+0x20>)
 80005bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f2:	4b1e      	ldr	r3, [pc, #120]	@ (800066c <MX_TIM2_Init+0x98>)
 80005f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80005fa:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <MX_TIM2_Init+0x98>)
 80005fc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000600:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000602:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <MX_TIM2_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <MX_TIM2_Init+0x98>)
 800060a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800060e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000610:	4b16      	ldr	r3, [pc, #88]	@ (800066c <MX_TIM2_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <MX_TIM2_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800061c:	4813      	ldr	r0, [pc, #76]	@ (800066c <MX_TIM2_Init+0x98>)
 800061e:	f001 fd21 	bl	8002064 <HAL_TIM_Base_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000628:	f7ff ff54 	bl	80004d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800062c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000630:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	4619      	mov	r1, r3
 8000638:	480c      	ldr	r0, [pc, #48]	@ (800066c <MX_TIM2_Init+0x98>)
 800063a:	f002 fb45 	bl	8002cc8 <HAL_TIM_ConfigClockSource>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000644:	f7ff ff46 	bl	80004d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <MX_TIM2_Init+0x98>)
 8000656:	f003 f9fb 	bl	8003a50 <HAL_TIMEx_MasterConfigSynchronization>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000660:	f7ff ff38 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000034 	.word	0x20000034

08000670 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08e      	sub	sp, #56	@ 0x38
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <MX_TIM3_Init+0xe4>)
 80006a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000758 <MX_TIM3_Init+0xe8>)
 80006a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000754 <MX_TIM3_Init+0xe4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <MX_TIM3_Init+0xe4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80006b4:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <MX_TIM3_Init+0xe4>)
 80006b6:	2263      	movs	r2, #99	@ 0x63
 80006b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <MX_TIM3_Init+0xe4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c0:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <MX_TIM3_Init+0xe4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006c6:	4823      	ldr	r0, [pc, #140]	@ (8000754 <MX_TIM3_Init+0xe4>)
 80006c8:	f001 fccc 	bl	8002064 <HAL_TIM_Base_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80006d2:	f7ff feff 	bl	80004d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006e0:	4619      	mov	r1, r3
 80006e2:	481c      	ldr	r0, [pc, #112]	@ (8000754 <MX_TIM3_Init+0xe4>)
 80006e4:	f002 faf0 	bl	8002cc8 <HAL_TIM_ConfigClockSource>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80006ee:	f7ff fef1 	bl	80004d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006f2:	4818      	ldr	r0, [pc, #96]	@ (8000754 <MX_TIM3_Init+0xe4>)
 80006f4:	f001 fdf6 	bl	80022e4 <HAL_TIM_PWM_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80006fe:	f7ff fee9 	bl	80004d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4810      	ldr	r0, [pc, #64]	@ (8000754 <MX_TIM3_Init+0xe4>)
 8000712:	f003 f99d 	bl	8003a50 <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800071c:	f7ff feda 	bl	80004d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000720:	2360      	movs	r3, #96	@ 0x60
 8000722:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	4619      	mov	r1, r3
 8000736:	4807      	ldr	r0, [pc, #28]	@ (8000754 <MX_TIM3_Init+0xe4>)
 8000738:	f002 f9b2 	bl	8002aa0 <HAL_TIM_PWM_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000742:	f7ff fec7 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000746:	4803      	ldr	r0, [pc, #12]	@ (8000754 <MX_TIM3_Init+0xe4>)
 8000748:	f000 f86e 	bl	8000828 <HAL_TIM_MspPostInit>

}
 800074c:	bf00      	nop
 800074e:	3738      	adds	r7, #56	@ 0x38
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000080 	.word	0x20000080
 8000758:	40000400 	.word	0x40000400

0800075c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800076c:	d114      	bne.n	8000798 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076e:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <HAL_TIM_Base_MspInit+0xbc>)
 8000770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000772:	4a29      	ldr	r2, [pc, #164]	@ (8000818 <HAL_TIM_Base_MspInit+0xbc>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6593      	str	r3, [r2, #88]	@ 0x58
 800077a:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <HAL_TIM_Base_MspInit+0xbc>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	201c      	movs	r0, #28
 800078c:	f000 fa97 	bl	8000cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000790:	201c      	movs	r0, #28
 8000792:	f000 faae 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000796:	e03a      	b.n	800080e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM3)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a1f      	ldr	r2, [pc, #124]	@ (800081c <HAL_TIM_Base_MspInit+0xc0>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d135      	bne.n	800080e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <HAL_TIM_Base_MspInit+0xbc>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000818 <HAL_TIM_Base_MspInit+0xbc>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <HAL_TIM_Base_MspInit+0xbc>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <HAL_TIM_Base_MspInit+0xc4>)
 80007bc:	4a19      	ldr	r2, [pc, #100]	@ (8000824 <HAL_TIM_Base_MspInit+0xc8>)
 80007be:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80007c0:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <HAL_TIM_Base_MspInit+0xc4>)
 80007c2:	223d      	movs	r2, #61	@ 0x3d
 80007c4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c6:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <HAL_TIM_Base_MspInit+0xc4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <HAL_TIM_Base_MspInit+0xc4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <HAL_TIM_Base_MspInit+0xc4>)
 80007d4:	2280      	movs	r2, #128	@ 0x80
 80007d6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <HAL_TIM_Base_MspInit+0xc4>)
 80007da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007de:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <HAL_TIM_Base_MspInit+0xc4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <HAL_TIM_Base_MspInit+0xc4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <HAL_TIM_Base_MspInit+0xc4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80007f2:	480b      	ldr	r0, [pc, #44]	@ (8000820 <HAL_TIM_Base_MspInit+0xc4>)
 80007f4:	f000 fa98 	bl	8000d28 <HAL_DMA_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_TIM_Base_MspInit+0xa6>
      Error_Handler();
 80007fe:	f7ff fe69 	bl	80004d4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a06      	ldr	r2, [pc, #24]	@ (8000820 <HAL_TIM_Base_MspInit+0xc4>)
 8000806:	625a      	str	r2, [r3, #36]	@ 0x24
 8000808:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <HAL_TIM_Base_MspInit+0xc4>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000
 800081c:	40000400 	.word	0x40000400
 8000820:	200000cc 	.word	0x200000cc
 8000824:	40020008 	.word	0x40020008

08000828 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a11      	ldr	r2, [pc, #68]	@ (800088c <HAL_TIM_MspPostInit+0x64>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d11c      	bne.n	8000884 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <HAL_TIM_MspPostInit+0x68>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a10      	ldr	r2, [pc, #64]	@ (8000890 <HAL_TIM_MspPostInit+0x68>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <HAL_TIM_MspPostInit+0x68>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000862:	2340      	movs	r3, #64	@ 0x40
 8000864:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000872:	2302      	movs	r3, #2
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000880:	f000 fcc4 	bl	800120c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000884:	bf00      	nop
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40000400 	.word	0x40000400
 8000890:	40021000 	.word	0x40021000

08000894 <set_byte>:
// Bufor danych
static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

// Funkcja ustawiająca 8 bitów w buforze LED dla konkretnego koloru
static void set_byte(uint32_t pos, uint8_t value)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	e016      	b.n	80008d4 <set_byte+0x40>
    if (value & 0x80) { // Sprawdzenie najstarszego bitu (MSB)
 80008a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	da06      	bge.n	80008bc <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME; // Wpisanie BIT_1_TIME, jeśli MSB jest 1
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a0c      	ldr	r2, [pc, #48]	@ (80008e8 <set_byte+0x54>)
 80008b6:	2140      	movs	r1, #64	@ 0x40
 80008b8:	54d1      	strb	r1, [r2, r3]
 80008ba:	e005      	b.n	80008c8 <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME; // Wpisanie BIT_0_TIME, jeśli MSB jest 0
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a09      	ldr	r2, [pc, #36]	@ (80008e8 <set_byte+0x54>)
 80008c4:	2120      	movs	r1, #32
 80008c6:	54d1      	strb	r1, [r2, r3]
    }
    value <<= 1; // Przesunięcie w lewo, aby sprawdzić kolejny bit
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3301      	adds	r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b07      	cmp	r3, #7
 80008d8:	dde5      	ble.n	80008a6 <set_byte+0x12>
  }
}
 80008da:	bf00      	nop
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	2000012c 	.word	0x2000012c

080008ec <ws2812b_init>:

// Funkcja inicjalizująca diody LED
void ws2812b_init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	e007      	b.n	8000908 <ws2812b_init+0x1c>
    led_buffer[i] = 0; // Wypełnienie resetowego bufora zerami
 80008f8:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <ws2812b_init+0x58>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3301      	adds	r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b27      	cmp	r3, #39	@ 0x27
 800090c:	ddf4      	ble.n	80008f8 <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	e007      	b.n	8000924 <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME; // Ustawienie początkowych wartości BIT_0_TIME
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3328      	adds	r3, #40	@ 0x28
 8000918:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <ws2812b_init+0x58>)
 800091a:	2120      	movs	r1, #32
 800091c:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3301      	adds	r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b17      	cmp	r3, #23
 8000928:	ddf4      	ble.n	8000914 <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 100; // Czas końcowy sygnału resetu
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <ws2812b_init+0x58>)
 800092c:	2264      	movs	r2, #100	@ 0x64
 800092e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  HAL_TIM_Base_Start(&htim3); // Start timera TIM3
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <ws2812b_init+0x5c>)
 8000934:	f001 fbee 	bl	8002114 <HAL_TIM_Base_Start>
  ws2812b_update(); // Zaktualizowanie LEDów
 8000938:	f000 f808 	bl	800094c <ws2812b_update>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000012c 	.word	0x2000012c
 8000948:	20000080 	.word	0x20000080

0800094c <ws2812b_update>:

// Funkcja aktualizująca kolory na diodach LED za pomocą DMA
void ws2812b_update(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8000950:	2341      	movs	r3, #65	@ 0x41
 8000952:	4a03      	ldr	r2, [pc, #12]	@ (8000960 <ws2812b_update+0x14>)
 8000954:	2100      	movs	r1, #0
 8000956:	4803      	ldr	r0, [pc, #12]	@ (8000964 <ws2812b_update+0x18>)
 8000958:	f001 fd26 	bl	80023a8 <HAL_TIM_PWM_Start_DMA>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000012c 	.word	0x2000012c
 8000964:	20000080 	.word	0x20000080

08000968 <ws2812b_set_color>:
		{}
}

// Funkcja ustawiająca kolor dla pojedynczej diody LED
void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	4608      	mov	r0, r1
 8000972:	4611      	mov	r1, r2
 8000974:	461a      	mov	r2, r3
 8000976:	4603      	mov	r3, r0
 8000978:	70fb      	strb	r3, [r7, #3]
 800097a:	460b      	mov	r3, r1
 800097c:	70bb      	strb	r3, [r7, #2]
 800097e:	4613      	mov	r3, r2
 8000980:	707b      	strb	r3, [r7, #1]
	if (led < LED_N) // Zapisywanie w buforze informacji dla poszczególnych kolorów
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d120      	bne.n	80009ca <ws2812b_set_color+0x62>
	{
		set_byte(RESET_LEN + 24 * led, green);
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4613      	mov	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4413      	add	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	3328      	adds	r3, #40	@ 0x28
 8000994:	78ba      	ldrb	r2, [r7, #2]
 8000996:	4611      	mov	r1, r2
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff7b 	bl	8000894 <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	3330      	adds	r3, #48	@ 0x30
 80009aa:	78fa      	ldrb	r2, [r7, #3]
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff70 	bl	8000894 <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	3338      	adds	r3, #56	@ 0x38
 80009c0:	787a      	ldrb	r2, [r7, #1]
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff65 	bl	8000894 <set_byte>
	}
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d4:	480d      	ldr	r0, [pc, #52]	@ (8000a0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d8:	f7ff fdea 	bl	80005b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <LoopForever+0xe>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a20 <LoopForever+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a02:	f003 f909 	bl	8003c18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a06:	f7ff fd01 	bl	800040c <main>

08000a0a <LoopForever>:

LoopForever:
    b LoopForever
 8000a0a:	e7fe      	b.n	8000a0a <LoopForever>
  ldr   r0, =_estack
 8000a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a18:	08003c90 	.word	0x08003c90
  ldr r2, =_sbss
 8000a1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a20:	20000174 	.word	0x20000174

08000a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC1_2_IRQHandler>

08000a26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f939 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a36:	200f      	movs	r0, #15
 8000a38:	f000 f80e 	bl	8000a58 <HAL_InitTick>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	e001      	b.n	8000a4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a48:	f7ff fd4a 	bl	80004e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a64:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <HAL_InitTick+0x68>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d022      	beq.n	8000ab2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <HAL_InitTick+0x6c>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <HAL_InitTick+0x68>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 f944 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10f      	bne.n	8000aac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b0f      	cmp	r3, #15
 8000a90:	d809      	bhi.n	8000aa6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a92:	2200      	movs	r2, #0
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9a:	f000 f910 	bl	8000cbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <HAL_InitTick+0x70>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	e007      	b.n	8000ab6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
 8000aaa:	e004      	b.n	8000ab6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	73fb      	strb	r3, [r7, #15]
 8000ab0:	e001      	b.n	8000ab6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <HAL_IncTick+0x1c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_IncTick+0x20>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a03      	ldr	r2, [pc, #12]	@ (8000ae8 <HAL_IncTick+0x1c>)
 8000adc:	6013      	str	r3, [r2, #0]
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	20000170 	.word	0x20000170
 8000aec:	20000008 	.word	0x20000008

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	@ (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000170 	.word	0x20000170

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db0b      	blt.n	8000b96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f003 021f 	and.w	r2, r3, #31
 8000b84:	4907      	ldr	r1, [pc, #28]	@ (8000ba4 <__NVIC_EnableIRQ+0x38>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	@ (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	@ (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	@ 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	@ 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c74:	d301      	bcc.n	8000c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <SysTick_Config+0x40>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	210f      	movs	r1, #15
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f7ff ff8e 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <SysTick_Config+0x40>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <SysTick_Config+0x40>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff29 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff40 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff90 	bl	8000bfc <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5f 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff33 	bl	8000b6c <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa4 	bl	8000c64 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e08d      	b.n	8000e56 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b47      	ldr	r3, [pc, #284]	@ (8000e60 <HAL_DMA_Init+0x138>)
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d80f      	bhi.n	8000d66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b45      	ldr	r3, [pc, #276]	@ (8000e64 <HAL_DMA_Init+0x13c>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a45      	ldr	r2, [pc, #276]	@ (8000e68 <HAL_DMA_Init+0x140>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	009a      	lsls	r2, r3, #2
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a42      	ldr	r2, [pc, #264]	@ (8000e6c <HAL_DMA_Init+0x144>)
 8000d62:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d64:	e00e      	b.n	8000d84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b40      	ldr	r3, [pc, #256]	@ (8000e70 <HAL_DMA_Init+0x148>)
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a3d      	ldr	r2, [pc, #244]	@ (8000e68 <HAL_DMA_Init+0x140>)
 8000d72:	fba2 2303 	umull	r2, r3, r2, r3
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	009a      	lsls	r2, r3, #2
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a3c      	ldr	r2, [pc, #240]	@ (8000e74 <HAL_DMA_Init+0x14c>)
 8000d82:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2202      	movs	r2, #2
 8000d88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000d9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f9b6 	bl	8001148 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000de4:	d102      	bne.n	8000dec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e00:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d010      	beq.n	8000e2c <HAL_DMA_Init+0x104>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d80c      	bhi.n	8000e2c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 f9d6 	bl	80011c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	e008      	b.n	8000e3e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40020407 	.word	0x40020407
 8000e64:	bffdfff8 	.word	0xbffdfff8
 8000e68:	cccccccd 	.word	0xcccccccd
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	bffdfbf8 	.word	0xbffdfbf8
 8000e74:	40020400 	.word	0x40020400

08000e78 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d101      	bne.n	8000e98 <HAL_DMA_Start_IT+0x20>
 8000e94:	2302      	movs	r3, #2
 8000e96:	e066      	b.n	8000f66 <HAL_DMA_Start_IT+0xee>
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d155      	bne.n	8000f58 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2202      	movs	r2, #2
 8000eb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0201 	bic.w	r2, r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f000 f8fb 	bl	80010cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d008      	beq.n	8000ef0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 020e 	orr.w	r2, r2, #14
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e00f      	b.n	8000f10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0204 	bic.w	r2, r2, #4
 8000efe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 020a 	orr.w	r2, r2, #10
 8000f0e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f2c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d007      	beq.n	8000f46 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f44:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f042 0201 	orr.w	r2, r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e005      	b.n	8000f64 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f60:	2302      	movs	r3, #2
 8000f62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	f003 031f 	and.w	r3, r3, #31
 8000f8e:	2204      	movs	r2, #4
 8000f90:	409a      	lsls	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d026      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x7a>
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d021      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0320 	and.w	r3, r3, #32
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d107      	bne.n	8000fc2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0204 	bic.w	r2, r2, #4
 8000fc0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	f003 021f 	and.w	r2, r3, #31
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	2104      	movs	r1, #4
 8000fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d071      	beq.n	80010c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000fe6:	e06c      	b.n	80010c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d02e      	beq.n	800105a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d029      	beq.n	800105a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10b      	bne.n	800102c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 020a 	bic.w	r2, r2, #10
 8001022:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	2102      	movs	r1, #2
 800103a:	fa01 f202 	lsl.w	r2, r1, r2
 800103e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104c:	2b00      	cmp	r3, #0
 800104e:	d038      	beq.n	80010c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001058:	e033      	b.n	80010c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	2208      	movs	r2, #8
 8001064:	409a      	lsls	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4013      	ands	r3, r2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d02a      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	2b00      	cmp	r3, #0
 8001076:	d025      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 020e 	bic.w	r2, r2, #14
 8001086:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108c:	f003 021f 	and.w	r2, r3, #31
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
}
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010f4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	f003 021f 	and.w	r2, r3, #31
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	2101      	movs	r1, #1
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b10      	cmp	r3, #16
 8001118:	d108      	bne.n	800112c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800112a:	e007      	b.n	800113c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	60da      	str	r2, [r3, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001148:	b480      	push	{r7}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001158:	429a      	cmp	r2, r3
 800115a:	d802      	bhi.n	8001162 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e001      	b.n	8001166 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001164:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	3b08      	subs	r3, #8
 8001172:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	009a      	lsls	r2, r3, #2
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4413      	add	r3, r2
 8001188:	461a      	mov	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001192:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2201      	movs	r2, #1
 800119c:	409a      	lsls	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80011a2:	bf00      	nop
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40020407 	.word	0x40020407
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020820 	.word	0x40020820
 80011bc:	cccccccd 	.word	0xcccccccd
 80011c0:	40020880 	.word	0x40020880

080011c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a08      	ldr	r2, [pc, #32]	@ (8001208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80011e6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	2201      	movs	r2, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	1000823f 	.word	0x1000823f
 8001208:	40020940 	.word	0x40020940

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800121a:	e15a      	b.n	80014d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 814c 	beq.w	80014cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b01      	cmp	r3, #1
 800123e:	d005      	beq.n	800124c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001248:	2b02      	cmp	r3, #2
 800124a:	d130      	bne.n	80012ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	f003 0201 	and.w	r2, r3, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d017      	beq.n	80012ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d123      	bne.n	800133e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3208      	adds	r2, #8
 80012fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	6939      	ldr	r1, [r7, #16]
 800133a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 0203 	and.w	r2, r3, #3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 80a6 	beq.w	80014cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001380:	4b5b      	ldr	r3, [pc, #364]	@ (80014f0 <HAL_GPIO_Init+0x2e4>)
 8001382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001384:	4a5a      	ldr	r2, [pc, #360]	@ (80014f0 <HAL_GPIO_Init+0x2e4>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6613      	str	r3, [r2, #96]	@ 0x60
 800138c:	4b58      	ldr	r3, [pc, #352]	@ (80014f0 <HAL_GPIO_Init+0x2e4>)
 800138e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001398:	4a56      	ldr	r2, [pc, #344]	@ (80014f4 <HAL_GPIO_Init+0x2e8>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013c2:	d01f      	beq.n	8001404 <HAL_GPIO_Init+0x1f8>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a4c      	ldr	r2, [pc, #304]	@ (80014f8 <HAL_GPIO_Init+0x2ec>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d019      	beq.n	8001400 <HAL_GPIO_Init+0x1f4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a4b      	ldr	r2, [pc, #300]	@ (80014fc <HAL_GPIO_Init+0x2f0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d013      	beq.n	80013fc <HAL_GPIO_Init+0x1f0>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001500 <HAL_GPIO_Init+0x2f4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d00d      	beq.n	80013f8 <HAL_GPIO_Init+0x1ec>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a49      	ldr	r2, [pc, #292]	@ (8001504 <HAL_GPIO_Init+0x2f8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0x1e8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a48      	ldr	r2, [pc, #288]	@ (8001508 <HAL_GPIO_Init+0x2fc>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d101      	bne.n	80013f0 <HAL_GPIO_Init+0x1e4>
 80013ec:	2305      	movs	r3, #5
 80013ee:	e00a      	b.n	8001406 <HAL_GPIO_Init+0x1fa>
 80013f0:	2306      	movs	r3, #6
 80013f2:	e008      	b.n	8001406 <HAL_GPIO_Init+0x1fa>
 80013f4:	2304      	movs	r3, #4
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x1fa>
 80013f8:	2303      	movs	r3, #3
 80013fa:	e004      	b.n	8001406 <HAL_GPIO_Init+0x1fa>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e002      	b.n	8001406 <HAL_GPIO_Init+0x1fa>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_GPIO_Init+0x1fa>
 8001404:	2300      	movs	r3, #0
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	f002 0203 	and.w	r2, r2, #3
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4093      	lsls	r3, r2
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001416:	4937      	ldr	r1, [pc, #220]	@ (80014f4 <HAL_GPIO_Init+0x2e8>)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001424:	4b39      	ldr	r3, [pc, #228]	@ (800150c <HAL_GPIO_Init+0x300>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001448:	4a30      	ldr	r2, [pc, #192]	@ (800150c <HAL_GPIO_Init+0x300>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800144e:	4b2f      	ldr	r3, [pc, #188]	@ (800150c <HAL_GPIO_Init+0x300>)
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001472:	4a26      	ldr	r2, [pc, #152]	@ (800150c <HAL_GPIO_Init+0x300>)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001478:	4b24      	ldr	r3, [pc, #144]	@ (800150c <HAL_GPIO_Init+0x300>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800149c:	4a1b      	ldr	r2, [pc, #108]	@ (800150c <HAL_GPIO_Init+0x300>)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <HAL_GPIO_Init+0x300>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014c6:	4a11      	ldr	r2, [pc, #68]	@ (800150c <HAL_GPIO_Init+0x300>)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	fa22 f303 	lsr.w	r3, r2, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f47f ae9d 	bne.w	800121c <HAL_GPIO_Init+0x10>
  }
}
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010000 	.word	0x40010000
 80014f8:	48000400 	.word	0x48000400
 80014fc:	48000800 	.word	0x48000800
 8001500:	48000c00 	.word	0x48000c00
 8001504:	48001000 	.word	0x48001000
 8001508:	48001400 	.word	0x48001400
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d141      	bne.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800151e:	4b4b      	ldr	r3, [pc, #300]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800152a:	d131      	bne.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800152c:	4b47      	ldr	r3, [pc, #284]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001532:	4a46      	ldr	r2, [pc, #280]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001538:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800153c:	4b43      	ldr	r3, [pc, #268]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001544:	4a41      	ldr	r2, [pc, #260]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800154c:	4b40      	ldr	r3, [pc, #256]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2232      	movs	r2, #50	@ 0x32
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	4a3f      	ldr	r2, [pc, #252]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	0c9b      	lsrs	r3, r3, #18
 800155e:	3301      	adds	r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001562:	e002      	b.n	800156a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3b01      	subs	r3, #1
 8001568:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800156a:	4b38      	ldr	r3, [pc, #224]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001576:	d102      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f2      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800157e:	4b33      	ldr	r3, [pc, #204]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800158a:	d158      	bne.n	800163e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e057      	b.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001590:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001596:	4a2d      	ldr	r2, [pc, #180]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800159c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015a0:	e04d      	b.n	800163e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015a8:	d141      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015aa:	4b28      	ldr	r3, [pc, #160]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b6:	d131      	bne.n	800161c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b8:	4b24      	ldr	r3, [pc, #144]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015be:	4a23      	ldr	r2, [pc, #140]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c8:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015d0:	4a1e      	ldr	r2, [pc, #120]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2232      	movs	r2, #50	@ 0x32
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ee:	e002      	b.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001602:	d102      	bne.n	800160a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f2      	bne.n	80015f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001616:	d112      	bne.n	800163e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e011      	b.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001628:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800162c:	e007      	b.n	800163e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001638:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800163c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40007000 	.word	0x40007000
 8001650:	20000000 	.word	0x20000000
 8001654:	431bde83 	.word	0x431bde83

08001658 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001666:	6093      	str	r3, [r2, #8]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40007000 	.word	0x40007000

08001678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e2fe      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d075      	beq.n	8001782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001696:	4b97      	ldr	r3, [pc, #604]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a0:	4b94      	ldr	r3, [pc, #592]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	d102      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3e>
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d002      	beq.n	80016bc <HAL_RCC_OscConfig+0x44>
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d10b      	bne.n	80016d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	4b8d      	ldr	r3, [pc, #564]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d05b      	beq.n	8001780 <HAL_RCC_OscConfig+0x108>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d157      	bne.n	8001780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e2d9      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_OscConfig+0x74>
 80016de:	4b85      	ldr	r3, [pc, #532]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a84      	ldr	r2, [pc, #528]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e01d      	b.n	8001728 <HAL_RCC_OscConfig+0xb0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x98>
 80016f6:	4b7f      	ldr	r3, [pc, #508]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a7e      	ldr	r2, [pc, #504]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b7c      	ldr	r3, [pc, #496]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7b      	ldr	r2, [pc, #492]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0xb0>
 8001710:	4b78      	ldr	r3, [pc, #480]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a77      	ldr	r2, [pc, #476]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b75      	ldr	r3, [pc, #468]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a74      	ldr	r2, [pc, #464]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d013      	beq.n	8001758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff f9de 	bl	8000af0 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff f9da 	bl	8000af0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	@ 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e29e      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174a:	4b6a      	ldr	r3, [pc, #424]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0xc0>
 8001756:	e014      	b.n	8001782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff f9ca 	bl	8000af0 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff f9c6 	bl	8000af0 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	@ 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e28a      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001772:	4b60      	ldr	r3, [pc, #384]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0xe8>
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d075      	beq.n	800187a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178e:	4b59      	ldr	r3, [pc, #356]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001798:	4b56      	ldr	r3, [pc, #344]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_OscConfig+0x136>
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d002      	beq.n	80017b4 <HAL_RCC_OscConfig+0x13c>
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d11f      	bne.n	80017f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b4:	4b4f      	ldr	r3, [pc, #316]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x154>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e25d      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	061b      	lsls	r3, r3, #24
 80017da:	4946      	ldr	r1, [pc, #280]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017e0:	4b45      	ldr	r3, [pc, #276]	@ (80018f8 <HAL_RCC_OscConfig+0x280>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff f937 	bl	8000a58 <HAL_InitTick>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d043      	beq.n	8001878 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e249      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d023      	beq.n	8001844 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fc:	4b3d      	ldr	r3, [pc, #244]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a3c      	ldr	r2, [pc, #240]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff f972 	bl	8000af0 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff f96e 	bl	8000af0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e232      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001822:	4b34      	ldr	r3, [pc, #208]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b31      	ldr	r3, [pc, #196]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	061b      	lsls	r3, r3, #24
 800183c:	492d      	ldr	r1, [pc, #180]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
 8001842:	e01a      	b.n	800187a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001844:	4b2b      	ldr	r3, [pc, #172]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a2a      	ldr	r2, [pc, #168]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800184a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800184e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff f94e 	bl	8000af0 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff f94a 	bl	8000af0 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e20e      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800186a:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1e0>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d041      	beq.n	800190a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d01c      	beq.n	80018c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188e:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001894:	4a17      	ldr	r2, [pc, #92]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff f927 	bl	8000af0 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff f923 	bl	8000af0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1e7      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b8:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80018ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0ef      	beq.n	80018a6 <HAL_RCC_OscConfig+0x22e>
 80018c6:	e020      	b.n	800190a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80018ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff f90a 	bl	8000af0 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018de:	e00d      	b.n	80018fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff f906 	bl	8000af0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d906      	bls.n	80018fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1ca      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ea      	bne.n	80018e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80a6 	beq.w	8001a64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800191c:	4b84      	ldr	r3, [pc, #528]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0x2b4>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x2b6>
 800192c:	2300      	movs	r3, #0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00d      	beq.n	800194e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b7f      	ldr	r3, [pc, #508]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	4a7e      	ldr	r2, [pc, #504]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800193c:	6593      	str	r3, [r2, #88]	@ 0x58
 800193e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800194a:	2301      	movs	r3, #1
 800194c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194e:	4b79      	ldr	r3, [pc, #484]	@ (8001b34 <HAL_RCC_OscConfig+0x4bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d118      	bne.n	800198c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800195a:	4b76      	ldr	r3, [pc, #472]	@ (8001b34 <HAL_RCC_OscConfig+0x4bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a75      	ldr	r2, [pc, #468]	@ (8001b34 <HAL_RCC_OscConfig+0x4bc>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001966:	f7ff f8c3 	bl	8000af0 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196e:	f7ff f8bf 	bl	8000af0 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e183      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001980:	4b6c      	ldr	r3, [pc, #432]	@ (8001b34 <HAL_RCC_OscConfig+0x4bc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d108      	bne.n	80019a6 <HAL_RCC_OscConfig+0x32e>
 8001994:	4b66      	ldr	r3, [pc, #408]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199a:	4a65      	ldr	r2, [pc, #404]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a4:	e024      	b.n	80019f0 <HAL_RCC_OscConfig+0x378>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b05      	cmp	r3, #5
 80019ac:	d110      	bne.n	80019d0 <HAL_RCC_OscConfig+0x358>
 80019ae:	4b60      	ldr	r3, [pc, #384]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b4:	4a5e      	ldr	r2, [pc, #376]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019be:	4b5c      	ldr	r3, [pc, #368]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ce:	e00f      	b.n	80019f0 <HAL_RCC_OscConfig+0x378>
 80019d0:	4b57      	ldr	r3, [pc, #348]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d6:	4a56      	ldr	r2, [pc, #344]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e0:	4b53      	ldr	r3, [pc, #332]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e6:	4a52      	ldr	r2, [pc, #328]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d016      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff f87a 	bl	8000af0 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff f876 	bl	8000af0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e138      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a16:	4b46      	ldr	r3, [pc, #280]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ed      	beq.n	8001a00 <HAL_RCC_OscConfig+0x388>
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff f863 	bl	8000af0 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff f85f 	bl	8000af0 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e121      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a44:	4b3a      	ldr	r3, [pc, #232]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ed      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a52:	7ffb      	ldrb	r3, [r7, #31]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a58:	4b35      	ldr	r3, [pc, #212]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	4a34      	ldr	r2, [pc, #208]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d03c      	beq.n	8001aea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a78:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff f832 	bl	8000af0 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a90:	f7ff f82e 	bl	8000af0 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0f2      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aa2:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ef      	beq.n	8001a90 <HAL_RCC_OscConfig+0x418>
 8001ab0:	e01b      	b.n	8001aea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f815 	bl	8000af0 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aca:	f7ff f811 	bl	8000af0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e0d5      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ef      	bne.n	8001aca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80c9 	beq.w	8001c86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	f000 8083 	beq.w	8001c08 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d15e      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001b10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7fe ffeb 	bl	8000af0 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1c:	e00c      	b.n	8001b38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7fe ffe7 	bl	8000af0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d905      	bls.n	8001b38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0ab      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b38:	4b55      	ldr	r3, [pc, #340]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1ec      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b44:	4b52      	ldr	r3, [pc, #328]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	4b52      	ldr	r3, [pc, #328]	@ (8001c94 <HAL_RCC_OscConfig+0x61c>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6a11      	ldr	r1, [r2, #32]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b54:	3a01      	subs	r2, #1
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b5e:	0212      	lsls	r2, r2, #8
 8001b60:	4311      	orrs	r1, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b66:	0852      	lsrs	r2, r2, #1
 8001b68:	3a01      	subs	r2, #1
 8001b6a:	0552      	lsls	r2, r2, #21
 8001b6c:	4311      	orrs	r1, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b72:	0852      	lsrs	r2, r2, #1
 8001b74:	3a01      	subs	r2, #1
 8001b76:	0652      	lsls	r2, r2, #25
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b7e:	06d2      	lsls	r2, r2, #27
 8001b80:	430a      	orrs	r2, r1
 8001b82:	4943      	ldr	r1, [pc, #268]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b88:	4b41      	ldr	r3, [pc, #260]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a40      	ldr	r2, [pc, #256]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b94:	4b3e      	ldr	r3, [pc, #248]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4a3d      	ldr	r2, [pc, #244]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7fe ffa6 	bl	8000af0 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7fe ffa2 	bl	8000af0 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e066      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	4b35      	ldr	r3, [pc, #212]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x530>
 8001bc6:	e05e      	b.n	8001c86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc8:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a30      	ldr	r2, [pc, #192]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7fe ff8c 	bl	8000af0 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7fe ff88 	bl	8000af0 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e04c      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bee:	4b28      	ldr	r3, [pc, #160]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001bfa:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	4924      	ldr	r1, [pc, #144]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	60cb      	str	r3, [r1, #12]
 8001c06:	e03e      	b.n	8001c86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e039      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d12c      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c32:	3b01      	subs	r3, #1
 8001c34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d123      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d11b      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d113      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	3b01      	subs	r3, #1
 8001c68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c78:	085b      	lsrs	r3, r3, #1
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	019f800c 	.word	0x019f800c
 8001c98:	feeefffc 	.word	0xfeeefffc

08001c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e11e      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b91      	ldr	r3, [pc, #580]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b8e      	ldr	r3, [pc, #568]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 020f 	bic.w	r2, r3, #15
 8001cca:	498c      	ldr	r1, [pc, #560]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b8a      	ldr	r3, [pc, #552]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e106      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d073      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d129      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf8:	4b81      	ldr	r3, [pc, #516]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0f4      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d08:	f000 f966 	bl	8001fd8 <RCC_GetSysClockFreqFromPLLSource>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4a7c      	ldr	r2, [pc, #496]	@ (8001f04 <HAL_RCC_ClockConfig+0x268>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d93f      	bls.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d16:	4b7a      	ldr	r3, [pc, #488]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d033      	beq.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d12f      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d36:	4b72      	ldr	r3, [pc, #456]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d3e:	4a70      	ldr	r2, [pc, #448]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e024      	b.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d54:	4b6a      	ldr	r3, [pc, #424]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0c6      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d64:	4b66      	ldr	r3, [pc, #408]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0be      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d74:	f000 f8ce 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4a61      	ldr	r2, [pc, #388]	@ (8001f04 <HAL_RCC_ClockConfig+0x268>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d909      	bls.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d82:	4b5f      	ldr	r3, [pc, #380]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d8a:	4a5d      	ldr	r2, [pc, #372]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d92:	2380      	movs	r3, #128	@ 0x80
 8001d94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b5a      	ldr	r3, [pc, #360]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4957      	ldr	r1, [pc, #348]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da8:	f7fe fea2 	bl	8000af0 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7fe fe9e 	bl	8000af0 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e095      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d023      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df0:	4b43      	ldr	r3, [pc, #268]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a42      	ldr	r2, [pc, #264]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001df6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dfa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e08:	4b3d      	ldr	r3, [pc, #244]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e10:	4a3b      	ldr	r2, [pc, #236]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e18:	4b39      	ldr	r3, [pc, #228]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4936      	ldr	r1, [pc, #216]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b80      	cmp	r3, #128	@ 0x80
 8001e30:	d105      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e32:	4b33      	ldr	r3, [pc, #204]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	4a32      	ldr	r2, [pc, #200]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d21d      	bcs.n	8001e88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 020f 	bic.w	r2, r3, #15
 8001e54:	4929      	ldr	r1, [pc, #164]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e5c:	f7fe fe48 	bl	8000af0 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7fe fe44 	bl	8000af0 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e03b      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1ed      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4917      	ldr	r1, [pc, #92]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	490f      	ldr	r1, [pc, #60]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ec6:	f000 f825 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	490c      	ldr	r1, [pc, #48]	@ (8001f08 <HAL_RCC_ClockConfig+0x26c>)
 8001ed8:	5ccb      	ldrb	r3, [r1, r3]
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fdb4 	bl	8000a58 <HAL_InitTick>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40022000 	.word	0x40022000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	04c4b400 	.word	0x04c4b400
 8001f08:	08003c78 	.word	0x08003c78
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d102      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f26:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e047      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f2c:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d102      	bne.n	8001f3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f38:	4b26      	ldr	r3, [pc, #152]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	e03e      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f3e:	4b23      	ldr	r3, [pc, #140]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	d136      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f4a:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f68:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	4a16      	ldr	r2, [pc, #88]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f72:	68d2      	ldr	r2, [r2, #12]
 8001f74:	0a12      	lsrs	r2, r2, #8
 8001f76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
      break;
 8001f80:	e00c      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f82:	4a13      	ldr	r2, [pc, #76]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8c:	68d2      	ldr	r2, [r2, #12]
 8001f8e:	0a12      	lsrs	r2, r2, #8
 8001f90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
      break;
 8001f9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0e5b      	lsrs	r3, r3, #25
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e001      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fbc:	693b      	ldr	r3, [r7, #16]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	00f42400 	.word	0x00f42400
 8001fd4:	007a1200 	.word	0x007a1200

08001fd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fde:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d10c      	bne.n	8002016 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ffc:	4a17      	ldr	r2, [pc, #92]	@ (800205c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002006:	68d2      	ldr	r2, [r2, #12]
 8002008:	0a12      	lsrs	r2, r2, #8
 800200a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
    break;
 8002014:	e00c      	b.n	8002030 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002016:	4a12      	ldr	r2, [pc, #72]	@ (8002060 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4a0e      	ldr	r2, [pc, #56]	@ (8002058 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002020:	68d2      	ldr	r2, [r2, #12]
 8002022:	0a12      	lsrs	r2, r2, #8
 8002024:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	617b      	str	r3, [r7, #20]
    break;
 800202e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002030:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0e5b      	lsrs	r3, r3, #25
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	3301      	adds	r3, #1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800204a:	687b      	ldr	r3, [r7, #4]
}
 800204c:	4618      	mov	r0, r3
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40021000 	.word	0x40021000
 800205c:	007a1200 	.word	0x007a1200
 8002060:	00f42400 	.word	0x00f42400

08002064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e049      	b.n	800210a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fb66 	bl	800075c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3304      	adds	r3, #4
 80020a0:	4619      	mov	r1, r3
 80020a2:	4610      	mov	r0, r2
 80020a4:	f001 f834 	bl	8003110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d001      	beq.n	800212c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e04c      	b.n	80021c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a26      	ldr	r2, [pc, #152]	@ (80021d4 <HAL_TIM_Base_Start+0xc0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d022      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002146:	d01d      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a22      	ldr	r2, [pc, #136]	@ (80021d8 <HAL_TIM_Base_Start+0xc4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d018      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a21      	ldr	r2, [pc, #132]	@ (80021dc <HAL_TIM_Base_Start+0xc8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1f      	ldr	r2, [pc, #124]	@ (80021e0 <HAL_TIM_Base_Start+0xcc>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00e      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1e      	ldr	r2, [pc, #120]	@ (80021e4 <HAL_TIM_Base_Start+0xd0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1c      	ldr	r2, [pc, #112]	@ (80021e8 <HAL_TIM_Base_Start+0xd4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1b      	ldr	r2, [pc, #108]	@ (80021ec <HAL_TIM_Base_Start+0xd8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d115      	bne.n	80021b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_TIM_Base_Start+0xdc>)
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b06      	cmp	r3, #6
 8002194:	d015      	beq.n	80021c2 <HAL_TIM_Base_Start+0xae>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800219c:	d011      	beq.n	80021c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ae:	e008      	b.n	80021c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e000      	b.n	80021c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40012c00 	.word	0x40012c00
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000800 	.word	0x40000800
 80021e0:	40000c00 	.word	0x40000c00
 80021e4:	40013400 	.word	0x40013400
 80021e8:	40014000 	.word	0x40014000
 80021ec:	40015000 	.word	0x40015000
 80021f0:	00010007 	.word	0x00010007

080021f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d001      	beq.n	800220c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e054      	b.n	80022b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a26      	ldr	r2, [pc, #152]	@ (80022c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d022      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002236:	d01d      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a22      	ldr	r2, [pc, #136]	@ (80022c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d018      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a21      	ldr	r2, [pc, #132]	@ (80022cc <HAL_TIM_Base_Start_IT+0xd8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1f      	ldr	r2, [pc, #124]	@ (80022d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00e      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1e      	ldr	r2, [pc, #120]	@ (80022d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1c      	ldr	r2, [pc, #112]	@ (80022d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x80>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1b      	ldr	r2, [pc, #108]	@ (80022dc <HAL_TIM_Base_Start_IT+0xe8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d115      	bne.n	80022a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <HAL_TIM_Base_Start_IT+0xec>)
 800227c:	4013      	ands	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b06      	cmp	r3, #6
 8002284:	d015      	beq.n	80022b2 <HAL_TIM_Base_Start_IT+0xbe>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800228c:	d011      	beq.n	80022b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229e:	e008      	b.n	80022b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e000      	b.n	80022b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	40000400 	.word	0x40000400
 80022cc:	40000800 	.word	0x40000800
 80022d0:	40000c00 	.word	0x40000c00
 80022d4:	40013400 	.word	0x40013400
 80022d8:	40014000 	.word	0x40014000
 80022dc:	40015000 	.word	0x40015000
 80022e0:	00010007 	.word	0x00010007

080022e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e049      	b.n	800238a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f841 	bl	8002392 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3304      	adds	r3, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4610      	mov	r0, r2
 8002324:	f000 fef4 	bl	8003110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e03c      	b.n	800244e <HAL_TIM_PWM_Start_DMA+0xa6>
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d109      	bne.n	80023ee <HAL_TIM_PWM_Start_DMA+0x46>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	e02f      	b.n	800244e <HAL_TIM_PWM_Start_DMA+0xa6>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d109      	bne.n	8002408 <HAL_TIM_PWM_Start_DMA+0x60>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e022      	b.n	800244e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d109      	bne.n	8002422 <HAL_TIM_PWM_Start_DMA+0x7a>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	bf0c      	ite	eq
 800241a:	2301      	moveq	r3, #1
 800241c:	2300      	movne	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	e015      	b.n	800244e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b10      	cmp	r3, #16
 8002426:	d109      	bne.n	800243c <HAL_TIM_PWM_Start_DMA+0x94>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	e008      	b.n	800244e <HAL_TIM_PWM_Start_DMA+0xa6>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002452:	2302      	movs	r3, #2
 8002454:	e1b5      	b.n	80027c2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_TIM_PWM_Start_DMA+0xc8>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e03c      	b.n	80024ea <HAL_TIM_PWM_Start_DMA+0x142>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b04      	cmp	r3, #4
 8002474:	d109      	bne.n	800248a <HAL_TIM_PWM_Start_DMA+0xe2>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	bf0c      	ite	eq
 8002482:	2301      	moveq	r3, #1
 8002484:	2300      	movne	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	e02f      	b.n	80024ea <HAL_TIM_PWM_Start_DMA+0x142>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d109      	bne.n	80024a4 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b01      	cmp	r3, #1
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	e022      	b.n	80024ea <HAL_TIM_PWM_Start_DMA+0x142>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	d109      	bne.n	80024be <HAL_TIM_PWM_Start_DMA+0x116>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	e015      	b.n	80024ea <HAL_TIM_PWM_Start_DMA+0x142>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d109      	bne.n	80024d8 <HAL_TIM_PWM_Start_DMA+0x130>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	e008      	b.n	80024ea <HAL_TIM_PWM_Start_DMA+0x142>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d034      	beq.n	8002558 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <HAL_TIM_PWM_Start_DMA+0x152>
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e161      	b.n	80027c2 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <HAL_TIM_PWM_Start_DMA+0x166>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800250c:	e026      	b.n	800255c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d104      	bne.n	800251e <HAL_TIM_PWM_Start_DMA+0x176>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800251c:	e01e      	b.n	800255c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d104      	bne.n	800252e <HAL_TIM_PWM_Start_DMA+0x186>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800252c:	e016      	b.n	800255c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b0c      	cmp	r3, #12
 8002532:	d104      	bne.n	800253e <HAL_TIM_PWM_Start_DMA+0x196>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800253c:	e00e      	b.n	800255c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b10      	cmp	r3, #16
 8002542:	d104      	bne.n	800254e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800254c:	e006      	b.n	800255c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2202      	movs	r2, #2
 8002552:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002556:	e001      	b.n	800255c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e132      	b.n	80027c2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	f200 80ae 	bhi.w	80026c0 <HAL_TIM_PWM_Start_DMA+0x318>
 8002564:	a201      	add	r2, pc, #4	@ (adr r2, 800256c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256a:	bf00      	nop
 800256c:	080025a1 	.word	0x080025a1
 8002570:	080026c1 	.word	0x080026c1
 8002574:	080026c1 	.word	0x080026c1
 8002578:	080026c1 	.word	0x080026c1
 800257c:	080025e9 	.word	0x080025e9
 8002580:	080026c1 	.word	0x080026c1
 8002584:	080026c1 	.word	0x080026c1
 8002588:	080026c1 	.word	0x080026c1
 800258c:	08002631 	.word	0x08002631
 8002590:	080026c1 	.word	0x080026c1
 8002594:	080026c1 	.word	0x080026c1
 8002598:	080026c1 	.word	0x080026c1
 800259c:	08002679 	.word	0x08002679
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	4a89      	ldr	r2, [pc, #548]	@ (80027cc <HAL_TIM_PWM_Start_DMA+0x424>)
 80025a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	4a88      	ldr	r2, [pc, #544]	@ (80027d0 <HAL_TIM_PWM_Start_DMA+0x428>)
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	4a87      	ldr	r2, [pc, #540]	@ (80027d4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80025b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3334      	adds	r3, #52	@ 0x34
 80025c4:	461a      	mov	r2, r3
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	f7fe fc56 	bl	8000e78 <HAL_DMA_Start_IT>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0f5      	b.n	80027c2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025e4:	60da      	str	r2, [r3, #12]
      break;
 80025e6:	e06e      	b.n	80026c6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ec:	4a77      	ldr	r2, [pc, #476]	@ (80027cc <HAL_TIM_PWM_Start_DMA+0x424>)
 80025ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	4a76      	ldr	r2, [pc, #472]	@ (80027d0 <HAL_TIM_PWM_Start_DMA+0x428>)
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	4a75      	ldr	r2, [pc, #468]	@ (80027d4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80025fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3338      	adds	r3, #56	@ 0x38
 800260c:	461a      	mov	r2, r3
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	f7fe fc32 	bl	8000e78 <HAL_DMA_Start_IT>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0d1      	b.n	80027c2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800262c:	60da      	str	r2, [r3, #12]
      break;
 800262e:	e04a      	b.n	80026c6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	4a65      	ldr	r2, [pc, #404]	@ (80027cc <HAL_TIM_PWM_Start_DMA+0x424>)
 8002636:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263c:	4a64      	ldr	r2, [pc, #400]	@ (80027d0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002644:	4a63      	ldr	r2, [pc, #396]	@ (80027d4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8002646:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	333c      	adds	r3, #60	@ 0x3c
 8002654:	461a      	mov	r2, r3
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	f7fe fc0e 	bl	8000e78 <HAL_DMA_Start_IT>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0ad      	b.n	80027c2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002674:	60da      	str	r2, [r3, #12]
      break;
 8002676:	e026      	b.n	80026c6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	4a53      	ldr	r2, [pc, #332]	@ (80027cc <HAL_TIM_PWM_Start_DMA+0x424>)
 800267e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	4a52      	ldr	r2, [pc, #328]	@ (80027d0 <HAL_TIM_PWM_Start_DMA+0x428>)
 8002686:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	4a51      	ldr	r2, [pc, #324]	@ (80027d4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800268e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3340      	adds	r3, #64	@ 0x40
 800269c:	461a      	mov	r2, r3
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	f7fe fbea 	bl	8000e78 <HAL_DMA_Start_IT>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e089      	b.n	80027c2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80026bc:	60da      	str	r2, [r3, #12]
      break;
 80026be:	e002      	b.n	80026c6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	75fb      	strb	r3, [r7, #23]
      break;
 80026c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d179      	bne.n	80027c0 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 f995 	bl	8003a04 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a3e      	ldr	r2, [pc, #248]	@ (80027d8 <HAL_TIM_PWM_Start_DMA+0x430>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d018      	beq.n	8002716 <HAL_TIM_PWM_Start_DMA+0x36e>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a3c      	ldr	r2, [pc, #240]	@ (80027dc <HAL_TIM_PWM_Start_DMA+0x434>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_TIM_PWM_Start_DMA+0x36e>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a3b      	ldr	r2, [pc, #236]	@ (80027e0 <HAL_TIM_PWM_Start_DMA+0x438>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00e      	beq.n	8002716 <HAL_TIM_PWM_Start_DMA+0x36e>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a39      	ldr	r2, [pc, #228]	@ (80027e4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d009      	beq.n	8002716 <HAL_TIM_PWM_Start_DMA+0x36e>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a38      	ldr	r2, [pc, #224]	@ (80027e8 <HAL_TIM_PWM_Start_DMA+0x440>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d004      	beq.n	8002716 <HAL_TIM_PWM_Start_DMA+0x36e>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a36      	ldr	r2, [pc, #216]	@ (80027ec <HAL_TIM_PWM_Start_DMA+0x444>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_TIM_PWM_Start_DMA+0x372>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_TIM_PWM_Start_DMA+0x374>
 800271a:	2300      	movs	r3, #0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800272e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a28      	ldr	r2, [pc, #160]	@ (80027d8 <HAL_TIM_PWM_Start_DMA+0x430>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d022      	beq.n	8002780 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002742:	d01d      	beq.n	8002780 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a29      	ldr	r2, [pc, #164]	@ (80027f0 <HAL_TIM_PWM_Start_DMA+0x448>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d018      	beq.n	8002780 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a28      	ldr	r2, [pc, #160]	@ (80027f4 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d013      	beq.n	8002780 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a26      	ldr	r2, [pc, #152]	@ (80027f8 <HAL_TIM_PWM_Start_DMA+0x450>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00e      	beq.n	8002780 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1d      	ldr	r2, [pc, #116]	@ (80027dc <HAL_TIM_PWM_Start_DMA+0x434>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d009      	beq.n	8002780 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1b      	ldr	r2, [pc, #108]	@ (80027e0 <HAL_TIM_PWM_Start_DMA+0x438>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1c      	ldr	r2, [pc, #112]	@ (80027ec <HAL_TIM_PWM_Start_DMA+0x444>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d115      	bne.n	80027ac <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <HAL_TIM_PWM_Start_DMA+0x454>)
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b06      	cmp	r3, #6
 8002790:	d015      	beq.n	80027be <HAL_TIM_PWM_Start_DMA+0x416>
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002798:	d011      	beq.n	80027be <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0201 	orr.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027aa:	e008      	b.n	80027be <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e000      	b.n	80027c0 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027be:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	08002fff 	.word	0x08002fff
 80027d0:	080030a7 	.word	0x080030a7
 80027d4:	08002f6d 	.word	0x08002f6d
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40013400 	.word	0x40013400
 80027e0:	40014000 	.word	0x40014000
 80027e4:	40014400 	.word	0x40014400
 80027e8:	40014800 	.word	0x40014800
 80027ec:	40015000 	.word	0x40015000
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40000800 	.word	0x40000800
 80027f8:	40000c00 	.word	0x40000c00
 80027fc:	00010007 	.word	0x00010007

08002800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d020      	beq.n	8002864 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0202 	mvn.w	r2, #2
 8002834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fb5c 	bl	8002f08 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fb4e 	bl	8002ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fb5f 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d020      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01b      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0204 	mvn.w	r2, #4
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fb36 	bl	8002f08 <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fb28 	bl	8002ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fb39 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d020      	beq.n	80028fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0208 	mvn.w	r2, #8
 80028cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2204      	movs	r2, #4
 80028d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fb10 	bl	8002f08 <HAL_TIM_IC_CaptureCallback>
 80028e8:	e005      	b.n	80028f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fb02 	bl	8002ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fb13 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b00      	cmp	r3, #0
 8002904:	d020      	beq.n	8002948 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01b      	beq.n	8002948 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0210 	mvn.w	r2, #16
 8002918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2208      	movs	r2, #8
 800291e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 faea 	bl	8002f08 <HAL_TIM_IC_CaptureCallback>
 8002934:	e005      	b.n	8002942 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fadc 	bl	8002ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 faed 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00c      	beq.n	800296c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0201 	mvn.w	r2, #1
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fd fcc6 	bl	80002f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d104      	bne.n	8002980 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00c      	beq.n	800299a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f001 f8fb 	bl	8003b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00c      	beq.n	80029be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80029b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f001 f8f3 	bl	8003ba4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00c      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fab1 	bl	8002f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00c      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f06f 0220 	mvn.w	r2, #32
 80029fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f001 f8bb 	bl	8003b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00c      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f001 f8c7 	bl	8003bb8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00c      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f001 f8bf 	bl	8003bcc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00c      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d007      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f001 f8b7 	bl	8003be0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00c      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f001 f8af 	bl	8003bf4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e0ff      	b.n	8002cbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b14      	cmp	r3, #20
 8002aca:	f200 80f0 	bhi.w	8002cae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ace:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002b29 	.word	0x08002b29
 8002ad8:	08002caf 	.word	0x08002caf
 8002adc:	08002caf 	.word	0x08002caf
 8002ae0:	08002caf 	.word	0x08002caf
 8002ae4:	08002b69 	.word	0x08002b69
 8002ae8:	08002caf 	.word	0x08002caf
 8002aec:	08002caf 	.word	0x08002caf
 8002af0:	08002caf 	.word	0x08002caf
 8002af4:	08002bab 	.word	0x08002bab
 8002af8:	08002caf 	.word	0x08002caf
 8002afc:	08002caf 	.word	0x08002caf
 8002b00:	08002caf 	.word	0x08002caf
 8002b04:	08002beb 	.word	0x08002beb
 8002b08:	08002caf 	.word	0x08002caf
 8002b0c:	08002caf 	.word	0x08002caf
 8002b10:	08002caf 	.word	0x08002caf
 8002b14:	08002c2d 	.word	0x08002c2d
 8002b18:	08002caf 	.word	0x08002caf
 8002b1c:	08002caf 	.word	0x08002caf
 8002b20:	08002caf 	.word	0x08002caf
 8002b24:	08002c6d 	.word	0x08002c6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fba2 	bl	8003278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0208 	orr.w	r2, r2, #8
 8002b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0204 	bic.w	r2, r2, #4
 8002b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6999      	ldr	r1, [r3, #24]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	619a      	str	r2, [r3, #24]
      break;
 8002b66:	e0a5      	b.n	8002cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fc1c 	bl	80033ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6999      	ldr	r1, [r3, #24]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	021a      	lsls	r2, r3, #8
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	619a      	str	r2, [r3, #24]
      break;
 8002ba8:	e084      	b.n	8002cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fc8f 	bl	80034d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0208 	orr.w	r2, r2, #8
 8002bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0204 	bic.w	r2, r2, #4
 8002bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69d9      	ldr	r1, [r3, #28]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	61da      	str	r2, [r3, #28]
      break;
 8002be8:	e064      	b.n	8002cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fd01 	bl	80035f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69da      	ldr	r2, [r3, #28]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69d9      	ldr	r1, [r3, #28]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	021a      	lsls	r2, r3, #8
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	61da      	str	r2, [r3, #28]
      break;
 8002c2a:	e043      	b.n	8002cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fd74 	bl	8003720 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0208 	orr.w	r2, r2, #8
 8002c46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0204 	bic.w	r2, r2, #4
 8002c56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002c6a:	e023      	b.n	8002cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fdbe 	bl	80037f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c96:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	021a      	lsls	r2, r3, #8
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002cac:	e002      	b.n	8002cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8002cb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop

08002cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e0f6      	b.n	8002ed2 <HAL_TIM_ConfigClockSource+0x20a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002d02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a6f      	ldr	r2, [pc, #444]	@ (8002edc <HAL_TIM_ConfigClockSource+0x214>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	f000 80c1 	beq.w	8002ea6 <HAL_TIM_ConfigClockSource+0x1de>
 8002d24:	4a6d      	ldr	r2, [pc, #436]	@ (8002edc <HAL_TIM_ConfigClockSource+0x214>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	f200 80c6 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002d2c:	4a6c      	ldr	r2, [pc, #432]	@ (8002ee0 <HAL_TIM_ConfigClockSource+0x218>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	f000 80b9 	beq.w	8002ea6 <HAL_TIM_ConfigClockSource+0x1de>
 8002d34:	4a6a      	ldr	r2, [pc, #424]	@ (8002ee0 <HAL_TIM_ConfigClockSource+0x218>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	f200 80be 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002d3c:	4a69      	ldr	r2, [pc, #420]	@ (8002ee4 <HAL_TIM_ConfigClockSource+0x21c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	f000 80b1 	beq.w	8002ea6 <HAL_TIM_ConfigClockSource+0x1de>
 8002d44:	4a67      	ldr	r2, [pc, #412]	@ (8002ee4 <HAL_TIM_ConfigClockSource+0x21c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	f200 80b6 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002d4c:	4a66      	ldr	r2, [pc, #408]	@ (8002ee8 <HAL_TIM_ConfigClockSource+0x220>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	f000 80a9 	beq.w	8002ea6 <HAL_TIM_ConfigClockSource+0x1de>
 8002d54:	4a64      	ldr	r2, [pc, #400]	@ (8002ee8 <HAL_TIM_ConfigClockSource+0x220>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	f200 80ae 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002d5c:	4a63      	ldr	r2, [pc, #396]	@ (8002eec <HAL_TIM_ConfigClockSource+0x224>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	f000 80a1 	beq.w	8002ea6 <HAL_TIM_ConfigClockSource+0x1de>
 8002d64:	4a61      	ldr	r2, [pc, #388]	@ (8002eec <HAL_TIM_ConfigClockSource+0x224>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	f200 80a6 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002d6c:	4a60      	ldr	r2, [pc, #384]	@ (8002ef0 <HAL_TIM_ConfigClockSource+0x228>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	f000 8099 	beq.w	8002ea6 <HAL_TIM_ConfigClockSource+0x1de>
 8002d74:	4a5e      	ldr	r2, [pc, #376]	@ (8002ef0 <HAL_TIM_ConfigClockSource+0x228>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	f200 809e 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002d7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002d80:	f000 8091 	beq.w	8002ea6 <HAL_TIM_ConfigClockSource+0x1de>
 8002d84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002d88:	f200 8096 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002d8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d90:	f000 8089 	beq.w	8002ea6 <HAL_TIM_ConfigClockSource+0x1de>
 8002d94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d98:	f200 808e 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da0:	d03e      	beq.n	8002e20 <HAL_TIM_ConfigClockSource+0x158>
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da6:	f200 8087 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dae:	f000 8086 	beq.w	8002ebe <HAL_TIM_ConfigClockSource+0x1f6>
 8002db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db6:	d87f      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002db8:	2b70      	cmp	r3, #112	@ 0x70
 8002dba:	d01a      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x12a>
 8002dbc:	2b70      	cmp	r3, #112	@ 0x70
 8002dbe:	d87b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002dc0:	2b60      	cmp	r3, #96	@ 0x60
 8002dc2:	d050      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x19e>
 8002dc4:	2b60      	cmp	r3, #96	@ 0x60
 8002dc6:	d877      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002dc8:	2b50      	cmp	r3, #80	@ 0x50
 8002dca:	d03c      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x17e>
 8002dcc:	2b50      	cmp	r3, #80	@ 0x50
 8002dce:	d873      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002dd0:	2b40      	cmp	r3, #64	@ 0x40
 8002dd2:	d058      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x1be>
 8002dd4:	2b40      	cmp	r3, #64	@ 0x40
 8002dd6:	d86f      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002dd8:	2b30      	cmp	r3, #48	@ 0x30
 8002dda:	d064      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x1de>
 8002ddc:	2b30      	cmp	r3, #48	@ 0x30
 8002dde:	d86b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d060      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x1de>
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d867      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d05c      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x1de>
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d05a      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x1de>
 8002df0:	e062      	b.n	8002eb8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e02:	f000 fddf 	bl	80039c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	609a      	str	r2, [r3, #8]
      break;
 8002e1e:	e04f      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e30:	f000 fdc8 	bl	80039c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e42:	609a      	str	r2, [r3, #8]
      break;
 8002e44:	e03c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e52:	461a      	mov	r2, r3
 8002e54:	f000 fd3a 	bl	80038cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2150      	movs	r1, #80	@ 0x50
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fd93 	bl	800398a <TIM_ITRx_SetConfig>
      break;
 8002e64:	e02c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e72:	461a      	mov	r2, r3
 8002e74:	f000 fd59 	bl	800392a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2160      	movs	r1, #96	@ 0x60
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fd83 	bl	800398a <TIM_ITRx_SetConfig>
      break;
 8002e84:	e01c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e92:	461a      	mov	r2, r3
 8002e94:	f000 fd1a 	bl	80038cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2140      	movs	r1, #64	@ 0x40
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fd73 	bl	800398a <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e00c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f000 fd6a 	bl	800398a <TIM_ITRx_SetConfig>
      break;
 8002eb6:	e003      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebc:	e000      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	00100070 	.word	0x00100070
 8002ee0:	00100060 	.word	0x00100060
 8002ee4:	00100050 	.word	0x00100050
 8002ee8:	00100040 	.word	0x00100040
 8002eec:	00100030 	.word	0x00100030
 8002ef0:	00100020 	.word	0x00100020

08002ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d107      	bne.n	8002f94 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f92:	e02a      	b.n	8002fea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d107      	bne.n	8002fae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fac:	e01d      	b.n	8002fea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d107      	bne.n	8002fc8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fc6:	e010      	b.n	8002fea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d107      	bne.n	8002fe2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fe0:	e003      	b.n	8002fea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff ffb4 	bl	8002f58 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	771a      	strb	r2, [r3, #28]
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	429a      	cmp	r2, r3
 8003014:	d10b      	bne.n	800302e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d136      	bne.n	8003092 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800302c:	e031      	b.n	8003092 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d10b      	bne.n	8003050 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2202      	movs	r2, #2
 800303c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d125      	bne.n	8003092 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800304e:	e020      	b.n	8003092 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	d10b      	bne.n	8003072 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2204      	movs	r2, #4
 800305e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d114      	bne.n	8003092 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003070:	e00f      	b.n	8003092 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	429a      	cmp	r2, r3
 800307a:	d10a      	bne.n	8003092 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2208      	movs	r2, #8
 8003080:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d103      	bne.n	8003092 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f7ff ff42 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	771a      	strb	r2, [r3, #28]
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d103      	bne.n	80030c6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	771a      	strb	r2, [r3, #28]
 80030c4:	e019      	b.n	80030fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d103      	bne.n	80030d8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2202      	movs	r2, #2
 80030d4:	771a      	strb	r2, [r3, #28]
 80030d6:	e010      	b.n	80030fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d103      	bne.n	80030ea <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2204      	movs	r2, #4
 80030e6:	771a      	strb	r2, [r3, #28]
 80030e8:	e007      	b.n	80030fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d102      	bne.n	80030fa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2208      	movs	r2, #8
 80030f8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f7ff ff18 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	771a      	strb	r2, [r3, #28]
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a4c      	ldr	r2, [pc, #304]	@ (8003254 <TIM_Base_SetConfig+0x144>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d017      	beq.n	8003158 <TIM_Base_SetConfig+0x48>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312e:	d013      	beq.n	8003158 <TIM_Base_SetConfig+0x48>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a49      	ldr	r2, [pc, #292]	@ (8003258 <TIM_Base_SetConfig+0x148>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00f      	beq.n	8003158 <TIM_Base_SetConfig+0x48>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a48      	ldr	r2, [pc, #288]	@ (800325c <TIM_Base_SetConfig+0x14c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00b      	beq.n	8003158 <TIM_Base_SetConfig+0x48>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a47      	ldr	r2, [pc, #284]	@ (8003260 <TIM_Base_SetConfig+0x150>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d007      	beq.n	8003158 <TIM_Base_SetConfig+0x48>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a46      	ldr	r2, [pc, #280]	@ (8003264 <TIM_Base_SetConfig+0x154>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_Base_SetConfig+0x48>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a45      	ldr	r2, [pc, #276]	@ (8003268 <TIM_Base_SetConfig+0x158>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d108      	bne.n	800316a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800315e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a39      	ldr	r2, [pc, #228]	@ (8003254 <TIM_Base_SetConfig+0x144>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d023      	beq.n	80031ba <TIM_Base_SetConfig+0xaa>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003178:	d01f      	beq.n	80031ba <TIM_Base_SetConfig+0xaa>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a36      	ldr	r2, [pc, #216]	@ (8003258 <TIM_Base_SetConfig+0x148>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d01b      	beq.n	80031ba <TIM_Base_SetConfig+0xaa>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a35      	ldr	r2, [pc, #212]	@ (800325c <TIM_Base_SetConfig+0x14c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d017      	beq.n	80031ba <TIM_Base_SetConfig+0xaa>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a34      	ldr	r2, [pc, #208]	@ (8003260 <TIM_Base_SetConfig+0x150>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <TIM_Base_SetConfig+0xaa>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a33      	ldr	r2, [pc, #204]	@ (8003264 <TIM_Base_SetConfig+0x154>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00f      	beq.n	80031ba <TIM_Base_SetConfig+0xaa>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a33      	ldr	r2, [pc, #204]	@ (800326c <TIM_Base_SetConfig+0x15c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00b      	beq.n	80031ba <TIM_Base_SetConfig+0xaa>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a32      	ldr	r2, [pc, #200]	@ (8003270 <TIM_Base_SetConfig+0x160>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <TIM_Base_SetConfig+0xaa>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a31      	ldr	r2, [pc, #196]	@ (8003274 <TIM_Base_SetConfig+0x164>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <TIM_Base_SetConfig+0xaa>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003268 <TIM_Base_SetConfig+0x158>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d108      	bne.n	80031cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a18      	ldr	r2, [pc, #96]	@ (8003254 <TIM_Base_SetConfig+0x144>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d013      	beq.n	8003220 <TIM_Base_SetConfig+0x110>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003264 <TIM_Base_SetConfig+0x154>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00f      	beq.n	8003220 <TIM_Base_SetConfig+0x110>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a1a      	ldr	r2, [pc, #104]	@ (800326c <TIM_Base_SetConfig+0x15c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00b      	beq.n	8003220 <TIM_Base_SetConfig+0x110>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a19      	ldr	r2, [pc, #100]	@ (8003270 <TIM_Base_SetConfig+0x160>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <TIM_Base_SetConfig+0x110>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <TIM_Base_SetConfig+0x164>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_Base_SetConfig+0x110>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a13      	ldr	r2, [pc, #76]	@ (8003268 <TIM_Base_SetConfig+0x158>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d103      	bne.n	8003228 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b01      	cmp	r3, #1
 8003238:	d105      	bne.n	8003246 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f023 0201 	bic.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	611a      	str	r2, [r3, #16]
  }
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800
 8003260:	40000c00 	.word	0x40000c00
 8003264:	40013400 	.word	0x40013400
 8003268:	40015000 	.word	0x40015000
 800326c:	40014000 	.word	0x40014000
 8003270:	40014400 	.word	0x40014400
 8003274:	40014800 	.word	0x40014800

08003278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f023 0201 	bic.w	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0303 	bic.w	r3, r3, #3
 80032b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f023 0302 	bic.w	r3, r3, #2
 80032c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a30      	ldr	r2, [pc, #192]	@ (8003394 <TIM_OC1_SetConfig+0x11c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <TIM_OC1_SetConfig+0x88>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a2f      	ldr	r2, [pc, #188]	@ (8003398 <TIM_OC1_SetConfig+0x120>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00f      	beq.n	8003300 <TIM_OC1_SetConfig+0x88>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a2e      	ldr	r2, [pc, #184]	@ (800339c <TIM_OC1_SetConfig+0x124>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00b      	beq.n	8003300 <TIM_OC1_SetConfig+0x88>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a2d      	ldr	r2, [pc, #180]	@ (80033a0 <TIM_OC1_SetConfig+0x128>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <TIM_OC1_SetConfig+0x88>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a2c      	ldr	r2, [pc, #176]	@ (80033a4 <TIM_OC1_SetConfig+0x12c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_OC1_SetConfig+0x88>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a2b      	ldr	r2, [pc, #172]	@ (80033a8 <TIM_OC1_SetConfig+0x130>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d10c      	bne.n	800331a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0308 	bic.w	r3, r3, #8
 8003306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f023 0304 	bic.w	r3, r3, #4
 8003318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a1d      	ldr	r2, [pc, #116]	@ (8003394 <TIM_OC1_SetConfig+0x11c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <TIM_OC1_SetConfig+0xd2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a1c      	ldr	r2, [pc, #112]	@ (8003398 <TIM_OC1_SetConfig+0x120>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00f      	beq.n	800334a <TIM_OC1_SetConfig+0xd2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1b      	ldr	r2, [pc, #108]	@ (800339c <TIM_OC1_SetConfig+0x124>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00b      	beq.n	800334a <TIM_OC1_SetConfig+0xd2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1a      	ldr	r2, [pc, #104]	@ (80033a0 <TIM_OC1_SetConfig+0x128>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <TIM_OC1_SetConfig+0xd2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a19      	ldr	r2, [pc, #100]	@ (80033a4 <TIM_OC1_SetConfig+0x12c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_OC1_SetConfig+0xd2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a18      	ldr	r2, [pc, #96]	@ (80033a8 <TIM_OC1_SetConfig+0x130>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d111      	bne.n	800336e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	621a      	str	r2, [r3, #32]
}
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40013400 	.word	0x40013400
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800
 80033a8:	40015000 	.word	0x40015000

080033ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f023 0210 	bic.w	r2, r3, #16
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0320 	bic.w	r3, r3, #32
 80033fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a2c      	ldr	r2, [pc, #176]	@ (80034bc <TIM_OC2_SetConfig+0x110>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d007      	beq.n	8003420 <TIM_OC2_SetConfig+0x74>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a2b      	ldr	r2, [pc, #172]	@ (80034c0 <TIM_OC2_SetConfig+0x114>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_OC2_SetConfig+0x74>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a2a      	ldr	r2, [pc, #168]	@ (80034c4 <TIM_OC2_SetConfig+0x118>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d10d      	bne.n	800343c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800343a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a1f      	ldr	r2, [pc, #124]	@ (80034bc <TIM_OC2_SetConfig+0x110>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <TIM_OC2_SetConfig+0xc0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a1e      	ldr	r2, [pc, #120]	@ (80034c0 <TIM_OC2_SetConfig+0x114>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00f      	beq.n	800346c <TIM_OC2_SetConfig+0xc0>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a1e      	ldr	r2, [pc, #120]	@ (80034c8 <TIM_OC2_SetConfig+0x11c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00b      	beq.n	800346c <TIM_OC2_SetConfig+0xc0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a1d      	ldr	r2, [pc, #116]	@ (80034cc <TIM_OC2_SetConfig+0x120>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d007      	beq.n	800346c <TIM_OC2_SetConfig+0xc0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a1c      	ldr	r2, [pc, #112]	@ (80034d0 <TIM_OC2_SetConfig+0x124>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_OC2_SetConfig+0xc0>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a17      	ldr	r2, [pc, #92]	@ (80034c4 <TIM_OC2_SetConfig+0x118>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d113      	bne.n	8003494 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800347a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40013400 	.word	0x40013400
 80034c4:	40015000 	.word	0x40015000
 80034c8:	40014000 	.word	0x40014000
 80034cc:	40014400 	.word	0x40014400
 80034d0:	40014800 	.word	0x40014800

080034d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0303 	bic.w	r3, r3, #3
 800350e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2b      	ldr	r2, [pc, #172]	@ (80035e0 <TIM_OC3_SetConfig+0x10c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <TIM_OC3_SetConfig+0x72>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2a      	ldr	r2, [pc, #168]	@ (80035e4 <TIM_OC3_SetConfig+0x110>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <TIM_OC3_SetConfig+0x72>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a29      	ldr	r2, [pc, #164]	@ (80035e8 <TIM_OC3_SetConfig+0x114>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d10d      	bne.n	8003562 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800354c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1e      	ldr	r2, [pc, #120]	@ (80035e0 <TIM_OC3_SetConfig+0x10c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <TIM_OC3_SetConfig+0xbe>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1d      	ldr	r2, [pc, #116]	@ (80035e4 <TIM_OC3_SetConfig+0x110>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00f      	beq.n	8003592 <TIM_OC3_SetConfig+0xbe>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1d      	ldr	r2, [pc, #116]	@ (80035ec <TIM_OC3_SetConfig+0x118>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00b      	beq.n	8003592 <TIM_OC3_SetConfig+0xbe>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1c      	ldr	r2, [pc, #112]	@ (80035f0 <TIM_OC3_SetConfig+0x11c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <TIM_OC3_SetConfig+0xbe>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1b      	ldr	r2, [pc, #108]	@ (80035f4 <TIM_OC3_SetConfig+0x120>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d003      	beq.n	8003592 <TIM_OC3_SetConfig+0xbe>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a16      	ldr	r2, [pc, #88]	@ (80035e8 <TIM_OC3_SetConfig+0x114>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d113      	bne.n	80035ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	621a      	str	r2, [r3, #32]
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	40013400 	.word	0x40013400
 80035e8:	40015000 	.word	0x40015000
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800

080035f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800362a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	031b      	lsls	r3, r3, #12
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a2c      	ldr	r2, [pc, #176]	@ (8003708 <TIM_OC4_SetConfig+0x110>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <TIM_OC4_SetConfig+0x74>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a2b      	ldr	r2, [pc, #172]	@ (800370c <TIM_OC4_SetConfig+0x114>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_OC4_SetConfig+0x74>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a2a      	ldr	r2, [pc, #168]	@ (8003710 <TIM_OC4_SetConfig+0x118>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10d      	bne.n	8003688 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	031b      	lsls	r3, r3, #12
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a1f      	ldr	r2, [pc, #124]	@ (8003708 <TIM_OC4_SetConfig+0x110>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d013      	beq.n	80036b8 <TIM_OC4_SetConfig+0xc0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a1e      	ldr	r2, [pc, #120]	@ (800370c <TIM_OC4_SetConfig+0x114>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00f      	beq.n	80036b8 <TIM_OC4_SetConfig+0xc0>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1e      	ldr	r2, [pc, #120]	@ (8003714 <TIM_OC4_SetConfig+0x11c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00b      	beq.n	80036b8 <TIM_OC4_SetConfig+0xc0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003718 <TIM_OC4_SetConfig+0x120>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d007      	beq.n	80036b8 <TIM_OC4_SetConfig+0xc0>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a1c      	ldr	r2, [pc, #112]	@ (800371c <TIM_OC4_SetConfig+0x124>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d003      	beq.n	80036b8 <TIM_OC4_SetConfig+0xc0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a17      	ldr	r2, [pc, #92]	@ (8003710 <TIM_OC4_SetConfig+0x118>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d113      	bne.n	80036e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80036c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	019b      	lsls	r3, r3, #6
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	019b      	lsls	r3, r3, #6
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	621a      	str	r2, [r3, #32]
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40012c00 	.word	0x40012c00
 800370c:	40013400 	.word	0x40013400
 8003710:	40015000 	.word	0x40015000
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800

08003720 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800374e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003764:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	041b      	lsls	r3, r3, #16
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a19      	ldr	r2, [pc, #100]	@ (80037dc <TIM_OC5_SetConfig+0xbc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <TIM_OC5_SetConfig+0x82>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a18      	ldr	r2, [pc, #96]	@ (80037e0 <TIM_OC5_SetConfig+0xc0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00f      	beq.n	80037a2 <TIM_OC5_SetConfig+0x82>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a17      	ldr	r2, [pc, #92]	@ (80037e4 <TIM_OC5_SetConfig+0xc4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00b      	beq.n	80037a2 <TIM_OC5_SetConfig+0x82>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a16      	ldr	r2, [pc, #88]	@ (80037e8 <TIM_OC5_SetConfig+0xc8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <TIM_OC5_SetConfig+0x82>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a15      	ldr	r2, [pc, #84]	@ (80037ec <TIM_OC5_SetConfig+0xcc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d003      	beq.n	80037a2 <TIM_OC5_SetConfig+0x82>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a14      	ldr	r2, [pc, #80]	@ (80037f0 <TIM_OC5_SetConfig+0xd0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d109      	bne.n	80037b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	621a      	str	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40013400 	.word	0x40013400
 80037e4:	40014000 	.word	0x40014000
 80037e8:	40014400 	.word	0x40014400
 80037ec:	40014800 	.word	0x40014800
 80037f0:	40015000 	.word	0x40015000

080037f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800383a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	051b      	lsls	r3, r3, #20
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a1a      	ldr	r2, [pc, #104]	@ (80038b4 <TIM_OC6_SetConfig+0xc0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d013      	beq.n	8003878 <TIM_OC6_SetConfig+0x84>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a19      	ldr	r2, [pc, #100]	@ (80038b8 <TIM_OC6_SetConfig+0xc4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00f      	beq.n	8003878 <TIM_OC6_SetConfig+0x84>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a18      	ldr	r2, [pc, #96]	@ (80038bc <TIM_OC6_SetConfig+0xc8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00b      	beq.n	8003878 <TIM_OC6_SetConfig+0x84>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a17      	ldr	r2, [pc, #92]	@ (80038c0 <TIM_OC6_SetConfig+0xcc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d007      	beq.n	8003878 <TIM_OC6_SetConfig+0x84>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a16      	ldr	r2, [pc, #88]	@ (80038c4 <TIM_OC6_SetConfig+0xd0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_OC6_SetConfig+0x84>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a15      	ldr	r2, [pc, #84]	@ (80038c8 <TIM_OC6_SetConfig+0xd4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d109      	bne.n	800388c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800387e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	029b      	lsls	r3, r3, #10
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40012c00 	.word	0x40012c00
 80038b8:	40013400 	.word	0x40013400
 80038bc:	40014000 	.word	0x40014000
 80038c0:	40014400 	.word	0x40014400
 80038c4:	40014800 	.word	0x40014800
 80038c8:	40015000 	.word	0x40015000

080038cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f023 0201 	bic.w	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f023 030a 	bic.w	r3, r3, #10
 8003908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800392a:	b480      	push	{r7}
 800392c:	b087      	sub	sp, #28
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f023 0210 	bic.w	r2, r3, #16
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	031b      	lsls	r3, r3, #12
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003966:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	621a      	str	r2, [r3, #32]
}
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80039a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f043 0307 	orr.w	r3, r3, #7
 80039b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	609a      	str	r2, [r3, #8]
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	021a      	lsls	r2, r3, #8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	609a      	str	r2, [r3, #8]
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2201      	movs	r2, #1
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a1a      	ldr	r2, [r3, #32]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	401a      	ands	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a1a      	ldr	r2, [r3, #32]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	621a      	str	r2, [r3, #32]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e074      	b.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a34      	ldr	r2, [pc, #208]	@ (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a33      	ldr	r2, [pc, #204]	@ (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a31      	ldr	r2, [pc, #196]	@ (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d108      	bne.n	8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003aac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a21      	ldr	r2, [pc, #132]	@ (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d022      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae8:	d01d      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1f      	ldr	r2, [pc, #124]	@ (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d018      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a1c      	ldr	r2, [pc, #112]	@ (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a15      	ldr	r2, [pc, #84]	@ (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a18      	ldr	r2, [pc, #96]	@ (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a11      	ldr	r2, [pc, #68]	@ (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10c      	bne.n	8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40013400 	.word	0x40013400
 8003b68:	40015000 	.word	0x40015000
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800
 8003b74:	40000c00 	.word	0x40000c00
 8003b78:	40014000 	.word	0x40014000

08003b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <memset>:
 8003c08:	4402      	add	r2, r0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d100      	bne.n	8003c12 <memset+0xa>
 8003c10:	4770      	bx	lr
 8003c12:	f803 1b01 	strb.w	r1, [r3], #1
 8003c16:	e7f9      	b.n	8003c0c <memset+0x4>

08003c18 <__libc_init_array>:
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8003c50 <__libc_init_array+0x38>)
 8003c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8003c54 <__libc_init_array+0x3c>)
 8003c1e:	1b64      	subs	r4, r4, r5
 8003c20:	10a4      	asrs	r4, r4, #2
 8003c22:	2600      	movs	r6, #0
 8003c24:	42a6      	cmp	r6, r4
 8003c26:	d109      	bne.n	8003c3c <__libc_init_array+0x24>
 8003c28:	4d0b      	ldr	r5, [pc, #44]	@ (8003c58 <__libc_init_array+0x40>)
 8003c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8003c5c <__libc_init_array+0x44>)
 8003c2c:	f000 f818 	bl	8003c60 <_init>
 8003c30:	1b64      	subs	r4, r4, r5
 8003c32:	10a4      	asrs	r4, r4, #2
 8003c34:	2600      	movs	r6, #0
 8003c36:	42a6      	cmp	r6, r4
 8003c38:	d105      	bne.n	8003c46 <__libc_init_array+0x2e>
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c40:	4798      	blx	r3
 8003c42:	3601      	adds	r6, #1
 8003c44:	e7ee      	b.n	8003c24 <__libc_init_array+0xc>
 8003c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4a:	4798      	blx	r3
 8003c4c:	3601      	adds	r6, #1
 8003c4e:	e7f2      	b.n	8003c36 <__libc_init_array+0x1e>
 8003c50:	08003c88 	.word	0x08003c88
 8003c54:	08003c88 	.word	0x08003c88
 8003c58:	08003c88 	.word	0x08003c88
 8003c5c:	08003c8c 	.word	0x08003c8c

08003c60 <_init>:
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	bf00      	nop
 8003c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c66:	bc08      	pop	{r3}
 8003c68:	469e      	mov	lr, r3
 8003c6a:	4770      	bx	lr

08003c6c <_fini>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	bf00      	nop
 8003c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c72:	bc08      	pop	{r3}
 8003c74:	469e      	mov	lr, r3
 8003c76:	4770      	bx	lr
