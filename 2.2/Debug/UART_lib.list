
UART_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005788  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08005968  08005968  00006968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005adc  08005adc  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005adc  08005adc  00006adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae4  08005ae4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae4  08005ae4  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ae8  08005ae8  00006ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005aec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000068  08005b54  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08005b54  000072fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e310  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220a  00000000  00000000  000153a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  000175b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000875  00000000  00000000  000180d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cae  00000000  00000000  00018945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e29b  00000000  00000000  0003e5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb4fd  00000000  00000000  0004c88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e0  00000000  00000000  00137dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0013b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005950 	.word	0x08005950

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005950 	.word	0x08005950

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    UART_RxCpltCallback(huart);  // Wywołanie funkcji z biblioteki
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 fbb3 	bl	8000d54 <UART_RxCpltCallback>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <led_on.1>:

  /* USER CODE BEGIN 1 */

	// Przykładowe komendy

	  void led_on(int argc, char *argv[]){
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b084      	sub	sp, #16
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	f8c7 c004 	str.w	ip, [r7, #4]
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2120      	movs	r1, #32
 8000608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060c:	f001 f812 	bl	8001634 <HAL_GPIO_WritePin>
	//	  HAL_UART_Transmit(&huart2, (uint8_t *)"led_on command executed\r\n", 22, HAL_MAX_DELAY);
	  }
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <main>:
{
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	b08b      	sub	sp, #44	@ 0x2c
 800061c:	af00      	add	r7, sp, #0
int main(void)
 800061e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000622:	627b      	str	r3, [r7, #36]	@ 0x24
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	f103 0410 	add.w	r4, r3, #16
 800062a:	1d3d      	adds	r5, r7, #4
 800062c:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <main+0x78>)
 800062e:	4626      	mov	r6, r4
 8000630:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000632:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000636:	60a5      	str	r5, [r4, #8]
 8000638:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <main+0x7c>)
 800063a:	60e3      	str	r3, [r4, #12]
 800063c:	1d3c      	adds	r4, r7, #4
 800063e:	1d3d      	adds	r5, r7, #4
 8000640:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <main+0x78>)
 8000642:	4626      	mov	r6, r4
 8000644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000646:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800064a:	60a5      	str	r5, [r4, #8]
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <main+0x80>)
 800064e:	60e3      	str	r3, [r4, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fc2d 	bl	8000eae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f83d 	bl	80006d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f8c8 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065c:	f000 f87a 	bl	8000754 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_Interface_Init(&huart2);
 8000660:	480e      	ldr	r0, [pc, #56]	@ (800069c <main+0x84>)
 8000662:	f000 fa8f 	bl	8000b84 <UART_Interface_Init>
  UART_Register_Command("help", help_command);
 8000666:	490e      	ldr	r1, [pc, #56]	@ (80006a0 <main+0x88>)
 8000668:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <main+0x8c>)
 800066a:	f000 faa1 	bl	8000bb0 <UART_Register_Command>
  UART_Register_Command("on", led_on);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	3310      	adds	r3, #16
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	4619      	mov	r1, r3
 8000678:	480b      	ldr	r0, [pc, #44]	@ (80006a8 <main+0x90>)
 800067a:	f000 fa99 	bl	8000bb0 <UART_Register_Command>
  UART_Register_Command("off", led_off);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	4619      	mov	r1, r3
 8000686:	4809      	ldr	r0, [pc, #36]	@ (80006ac <main+0x94>)
 8000688:	f000 fa92 	bl	8000bb0 <UART_Register_Command>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0x74>
 8000690:	08005968 	.word	0x08005968
 8000694:	080005f7 	.word	0x080005f7
 8000698:	080006b1 	.word	0x080006b1
 800069c:	20000084 	.word	0x20000084
 80006a0:	08000de9 	.word	0x08000de9
 80006a4:	08005978 	.word	0x08005978
 80006a8:	08005980 	.word	0x08005980
 80006ac:	08005984 	.word	0x08005984

080006b0 <led_off.0>:
	  void led_off(int argc, char *argv[]){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	f8c7 c004 	str.w	ip, [r7, #4]
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2120      	movs	r1, #32
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c6:	f000 ffb5 	bl	8001634 <HAL_GPIO_WritePin>
	  }
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b094      	sub	sp, #80	@ 0x50
 80006d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d8:	f107 0318 	add.w	r3, r7, #24
 80006dc:	2238      	movs	r2, #56	@ 0x38
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f004 fa3e 	bl	8004b62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006f8:	f000 ffb4 	bl	8001664 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	2340      	movs	r3, #64	@ 0x40
 8000708:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070a:	2300      	movs	r3, #0
 800070c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f85a 	bl	80017cc <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800071e:	f000 f895 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000726:	2301      	movs	r3, #1
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fb58 	bl	8001df0 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000746:	f000 f881 	bl	800084c <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3750      	adds	r7, #80	@ 0x50
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 800075a:	4a23      	ldr	r2, [pc, #140]	@ (80007e8 <MX_USART2_UART_Init+0x94>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079c:	4811      	ldr	r0, [pc, #68]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 800079e:	f001 ff91 	bl	80026c4 <HAL_UART_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007a8:	f000 f850 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ac:	2100      	movs	r1, #0
 80007ae:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 80007b0:	f004 f807 	bl	80047c2 <HAL_UARTEx_SetTxFifoThreshold>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007ba:	f000 f847 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007be:	2100      	movs	r1, #0
 80007c0:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 80007c2:	f004 f83c 	bl	800483e <HAL_UARTEx_SetRxFifoThreshold>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007cc:	f000 f83e 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <MX_USART2_UART_Init+0x90>)
 80007d2:	f003 ffbd 	bl	8004750 <HAL_UARTEx_DisableFifoMode>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007dc:	f000 f836 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000084 	.word	0x20000084
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_GPIO_Init+0x5c>)
 8000802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000804:	4a10      	ldr	r2, [pc, #64]	@ (8000848 <MX_GPIO_Init+0x5c>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080c:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_GPIO_Init+0x5c>)
 800080e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2120      	movs	r1, #32
 800081c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000820:	f000 ff08 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000824:	2320      	movs	r3, #32
 8000826:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083c:	f000 fd78 	bl	8001330 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000840:	bf00      	nop
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <HAL_MspInit+0x44>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000862:	4a0e      	ldr	r2, [pc, #56]	@ (800089c <HAL_MspInit+0x44>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6613      	str	r3, [r2, #96]	@ 0x60
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_MspInit+0x44>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <HAL_MspInit+0x44>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6593      	str	r3, [r2, #88]	@ 0x58
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800088e:	f000 ff8d 	bl	80017ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b09e      	sub	sp, #120	@ 0x78
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	2254      	movs	r2, #84	@ 0x54
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 f94e 	bl	8004b62 <memset>
  if(huart->Instance==USART2)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a23      	ldr	r2, [pc, #140]	@ (8000958 <HAL_UART_MspInit+0xb8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d13e      	bne.n	800094e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fca3 	bl	8002228 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e8:	f7ff ffb0 	bl	800084c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ec:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <HAL_UART_MspInit+0xbc>)
 80008ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f0:	4a1a      	ldr	r2, [pc, #104]	@ (800095c <HAL_UART_MspInit+0xbc>)
 80008f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f8:	4b18      	ldr	r3, [pc, #96]	@ (800095c <HAL_UART_MspInit+0xbc>)
 80008fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <HAL_UART_MspInit+0xbc>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000908:	4a14      	ldr	r2, [pc, #80]	@ (800095c <HAL_UART_MspInit+0xbc>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <HAL_UART_MspInit+0xbc>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091c:	230c      	movs	r3, #12
 800091e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092c:	2307      	movs	r3, #7
 800092e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000934:	4619      	mov	r1, r3
 8000936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093a:	f000 fcf9 	bl	8001330 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2026      	movs	r0, #38	@ 0x26
 8000944:	f000 fbff 	bl	8001146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000948:	2026      	movs	r0, #38	@ 0x26
 800094a:	f000 fc16 	bl	800117a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800094e:	bf00      	nop
 8000950:	3778      	adds	r7, #120	@ 0x78
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40004400 	.word	0x40004400
 800095c:	40021000 	.word	0x40021000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <MemManage_Handler+0x4>

08000978 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <UsageFault_Handler+0x4>

08000988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b6:	f000 facd 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <USART2_IRQHandler+0x10>)
 80009c6:	f001 ffa7 	bl	8002918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000084 	.word	0x20000084

080009d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return 1;
 80009d8:	2301      	movs	r3, #1
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <_kill>:

int _kill(int pid, int sig)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009ee:	f004 f963 	bl	8004cb8 <__errno>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2216      	movs	r2, #22
 80009f6:	601a      	str	r2, [r3, #0]
  return -1;
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_exit>:

void _exit (int status)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ffe7 	bl	80009e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a16:	bf00      	nop
 8000a18:	e7fd      	b.n	8000a16 <_exit+0x12>

08000a1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	60f8      	str	r0, [r7, #12]
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	e00a      	b.n	8000a42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a2c:	f3af 8000 	nop.w
 8000a30:	4601      	mov	r1, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	60ba      	str	r2, [r7, #8]
 8000a38:	b2ca      	uxtb	r2, r1
 8000a3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	dbf0      	blt.n	8000a2c <_read+0x12>
  }

  return len;
 8000a4a:	687b      	ldr	r3, [r7, #4]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e009      	b.n	8000a7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	60ba      	str	r2, [r7, #8]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	3301      	adds	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	dbf1      	blt.n	8000a66 <_write+0x12>
  }
  return len;
 8000a82:	687b      	ldr	r3, [r7, #4]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_close>:

int _close(int file)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ab4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_isatty>:

int _isatty(int file)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000acc:	2301      	movs	r3, #1
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b085      	sub	sp, #20
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	@ (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f004 f8c8 	bl	8004cb8 <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	@ (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20020000 	.word	0x20020000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	20000118 	.word	0x20000118
 8000b5c:	20000300 	.word	0x20000300

08000b60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <SystemInit+0x20>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <SystemInit+0x20>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <UART_Interface_Init>:

static Command commands[MAX_COMMANDS];  // Tablica komend
static int command_count = 0;  // Liczba zarejestrowanych komend

// Funkcja inicjalizująca UART i bibliotekę
void UART_Interface_Init(UART_HandleTypeDef *huart) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    huart_global = huart;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <UART_Interface_Init+0x24>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(huart_global, &received_data, 1);  // Rozpoczęcie odbioru przez przerwania
 8000b92:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <UART_Interface_Init+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2201      	movs	r2, #1
 8000b98:	4904      	ldr	r1, [pc, #16]	@ (8000bac <UART_Interface_Init+0x28>)
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 fe70 	bl	8002880 <HAL_UART_Receive_IT>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000011c 	.word	0x2000011c
 8000bac:	20000120 	.word	0x20000120

08000bb0 <UART_Register_Command>:

// Funkcja do rejestrowania nowych komend
void UART_Register_Command(const char *name, void (*callback)(int argc, char *argv[])) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
    if (command_count < MAX_COMMANDS) {
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <UART_Register_Command+0x44>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b09      	cmp	r3, #9
 8000bc0:	dc11      	bgt.n	8000be6 <UART_Register_Command+0x36>
        commands[command_count].name = name;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <UART_Register_Command+0x44>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	490c      	ldr	r1, [pc, #48]	@ (8000bf8 <UART_Register_Command+0x48>)
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        commands[command_count].callback = callback;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <UART_Register_Command+0x44>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a09      	ldr	r2, [pc, #36]	@ (8000bf8 <UART_Register_Command+0x48>)
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	605a      	str	r2, [r3, #4]
        command_count++;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <UART_Register_Command+0x44>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <UART_Register_Command+0x44>)
 8000be4:	6013      	str	r3, [r2, #0]
    }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200001a8 	.word	0x200001a8
 8000bf8:	20000158 	.word	0x20000158

08000bfc <UART_Process_Input>:

// Funkcja przetwarzająca odbierane komendy
void UART_Process_Input() {
 8000bfc:	b5b0      	push	{r4, r5, r7, lr}
 8000bfe:	b094      	sub	sp, #80	@ 0x50
 8000c00:	af00      	add	r7, sp, #0
    char *cmd = strtok(rx_buffer, "=");  // Wyciągnięcie komendy
 8000c02:	494b      	ldr	r1, [pc, #300]	@ (8000d30 <UART_Process_Input+0x134>)
 8000c04:	484b      	ldr	r0, [pc, #300]	@ (8000d34 <UART_Process_Input+0x138>)
 8000c06:	f003 ffb5 	bl	8004b74 <strtok>
 8000c0a:	6478      	str	r0, [r7, #68]	@ 0x44
    char *args = strtok(NULL, "=");  // Wyciągnięcie argumentów
 8000c0c:	4948      	ldr	r1, [pc, #288]	@ (8000d30 <UART_Process_Input+0x134>)
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f003 ffb0 	bl	8004b74 <strtok>
 8000c14:	6438      	str	r0, [r7, #64]	@ 0x40

    char msg[] = "Odebrano komende:";
 8000c16:	4b48      	ldr	r3, [pc, #288]	@ (8000d38 <UART_Process_Input+0x13c>)
 8000c18:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000c1c:	461d      	mov	r5, r3
 8000c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c22:	682b      	ldr	r3, [r5, #0]
 8000c24:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(huart_global, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000c26:	4b45      	ldr	r3, [pc, #276]	@ (8000d3c <UART_Process_Input+0x140>)
 8000c28:	681c      	ldr	r4, [r3, #0]
 8000c2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fb00 	bl	8000234 <strlen>
 8000c34:	4603      	mov	r3, r0
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	4620      	mov	r0, r4
 8000c42:	f001 fd8f 	bl	8002764 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart_global, (uint8_t *)cmd, strlen(cmd), HAL_MAX_DELAY);
 8000c46:	4b3d      	ldr	r3, [pc, #244]	@ (8000d3c <UART_Process_Input+0x140>)
 8000c48:	681c      	ldr	r4, [r3, #0]
 8000c4a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000c4c:	f7ff faf2 	bl	8000234 <strlen>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f001 fd82 	bl	8002764 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart_global, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000c60:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <UART_Process_Input+0x140>)
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4935      	ldr	r1, [pc, #212]	@ (8000d40 <UART_Process_Input+0x144>)
 8000c6c:	f001 fd7a 	bl	8002764 <HAL_UART_Transmit>

    // Przetworzenie argumentów
    char *argv[MAX_ARGS];
    int argc = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (args) {
 8000c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d026      	beq.n	8000cc8 <UART_Process_Input+0xcc>
        argv[argc++] = strtok(args, ";");
 8000c7a:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8000c7c:	1c63      	adds	r3, r4, #1
 8000c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000c80:	4930      	ldr	r1, [pc, #192]	@ (8000d44 <UART_Process_Input+0x148>)
 8000c82:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000c84:	f003 ff76 	bl	8004b74 <strtok>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	00a3      	lsls	r3, r4, #2
 8000c8c:	3350      	adds	r3, #80	@ 0x50
 8000c8e:	443b      	add	r3, r7
 8000c90:	f843 2c38 	str.w	r2, [r3, #-56]
        while ((argv[argc] = strtok(NULL, ";")) != NULL && argc < MAX_ARGS) {
 8000c94:	e002      	b.n	8000c9c <UART_Process_Input+0xa0>
            argc++;
 8000c96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c98:	3301      	adds	r3, #1
 8000c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while ((argv[argc] = strtok(NULL, ";")) != NULL && argc < MAX_ARGS) {
 8000c9c:	4929      	ldr	r1, [pc, #164]	@ (8000d44 <UART_Process_Input+0x148>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f003 ff68 	bl	8004b74 <strtok>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	3350      	adds	r3, #80	@ 0x50
 8000cac:	443b      	add	r3, r7
 8000cae:	f843 2c38 	str.w	r2, [r3, #-56]
 8000cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	3350      	adds	r3, #80	@ 0x50
 8000cb8:	443b      	add	r3, r7
 8000cba:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <UART_Process_Input+0xcc>
 8000cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	dde6      	ble.n	8000c96 <UART_Process_Input+0x9a>
        }
    }

    // Szukanie komendy w tablicy
    for (int i = 0; i < command_count; i++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000ccc:	e018      	b.n	8000d00 <UART_Process_Input+0x104>
        if (strcmp(cmd, commands[i].name) == 0) {
 8000cce:	4a1e      	ldr	r2, [pc, #120]	@ (8000d48 <UART_Process_Input+0x14c>)
 8000cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cd2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000cda:	f7ff faa1 	bl	8000220 <strcmp>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d10a      	bne.n	8000cfa <UART_Process_Input+0xfe>
            commands[i].callback(argc, argv);  // Wywołanie callbacku
 8000ce4:	4a18      	ldr	r2, [pc, #96]	@ (8000d48 <UART_Process_Input+0x14c>)
 8000ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	4413      	add	r3, r2
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f107 0218 	add.w	r2, r7, #24
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000cf6:	4798      	blx	r3
 8000cf8:	e016      	b.n	8000d28 <UART_Process_Input+0x12c>
    for (int i = 0; i < command_count; i++) {
 8000cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <UART_Process_Input+0x150>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dbe1      	blt.n	8000cce <UART_Process_Input+0xd2>
            return;
        }
    }

    // Jeśli nie znaleziono komendy
    char error_msg[] = "Unknown command\r\n";
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <UART_Process_Input+0x154>)
 8000d0c:	1d3c      	adds	r4, r7, #4
 8000d0e:	461d      	mov	r5, r3
 8000d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d14:	682b      	ldr	r3, [r5, #0]
 8000d16:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(huart_global, (uint8_t *)error_msg, sizeof(error_msg) - 1, HAL_MAX_DELAY);
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <UART_Process_Input+0x140>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	1d39      	adds	r1, r7, #4
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	2211      	movs	r2, #17
 8000d24:	f001 fd1e 	bl	8002764 <HAL_UART_Transmit>
}
 8000d28:	3750      	adds	r7, #80	@ 0x50
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	08005988 	.word	0x08005988
 8000d34:	20000124 	.word	0x20000124
 8000d38:	08005994 	.word	0x08005994
 8000d3c:	2000011c 	.word	0x2000011c
 8000d40:	0800598c 	.word	0x0800598c
 8000d44:	08005990 	.word	0x08005990
 8000d48:	20000158 	.word	0x20000158
 8000d4c:	200001a8 	.word	0x200001a8
 8000d50:	080059a8 	.word	0x080059a8

08000d54 <UART_RxCpltCallback>:

// Obsługa przerwań UART (należy wywołać wewnątrz HAL_UART_RxCpltCallback)
void UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart_global->Instance) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <UART_RxCpltCallback+0x84>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d131      	bne.n	8000dce <UART_RxCpltCallback+0x7a>
        if (received_data != '\r' && received_data != '\n') {
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <UART_RxCpltCallback+0x88>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b0d      	cmp	r3, #13
 8000d70:	d013      	beq.n	8000d9a <UART_RxCpltCallback+0x46>
 8000d72:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <UART_RxCpltCallback+0x88>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	d00f      	beq.n	8000d9a <UART_RxCpltCallback+0x46>
            // Dodajemy znaki do bufora
            if (rx_index < MAX_COMMAND_LENGTH - 1) {
 8000d7a:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <UART_RxCpltCallback+0x8c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b30      	cmp	r3, #48	@ 0x30
 8000d80:	d81e      	bhi.n	8000dc0 <UART_RxCpltCallback+0x6c>
                rx_buffer[rx_index++] = received_data;
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <UART_RxCpltCallback+0x8c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	b2d1      	uxtb	r1, r2
 8000d8a:	4a15      	ldr	r2, [pc, #84]	@ (8000de0 <UART_RxCpltCallback+0x8c>)
 8000d8c:	7011      	strb	r1, [r2, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <UART_RxCpltCallback+0x88>)
 8000d92:	7819      	ldrb	r1, [r3, #0]
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <UART_RxCpltCallback+0x90>)
 8000d96:	5499      	strb	r1, [r3, r2]
            if (rx_index < MAX_COMMAND_LENGTH - 1) {
 8000d98:	e012      	b.n	8000dc0 <UART_RxCpltCallback+0x6c>
            }
        } else if (received_data == '\r' || received_data == '\n') {
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <UART_RxCpltCallback+0x88>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b0d      	cmp	r3, #13
 8000da0:	d003      	beq.n	8000daa <UART_RxCpltCallback+0x56>
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <UART_RxCpltCallback+0x88>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b0a      	cmp	r3, #10
 8000da8:	d10a      	bne.n	8000dc0 <UART_RxCpltCallback+0x6c>
            // Zakończono odbiór komendy
            rx_buffer[rx_index] = '\0';  // Zakończenie stringa
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <UART_RxCpltCallback+0x8c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <UART_RxCpltCallback+0x90>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	5499      	strb	r1, [r3, r2]
            UART_Process_Input();  // Przetworzenie komendy
 8000db6:	f7ff ff21 	bl	8000bfc <UART_Process_Input>
            rx_index = 0;  // Reset bufora
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <UART_RxCpltCallback+0x8c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
        }

        // Ponownie włącz odbiór danych
        HAL_UART_Receive_IT(huart_global, &received_data, 1);
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <UART_RxCpltCallback+0x84>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4905      	ldr	r1, [pc, #20]	@ (8000ddc <UART_RxCpltCallback+0x88>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 fd59 	bl	8002880 <HAL_UART_Receive_IT>
    }
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000011c 	.word	0x2000011c
 8000ddc:	20000120 	.word	0x20000120
 8000de0:	20000156 	.word	0x20000156
 8000de4:	20000124 	.word	0x20000124

08000de8 <help_command>:

// Komenda help - wypisuje wszystkie dostępne komendy
void help_command(int argc, char *argv[]) {
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < command_count; i++) {
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	e01f      	b.n	8000e38 <help_command+0x50>
        HAL_UART_Transmit(huart_global, (uint8_t *)commands[i].name, strlen(commands[i].name), HAL_MAX_DELAY);
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <help_command+0x64>)
 8000dfa:	681c      	ldr	r4, [r3, #0]
 8000dfc:	4a14      	ldr	r2, [pc, #80]	@ (8000e50 <help_command+0x68>)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8000e04:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <help_command+0x68>)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fa11 	bl	8000234 <strlen>
 8000e12:	4603      	mov	r3, r0
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f001 fca1 	bl	8002764 <HAL_UART_Transmit>
        HAL_UART_Transmit(huart_global, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <help_command+0x64>)
 8000e24:	6818      	ldr	r0, [r3, #0]
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	4909      	ldr	r1, [pc, #36]	@ (8000e54 <help_command+0x6c>)
 8000e2e:	f001 fc99 	bl	8002764 <HAL_UART_Transmit>
    for (int i = 0; i < command_count; i++) {
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <help_command+0x70>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	dbda      	blt.n	8000df8 <help_command+0x10>
    }
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4c:	2000011c 	.word	0x2000011c
 8000e50:	20000158 	.word	0x20000158
 8000e54:	0800598c 	.word	0x0800598c
 8000e58:	200001a8 	.word	0x200001a8

08000e5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e5c:	480d      	ldr	r0, [pc, #52]	@ (8000e94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e60:	f7ff fe7e 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e66:	490d      	ldr	r1, [pc, #52]	@ (8000e9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <LoopForever+0xe>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea8 <LoopForever+0x16>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f003 ff1b 	bl	8004cc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e8e:	f7ff fbc3 	bl	8000618 <main>

08000e92 <LoopForever>:

LoopForever:
    b LoopForever
 8000e92:	e7fe      	b.n	8000e92 <LoopForever>
  ldr   r0, =_estack
 8000e94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ea0:	08005aec 	.word	0x08005aec
  ldr r2, =_sbss
 8000ea4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ea8:	200002fc 	.word	0x200002fc

08000eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_2_IRQHandler>

08000eae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f939 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f000 f80e 	bl	8000ee0 <HAL_InitTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	e001      	b.n	8000ed4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed0:	f7ff fcc2 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <HAL_InitTick+0x68>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d022      	beq.n	8000f3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ef4:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <HAL_InitTick+0x6c>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <HAL_InitTick+0x68>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f944 	bl	8001196 <HAL_SYSTICK_Config>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10f      	bne.n	8000f34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	d809      	bhi.n	8000f2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	f000 f910 	bl	8001146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f26:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <HAL_InitTick+0x70>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	e007      	b.n	8000f3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e004      	b.n	8000f3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	e001      	b.n	8000f3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <HAL_IncTick+0x1c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <HAL_IncTick+0x20>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a03      	ldr	r2, [pc, #12]	@ (8000f70 <HAL_IncTick+0x1c>)
 8000f64:	6013      	str	r3, [r2, #0]
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	200001ac 	.word	0x200001ac
 8000f74:	20000008 	.word	0x20000008

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200001ac 	.word	0x200001ac

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	@ (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	@ (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	@ 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	@ 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	@ (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff29 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff40 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff90 	bl	8001084 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5f 	bl	8001030 <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff33 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa4 	bl	80010ec <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d005      	beq.n	80011d2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2204      	movs	r2, #4
 80011ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e037      	b.n	8001242 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 020e 	bic.w	r2, r2, #14
 80011e0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011f0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0201 	bic.w	r2, r2, #1
 8001200:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f003 021f 	and.w	r2, r3, #31
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f202 	lsl.w	r2, r1, r2
 8001214:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800121e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001232:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001236:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001240:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d00d      	beq.n	8001294 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2204      	movs	r2, #4
 800127c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e047      	b.n	8001324 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 020e 	bic.w	r2, r2, #14
 80012a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0201 	bic.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f202 	lsl.w	r2, r1, r2
 80012d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80012e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00c      	beq.n	8001304 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001302:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	4798      	blx	r3
    }
  }
  return status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800133e:	e15a      	b.n	80015f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 814c 	beq.w	80015f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d005      	beq.n	8001370 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800136c:	2b02      	cmp	r3, #2
 800136e:	d130      	bne.n	80013d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013a6:	2201      	movs	r2, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 0201 	and.w	r2, r3, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d017      	beq.n	800140e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d123      	bne.n	8001462 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	691a      	ldr	r2, [r3, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	6939      	ldr	r1, [r7, #16]
 800145e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0203 	and.w	r2, r3, #3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 80a6 	beq.w	80015f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001614 <HAL_GPIO_Init+0x2e4>)
 80014a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a8:	4a5a      	ldr	r2, [pc, #360]	@ (8001614 <HAL_GPIO_Init+0x2e4>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80014b0:	4b58      	ldr	r3, [pc, #352]	@ (8001614 <HAL_GPIO_Init+0x2e4>)
 80014b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014bc:	4a56      	ldr	r2, [pc, #344]	@ (8001618 <HAL_GPIO_Init+0x2e8>)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014e6:	d01f      	beq.n	8001528 <HAL_GPIO_Init+0x1f8>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a4c      	ldr	r2, [pc, #304]	@ (800161c <HAL_GPIO_Init+0x2ec>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d019      	beq.n	8001524 <HAL_GPIO_Init+0x1f4>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a4b      	ldr	r2, [pc, #300]	@ (8001620 <HAL_GPIO_Init+0x2f0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d013      	beq.n	8001520 <HAL_GPIO_Init+0x1f0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001624 <HAL_GPIO_Init+0x2f4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d00d      	beq.n	800151c <HAL_GPIO_Init+0x1ec>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a49      	ldr	r2, [pc, #292]	@ (8001628 <HAL_GPIO_Init+0x2f8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d007      	beq.n	8001518 <HAL_GPIO_Init+0x1e8>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a48      	ldr	r2, [pc, #288]	@ (800162c <HAL_GPIO_Init+0x2fc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_GPIO_Init+0x1e4>
 8001510:	2305      	movs	r3, #5
 8001512:	e00a      	b.n	800152a <HAL_GPIO_Init+0x1fa>
 8001514:	2306      	movs	r3, #6
 8001516:	e008      	b.n	800152a <HAL_GPIO_Init+0x1fa>
 8001518:	2304      	movs	r3, #4
 800151a:	e006      	b.n	800152a <HAL_GPIO_Init+0x1fa>
 800151c:	2303      	movs	r3, #3
 800151e:	e004      	b.n	800152a <HAL_GPIO_Init+0x1fa>
 8001520:	2302      	movs	r3, #2
 8001522:	e002      	b.n	800152a <HAL_GPIO_Init+0x1fa>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <HAL_GPIO_Init+0x1fa>
 8001528:	2300      	movs	r3, #0
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	f002 0203 	and.w	r2, r2, #3
 8001530:	0092      	lsls	r2, r2, #2
 8001532:	4093      	lsls	r3, r2
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800153a:	4937      	ldr	r1, [pc, #220]	@ (8001618 <HAL_GPIO_Init+0x2e8>)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001548:	4b39      	ldr	r3, [pc, #228]	@ (8001630 <HAL_GPIO_Init+0x300>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800156c:	4a30      	ldr	r2, [pc, #192]	@ (8001630 <HAL_GPIO_Init+0x300>)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001572:	4b2f      	ldr	r3, [pc, #188]	@ (8001630 <HAL_GPIO_Init+0x300>)
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001596:	4a26      	ldr	r2, [pc, #152]	@ (8001630 <HAL_GPIO_Init+0x300>)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800159c:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <HAL_GPIO_Init+0x300>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001630 <HAL_GPIO_Init+0x300>)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <HAL_GPIO_Init+0x300>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ea:	4a11      	ldr	r2, [pc, #68]	@ (8001630 <HAL_GPIO_Init+0x300>)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3301      	adds	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	f47f ae9d 	bne.w	8001340 <HAL_GPIO_Init+0x10>
  }
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	371c      	adds	r7, #28
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000
 800161c:	48000400 	.word	0x48000400
 8001620:	48000800 	.word	0x48000800
 8001624:	48000c00 	.word	0x48000c00
 8001628:	48001000 	.word	0x48001000
 800162c:	48001400 	.word	0x48001400
 8001630:	40010400 	.word	0x40010400

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001650:	e002      	b.n	8001658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d141      	bne.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001672:	4b4b      	ldr	r3, [pc, #300]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800167a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800167e:	d131      	bne.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001680:	4b47      	ldr	r3, [pc, #284]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001686:	4a46      	ldr	r2, [pc, #280]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800168c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001690:	4b43      	ldr	r3, [pc, #268]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001698:	4a41      	ldr	r2, [pc, #260]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800169e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016a0:	4b40      	ldr	r3, [pc, #256]	@ (80017a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2232      	movs	r2, #50	@ 0x32
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	4a3f      	ldr	r2, [pc, #252]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0c9b      	lsrs	r3, r3, #18
 80016b2:	3301      	adds	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b6:	e002      	b.n	80016be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016be:	4b38      	ldr	r3, [pc, #224]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016ca:	d102      	bne.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f2      	bne.n	80016b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016d2:	4b33      	ldr	r3, [pc, #204]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016de:	d158      	bne.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e057      	b.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016e4:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016ea:	4a2d      	ldr	r2, [pc, #180]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80016f4:	e04d      	b.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016fc:	d141      	bne.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016fe:	4b28      	ldr	r3, [pc, #160]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800170a:	d131      	bne.n	8001770 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800170c:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001712:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001718:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800171c:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001724:	4a1e      	ldr	r2, [pc, #120]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800172a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2232      	movs	r2, #50	@ 0x32
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	0c9b      	lsrs	r3, r3, #18
 800173e:	3301      	adds	r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001742:	e002      	b.n	800174a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3b01      	subs	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001756:	d102      	bne.n	800175e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f2      	bne.n	8001744 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800176a:	d112      	bne.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e011      	b.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001770:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001776:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001780:	e007      	b.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001782:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800178a:	4a05      	ldr	r2, [pc, #20]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001790:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40007000 	.word	0x40007000
 80017a4:	20000000 	.word	0x20000000
 80017a8:	431bde83 	.word	0x431bde83

080017ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ba:	6093      	str	r3, [r2, #8]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40007000 	.word	0x40007000

080017cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e2fe      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d075      	beq.n	80018d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ea:	4b97      	ldr	r3, [pc, #604]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f4:	4b94      	ldr	r3, [pc, #592]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2b0c      	cmp	r3, #12
 8001802:	d102      	bne.n	800180a <HAL_RCC_OscConfig+0x3e>
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d002      	beq.n	8001810 <HAL_RCC_OscConfig+0x44>
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b08      	cmp	r3, #8
 800180e:	d10b      	bne.n	8001828 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	4b8d      	ldr	r3, [pc, #564]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d05b      	beq.n	80018d4 <HAL_RCC_OscConfig+0x108>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d157      	bne.n	80018d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e2d9      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001830:	d106      	bne.n	8001840 <HAL_RCC_OscConfig+0x74>
 8001832:	4b85      	ldr	r3, [pc, #532]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a84      	ldr	r2, [pc, #528]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e01d      	b.n	800187c <HAL_RCC_OscConfig+0xb0>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x98>
 800184a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b7c      	ldr	r3, [pc, #496]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a7b      	ldr	r2, [pc, #492]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0xb0>
 8001864:	4b78      	ldr	r3, [pc, #480]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a77      	ldr	r2, [pc, #476]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b75      	ldr	r3, [pc, #468]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a74      	ldr	r2, [pc, #464]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800187a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fb78 	bl	8000f78 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fb74 	bl	8000f78 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	@ 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e29e      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189e:	4b6a      	ldr	r3, [pc, #424]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0xc0>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fb64 	bl	8000f78 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff fb60 	bl	8000f78 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	@ 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e28a      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c6:	4b60      	ldr	r3, [pc, #384]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0xe8>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d075      	beq.n	80019ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e2:	4b59      	ldr	r3, [pc, #356]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ec:	4b56      	ldr	r3, [pc, #344]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	d102      	bne.n	8001902 <HAL_RCC_OscConfig+0x136>
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d002      	beq.n	8001908 <HAL_RCC_OscConfig+0x13c>
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	2b04      	cmp	r3, #4
 8001906:	d11f      	bne.n	8001948 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001908:	4b4f      	ldr	r3, [pc, #316]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_OscConfig+0x154>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e25d      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b49      	ldr	r3, [pc, #292]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	4946      	ldr	r1, [pc, #280]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001934:	4b45      	ldr	r3, [pc, #276]	@ (8001a4c <HAL_RCC_OscConfig+0x280>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fad1 	bl	8000ee0 <HAL_InitTick>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d043      	beq.n	80019cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e249      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d023      	beq.n	8001998 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001950:	4b3d      	ldr	r3, [pc, #244]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a3c      	ldr	r2, [pc, #240]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff fb0c 	bl	8000f78 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001964:	f7ff fb08 	bl	8000f78 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e232      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001976:	4b34      	ldr	r3, [pc, #208]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4b31      	ldr	r3, [pc, #196]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	061b      	lsls	r3, r3, #24
 8001990:	492d      	ldr	r1, [pc, #180]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
 8001996:	e01a      	b.n	80019ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001998:	4b2b      	ldr	r3, [pc, #172]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2a      	ldr	r2, [pc, #168]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 800199e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff fae8 	bl	8000f78 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ac:	f7ff fae4 	bl	8000f78 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e20e      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019be:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x1e0>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d041      	beq.n	8001a5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01c      	beq.n	8001a1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e2:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 80019e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e8:	4a17      	ldr	r2, [pc, #92]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff fac1 	bl	8000f78 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fa:	f7ff fabd 	bl	8000f78 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1e7      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0ef      	beq.n	80019fa <HAL_RCC_OscConfig+0x22e>
 8001a1a:	e020      	b.n	8001a5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a22:	4a09      	ldr	r2, [pc, #36]	@ (8001a48 <HAL_RCC_OscConfig+0x27c>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff faa4 	bl	8000f78 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a32:	e00d      	b.n	8001a50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff faa0 	bl	8000f78 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d906      	bls.n	8001a50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1ca      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a50:	4b8c      	ldr	r3, [pc, #560]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1ea      	bne.n	8001a34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80a6 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a70:	4b84      	ldr	r3, [pc, #528]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2b4>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x2b6>
 8001a80:	2300      	movs	r3, #0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00d      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4b7f      	ldr	r3, [pc, #508]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a92:	4b7c      	ldr	r3, [pc, #496]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa2:	4b79      	ldr	r3, [pc, #484]	@ (8001c88 <HAL_RCC_OscConfig+0x4bc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d118      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aae:	4b76      	ldr	r3, [pc, #472]	@ (8001c88 <HAL_RCC_OscConfig+0x4bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a75      	ldr	r2, [pc, #468]	@ (8001c88 <HAL_RCC_OscConfig+0x4bc>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fa5d 	bl	8000f78 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac2:	f7ff fa59 	bl	8000f78 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e183      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad4:	4b6c      	ldr	r3, [pc, #432]	@ (8001c88 <HAL_RCC_OscConfig+0x4bc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d108      	bne.n	8001afa <HAL_RCC_OscConfig+0x32e>
 8001ae8:	4b66      	ldr	r3, [pc, #408]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aee:	4a65      	ldr	r2, [pc, #404]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001af8:	e024      	b.n	8001b44 <HAL_RCC_OscConfig+0x378>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d110      	bne.n	8001b24 <HAL_RCC_OscConfig+0x358>
 8001b02:	4b60      	ldr	r3, [pc, #384]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b08:	4a5e      	ldr	r2, [pc, #376]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b12:	4b5c      	ldr	r3, [pc, #368]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b18:	4a5a      	ldr	r2, [pc, #360]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b22:	e00f      	b.n	8001b44 <HAL_RCC_OscConfig+0x378>
 8001b24:	4b57      	ldr	r3, [pc, #348]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b2a:	4a56      	ldr	r2, [pc, #344]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b34:	4b53      	ldr	r3, [pc, #332]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b3a:	4a52      	ldr	r2, [pc, #328]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d016      	beq.n	8001b7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7ff fa14 	bl	8000f78 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b54:	f7ff fa10 	bl	8000f78 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e138      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b6a:	4b46      	ldr	r3, [pc, #280]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0ed      	beq.n	8001b54 <HAL_RCC_OscConfig+0x388>
 8001b78:	e015      	b.n	8001ba6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f9fd 	bl	8000f78 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff f9f9 	bl	8000f78 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e121      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b98:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ed      	bne.n	8001b82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d105      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bac:	4b35      	ldr	r3, [pc, #212]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb0:	4a34      	ldr	r2, [pc, #208]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d03c      	beq.n	8001c3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d01c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff f9cc 	bl	8000f78 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001be4:	f7ff f9c8 	bl	8000f78 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e0f2      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bf6:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0ef      	beq.n	8001be4 <HAL_RCC_OscConfig+0x418>
 8001c04:	e01b      	b.n	8001c3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c06:	4b1f      	ldr	r3, [pc, #124]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c16:	f7ff f9af 	bl	8000f78 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c1e:	f7ff f9ab 	bl	8000f78 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0d5      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c30:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1ef      	bne.n	8001c1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 80c9 	beq.w	8001dda <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c48:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b0c      	cmp	r3, #12
 8001c52:	f000 8083 	beq.w	8001d5c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d15e      	bne.n	8001d1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a08      	ldr	r2, [pc, #32]	@ (8001c84 <HAL_RCC_OscConfig+0x4b8>)
 8001c64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7ff f985 	bl	8000f78 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c70:	e00c      	b.n	8001c8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c72:	f7ff f981 	bl	8000f78 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d905      	bls.n	8001c8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e0ab      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	4b55      	ldr	r3, [pc, #340]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ec      	bne.n	8001c72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c98:	4b52      	ldr	r3, [pc, #328]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	4b52      	ldr	r3, [pc, #328]	@ (8001de8 <HAL_RCC_OscConfig+0x61c>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6a11      	ldr	r1, [r2, #32]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ca8:	3a01      	subs	r2, #1
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	4311      	orrs	r1, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001cb2:	0212      	lsls	r2, r2, #8
 8001cb4:	4311      	orrs	r1, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001cba:	0852      	lsrs	r2, r2, #1
 8001cbc:	3a01      	subs	r2, #1
 8001cbe:	0552      	lsls	r2, r2, #21
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cc6:	0852      	lsrs	r2, r2, #1
 8001cc8:	3a01      	subs	r2, #1
 8001cca:	0652      	lsls	r2, r2, #25
 8001ccc:	4311      	orrs	r1, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001cd2:	06d2      	lsls	r2, r2, #27
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	4943      	ldr	r1, [pc, #268]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cdc:	4b41      	ldr	r3, [pc, #260]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a40      	ldr	r2, [pc, #256]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4a3d      	ldr	r2, [pc, #244]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cf2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f940 	bl	8000f78 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff f93c 	bl	8000f78 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e066      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0e:	4b35      	ldr	r3, [pc, #212]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x530>
 8001d1a:	e05e      	b.n	8001dda <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1c:	4b31      	ldr	r3, [pc, #196]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a30      	ldr	r2, [pc, #192]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f926 	bl	8000f78 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff f922 	bl	8000f78 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e04c      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d42:	4b28      	ldr	r3, [pc, #160]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d4e:	4b25      	ldr	r3, [pc, #148]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	4924      	ldr	r1, [pc, #144]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d54:	4b25      	ldr	r3, [pc, #148]	@ (8001dec <HAL_RCC_OscConfig+0x620>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	60cb      	str	r3, [r1, #12]
 8001d5a:	e03e      	b.n	8001dda <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e039      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d68:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d12c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	3b01      	subs	r3, #1
 8001d88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d123      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d113      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	019f800c 	.word	0x019f800c
 8001dec:	feeefffc 	.word	0xfeeefffc

08001df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e11e      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e08:	4b91      	ldr	r3, [pc, #580]	@ (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d910      	bls.n	8001e38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b8e      	ldr	r3, [pc, #568]	@ (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 020f 	bic.w	r2, r3, #15
 8001e1e:	498c      	ldr	r1, [pc, #560]	@ (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b8a      	ldr	r3, [pc, #552]	@ (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e106      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d073      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d129      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4c:	4b81      	ldr	r3, [pc, #516]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0f4      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e5c:	f000 f99e 	bl	800219c <RCC_GetSysClockFreqFromPLLSource>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4a7c      	ldr	r2, [pc, #496]	@ (8002058 <HAL_RCC_ClockConfig+0x268>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d93f      	bls.n	8001eea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d033      	beq.n	8001eea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d12f      	bne.n	8001eea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e8a:	4b72      	ldr	r3, [pc, #456]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e92:	4a70      	ldr	r2, [pc, #448]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e024      	b.n	8001eea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0c6      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb8:	4b66      	ldr	r3, [pc, #408]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0be      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ec8:	f000 f8ce 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4a61      	ldr	r2, [pc, #388]	@ (8002058 <HAL_RCC_ClockConfig+0x268>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d909      	bls.n	8001eea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ede:	4a5d      	ldr	r2, [pc, #372]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ee4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b5a      	ldr	r3, [pc, #360]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4957      	ldr	r1, [pc, #348]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001efc:	f7ff f83c 	bl	8000f78 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7ff f838 	bl	8000f78 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e095      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 020c 	and.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1eb      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d023      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f44:	4b43      	ldr	r3, [pc, #268]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a42      	ldr	r2, [pc, #264]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001f64:	4a3b      	ldr	r2, [pc, #236]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b39      	ldr	r3, [pc, #228]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4936      	ldr	r1, [pc, #216]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b80      	cmp	r3, #128	@ 0x80
 8001f84:	d105      	bne.n	8001f92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f86:	4b33      	ldr	r3, [pc, #204]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4a32      	ldr	r2, [pc, #200]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001f8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f92:	4b2f      	ldr	r3, [pc, #188]	@ (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d21d      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 020f 	bic.w	r2, r3, #15
 8001fa8:	4929      	ldr	r1, [pc, #164]	@ (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fb0:	f7fe ffe2 	bl	8000f78 <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7fe ffde 	bl	8000f78 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e03b      	b.n	8002046 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b20      	ldr	r3, [pc, #128]	@ (8002050 <HAL_RCC_ClockConfig+0x260>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1ed      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4917      	ldr	r1, [pc, #92]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002006:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	490f      	ldr	r1, [pc, #60]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800201a:	f000 f825 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 800201e:	4602      	mov	r2, r0
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <HAL_RCC_ClockConfig+0x264>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	490c      	ldr	r1, [pc, #48]	@ (800205c <HAL_RCC_ClockConfig+0x26c>)
 800202c:	5ccb      	ldrb	r3, [r1, r3]
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <HAL_RCC_ClockConfig+0x270>)
 8002038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <HAL_RCC_ClockConfig+0x274>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe ff4e 	bl	8000ee0 <HAL_InitTick>
 8002044:	4603      	mov	r3, r0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40022000 	.word	0x40022000
 8002054:	40021000 	.word	0x40021000
 8002058:	04c4b400 	.word	0x04c4b400
 800205c:	080059bc 	.word	0x080059bc
 8002060:	20000000 	.word	0x20000000
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800206e:	4b2c      	ldr	r3, [pc, #176]	@ (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b04      	cmp	r3, #4
 8002078:	d102      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800207a:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <HAL_RCC_GetSysClockFreq+0xbc>)
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e047      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002080:	4b27      	ldr	r3, [pc, #156]	@ (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d102      	bne.n	8002092 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800208c:	4b26      	ldr	r3, [pc, #152]	@ (8002128 <HAL_RCC_GetSysClockFreq+0xc0>)
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	e03e      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002092:	4b23      	ldr	r3, [pc, #140]	@ (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d136      	bne.n	800210c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800209e:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3301      	adds	r3, #1
 80020b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002128 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	4a16      	ldr	r2, [pc, #88]	@ (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c6:	68d2      	ldr	r2, [r2, #12]
 80020c8:	0a12      	lsrs	r2, r2, #8
 80020ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	617b      	str	r3, [r7, #20]
      break;
 80020d4:	e00c      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020d6:	4a13      	ldr	r2, [pc, #76]	@ (8002124 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4a10      	ldr	r2, [pc, #64]	@ (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e0:	68d2      	ldr	r2, [r2, #12]
 80020e2:	0a12      	lsrs	r2, r2, #8
 80020e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
      break;
 80020ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0e5b      	lsrs	r3, r3, #25
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	3301      	adds	r3, #1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	e001      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002110:	693b      	ldr	r3, [r7, #16]
}
 8002112:	4618      	mov	r0, r3
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	00f42400 	.word	0x00f42400
 8002128:	007a1200 	.word	0x007a1200

0800212c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002130:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <HAL_RCC_GetHCLKFreq+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000

08002144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002148:	f7ff fff0 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4904      	ldr	r1, [pc, #16]	@ (800216c <HAL_RCC_GetPCLK1Freq+0x28>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	080059cc 	.word	0x080059cc

08002170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002174:	f7ff ffda 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_RCC_GetPCLK2Freq+0x24>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0adb      	lsrs	r3, r3, #11
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4904      	ldr	r1, [pc, #16]	@ (8002198 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	080059cc 	.word	0x080059cc

0800219c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021a2:	4b1e      	ldr	r3, [pc, #120]	@ (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	3301      	adds	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d10c      	bne.n	80021da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021c0:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c8:	4a14      	ldr	r2, [pc, #80]	@ (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ca:	68d2      	ldr	r2, [r2, #12]
 80021cc:	0a12      	lsrs	r2, r2, #8
 80021ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	617b      	str	r3, [r7, #20]
    break;
 80021d8:	e00c      	b.n	80021f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021da:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e2:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021e4:	68d2      	ldr	r2, [r2, #12]
 80021e6:	0a12      	lsrs	r2, r2, #8
 80021e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	617b      	str	r3, [r7, #20]
    break;
 80021f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021f4:	4b09      	ldr	r3, [pc, #36]	@ (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0e5b      	lsrs	r3, r3, #25
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	3301      	adds	r3, #1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800220e:	687b      	ldr	r3, [r7, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40021000 	.word	0x40021000
 8002220:	007a1200 	.word	0x007a1200
 8002224:	00f42400 	.word	0x00f42400

08002228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002230:	2300      	movs	r3, #0
 8002232:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002234:	2300      	movs	r3, #0
 8002236:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8098 	beq.w	8002376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224a:	4b43      	ldr	r3, [pc, #268]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10d      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	4b40      	ldr	r3, [pc, #256]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225a:	4a3f      	ldr	r2, [pc, #252]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002260:	6593      	str	r3, [r2, #88]	@ 0x58
 8002262:	4b3d      	ldr	r3, [pc, #244]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226e:	2301      	movs	r3, #1
 8002270:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002272:	4b3a      	ldr	r3, [pc, #232]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a39      	ldr	r2, [pc, #228]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800227c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800227e:	f7fe fe7b 	bl	8000f78 <HAL_GetTick>
 8002282:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002284:	e009      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002286:	f7fe fe77 	bl	8000f78 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d902      	bls.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	74fb      	strb	r3, [r7, #19]
        break;
 8002298:	e005      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800229a:	4b30      	ldr	r3, [pc, #192]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0ef      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d159      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d01e      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d019      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022c8:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022d4:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022da:	4a1f      	ldr	r2, [pc, #124]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022f4:	4a18      	ldr	r2, [pc, #96]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d016      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7fe fe37 	bl	8000f78 <HAL_GetTick>
 800230a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800230c:	e00b      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fe33 	bl	8000f78 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d902      	bls.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	74fb      	strb	r3, [r7, #19]
            break;
 8002324:	e006      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002326:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ec      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10b      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800233a:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002340:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002348:	4903      	ldr	r1, [pc, #12]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002350:	e008      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	74bb      	strb	r3, [r7, #18]
 8002356:	e005      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002364:	7c7b      	ldrb	r3, [r7, #17]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4ba7      	ldr	r3, [pc, #668]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236e:	4aa6      	ldr	r2, [pc, #664]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002382:	4ba1      	ldr	r3, [pc, #644]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002388:	f023 0203 	bic.w	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	499d      	ldr	r1, [pc, #628]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023a4:	4b98      	ldr	r3, [pc, #608]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023aa:	f023 020c 	bic.w	r2, r3, #12
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4995      	ldr	r1, [pc, #596]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023c6:	4b90      	ldr	r3, [pc, #576]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	498c      	ldr	r1, [pc, #560]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023e8:	4b87      	ldr	r3, [pc, #540]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	4984      	ldr	r1, [pc, #528]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800240a:	4b7f      	ldr	r3, [pc, #508]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002410:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	497b      	ldr	r1, [pc, #492]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800242c:	4b76      	ldr	r3, [pc, #472]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002432:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	4973      	ldr	r1, [pc, #460]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800244e:	4b6e      	ldr	r3, [pc, #440]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002454:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	496a      	ldr	r1, [pc, #424]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002470:	4b65      	ldr	r3, [pc, #404]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002476:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4962      	ldr	r1, [pc, #392]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002492:	4b5d      	ldr	r3, [pc, #372]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002498:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	4959      	ldr	r1, [pc, #356]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024b4:	4b54      	ldr	r3, [pc, #336]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024ba:	f023 0203 	bic.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c2:	4951      	ldr	r1, [pc, #324]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e4:	4948      	ldr	r1, [pc, #288]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d015      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f8:	4b43      	ldr	r3, [pc, #268]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4940      	ldr	r1, [pc, #256]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002516:	d105      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002518:	4b3b      	ldr	r3, [pc, #236]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4a3a      	ldr	r2, [pc, #232]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002522:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800252c:	2b00      	cmp	r3, #0
 800252e:	d015      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002530:	4b35      	ldr	r3, [pc, #212]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002536:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800253e:	4932      	ldr	r1, [pc, #200]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800254e:	d105      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002550:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4a2c      	ldr	r2, [pc, #176]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800255a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d015      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002568:	4b27      	ldr	r3, [pc, #156]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002576:	4924      	ldr	r1, [pc, #144]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002582:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002586:	d105      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002588:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a1e      	ldr	r2, [pc, #120]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002592:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d015      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025a0:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ae:	4916      	ldr	r1, [pc, #88]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025be:	d105      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c0:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4a10      	ldr	r2, [pc, #64]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d019      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	4908      	ldr	r1, [pc, #32]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025f6:	d109      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f8:	4b03      	ldr	r3, [pc, #12]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a02      	ldr	r2, [pc, #8]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002602:	60d3      	str	r3, [r2, #12]
 8002604:	e002      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d015      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002618:	4b29      	ldr	r3, [pc, #164]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	4926      	ldr	r1, [pc, #152]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002636:	d105      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002638:	4b21      	ldr	r3, [pc, #132]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4a20      	ldr	r2, [pc, #128]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800263e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002642:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d015      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002650:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002656:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265e:	4918      	ldr	r1, [pc, #96]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800266e:	d105      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002670:	4b13      	ldr	r3, [pc, #76]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a12      	ldr	r2, [pc, #72]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d015      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002688:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800268a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800268e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002696:	490a      	ldr	r1, [pc, #40]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026a6:	d105      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a04      	ldr	r2, [pc, #16]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80026b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000

080026c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e042      	b.n	800275c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d106      	bne.n	80026ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7fe f8d9 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2224      	movs	r2, #36	@ 0x24
 80026f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 ff60 	bl	80035d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fc61 	bl	8002fdc <UART_SetConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e01b      	b.n	800275c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002732:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002742:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 ffdf 	bl	8003718 <UART_CheckIdleState>
 800275a:	4603      	mov	r3, r0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	@ 0x28
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277a:	2b20      	cmp	r3, #32
 800277c:	d17b      	bne.n	8002876 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_UART_Transmit+0x26>
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e074      	b.n	8002878 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2221      	movs	r2, #33	@ 0x21
 800279a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800279e:	f7fe fbeb 	bl	8000f78 <HAL_GetTick>
 80027a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	88fa      	ldrh	r2, [r7, #6]
 80027a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027bc:	d108      	bne.n	80027d0 <HAL_UART_Transmit+0x6c>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	e003      	b.n	80027d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027d8:	e030      	b.n	800283c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2180      	movs	r1, #128	@ 0x80
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f001 f841 	bl	800386c <UART_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e03d      	b.n	8002878 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10b      	bne.n	800281a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002810:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	3302      	adds	r3, #2
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	e007      	b.n	800282a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3301      	adds	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1c8      	bne.n	80027da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2200      	movs	r2, #0
 8002850:	2140      	movs	r1, #64	@ 0x40
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f001 f80a 	bl	800386c <UART_WaitOnFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e006      	b.n	8002878 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	@ 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	4613      	mov	r3, r2
 800288c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002894:	2b20      	cmp	r3, #32
 8002896:	d137      	bne.n	8002908 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <HAL_UART_Receive_IT+0x24>
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e030      	b.n	800290a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a18      	ldr	r2, [pc, #96]	@ (8002914 <HAL_UART_Receive_IT+0x94>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d01f      	beq.n	80028f8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d018      	beq.n	80028f8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	e853 3f00 	ldrex	r3, [r3]
 80028d2:	613b      	str	r3, [r7, #16]
   return(result);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	623b      	str	r3, [r7, #32]
 80028e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e8:	69f9      	ldr	r1, [r7, #28]
 80028ea:	6a3a      	ldr	r2, [r7, #32]
 80028ec:	e841 2300 	strex	r3, r2, [r1]
 80028f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e6      	bne.n	80028c6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f001 f822 	bl	8003948 <UART_Start_Receive_IT>
 8002904:	4603      	mov	r3, r0
 8002906:	e000      	b.n	800290a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3728      	adds	r7, #40	@ 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40008000 	.word	0x40008000

08002918 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b0ba      	sub	sp, #232	@ 0xe8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800293e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002942:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002946:	4013      	ands	r3, r2
 8002948:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800294c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d11b      	bne.n	800298c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d015      	beq.n	800298c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d105      	bne.n	8002978 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800296c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d009      	beq.n	800298c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8300 	beq.w	8002f82 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
      }
      return;
 800298a:	e2fa      	b.n	8002f82 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800298c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8123 	beq.w	8002bdc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002996:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800299a:	4b8d      	ldr	r3, [pc, #564]	@ (8002bd0 <HAL_UART_IRQHandler+0x2b8>)
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80029a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80029a6:	4b8b      	ldr	r3, [pc, #556]	@ (8002bd4 <HAL_UART_IRQHandler+0x2bc>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8116 	beq.w	8002bdc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d011      	beq.n	80029e0 <HAL_UART_IRQHandler+0xc8>
 80029bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00b      	beq.n	80029e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2201      	movs	r2, #1
 80029ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d011      	beq.n	8002a10 <HAL_UART_IRQHandler+0xf8>
 80029ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2202      	movs	r2, #2
 80029fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a06:	f043 0204 	orr.w	r2, r3, #4
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d011      	beq.n	8002a40 <HAL_UART_IRQHandler+0x128>
 8002a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00b      	beq.n	8002a40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a36:	f043 0202 	orr.w	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d017      	beq.n	8002a7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d105      	bne.n	8002a64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8002bd0 <HAL_UART_IRQHandler+0x2b8>)
 8002a5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a72:	f043 0208 	orr.w	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <HAL_UART_IRQHandler+0x196>
 8002a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00c      	beq.n	8002aae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8266 	beq.w	8002f86 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d013      	beq.n	8002aee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b02:	2b40      	cmp	r3, #64	@ 0x40
 8002b04:	d005      	beq.n	8002b12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d054      	beq.n	8002bbc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f001 f83a 	bl	8003b8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b22:	2b40      	cmp	r3, #64	@ 0x40
 8002b24:	d146      	bne.n	8002bb4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b34:	e853 3f00 	ldrex	r3, [r3]
 8002b38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3308      	adds	r3, #8
 8002b4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1d9      	bne.n	8002b26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d017      	beq.n	8002bac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b82:	4a15      	ldr	r2, [pc, #84]	@ (8002bd8 <HAL_UART_IRQHandler+0x2c0>)
 8002b84:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe fb67 	bl	8001260 <HAL_DMA_Abort_IT>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d019      	beq.n	8002bcc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002baa:	e00f      	b.n	8002bcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f9ff 	bl	8002fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb2:	e00b      	b.n	8002bcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f9fb 	bl	8002fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bba:	e007      	b.n	8002bcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f9f7 	bl	8002fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002bca:	e1dc      	b.n	8002f86 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	bf00      	nop
    return;
 8002bce:	e1da      	b.n	8002f86 <HAL_UART_IRQHandler+0x66e>
 8002bd0:	10000001 	.word	0x10000001
 8002bd4:	04000120 	.word	0x04000120
 8002bd8:	08003c59 	.word	0x08003c59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 8170 	bne.w	8002ec6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8169 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8162 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2210      	movs	r2, #16
 8002c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c14:	2b40      	cmp	r3, #64	@ 0x40
 8002c16:	f040 80d8 	bne.w	8002dca <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80af 	beq.w	8002d90 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002c38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	f080 80a7 	bcs.w	8002d90 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 8087 	bne.w	8002d6e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c8e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1da      	bne.n	8002c60 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3308      	adds	r3, #8
 8002cb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3308      	adds	r3, #8
 8002cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ce0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e1      	bne.n	8002caa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3308      	adds	r3, #8
 8002cec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3308      	adds	r3, #8
 8002d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e3      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d3c:	f023 0310 	bic.w	r3, r3, #16
 8002d40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d56:	e841 2300 	strex	r3, r2, [r1]
 8002d5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e4      	bne.n	8002d2c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe fa20 	bl	80011ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2202      	movs	r2, #2
 8002d72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	4619      	mov	r1, r3
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f91b 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002d8e:	e0fc      	b.n	8002f8a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	f040 80f5 	bne.w	8002f8a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	f040 80eb 	bne.w	8002f8a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8fe 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
      return;
 8002dc8:	e0df      	b.n	8002f8a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80d1 	beq.w	8002f8e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002dec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80cc 	beq.w	8002f8e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfe:	e853 3f00 	ldrex	r3, [r3]
 8002e02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e4      	bne.n	8002df6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3308      	adds	r3, #8
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	e853 3f00 	ldrex	r3, [r3]
 8002e3a:	623b      	str	r3, [r7, #32]
   return(result);
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3308      	adds	r3, #8
 8002e50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e54:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e5c:	e841 2300 	strex	r3, r2, [r1]
 8002e60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e1      	bne.n	8002e2c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	e853 3f00 	ldrex	r3, [r3]
 8002e88:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f023 0310 	bic.w	r3, r3, #16
 8002e90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea2:	69b9      	ldr	r1, [r7, #24]
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	e841 2300 	strex	r3, r2, [r1]
 8002eaa:	617b      	str	r3, [r7, #20]
   return(result);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e4      	bne.n	8002e7c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f880 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ec4:	e063      	b.n	8002f8e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x5d8>
 8002ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f001 fc13 	bl	8004714 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eee:	e051      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d014      	beq.n	8002f26 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d03a      	beq.n	8002f92 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
    }
    return;
 8002f24:	e035      	b.n	8002f92 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_UART_IRQHandler+0x62e>
 8002f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fe9c 	bl	8003c7c <UART_EndTransmit_IT>
    return;
 8002f44:	e026      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_UART_IRQHandler+0x64e>
 8002f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f56:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f001 fbec 	bl	800473c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f64:	e016      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d010      	beq.n	8002f94 <HAL_UART_IRQHandler+0x67c>
 8002f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	da0c      	bge.n	8002f94 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f001 fbd4 	bl	8004728 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f80:	e008      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
      return;
 8002f82:	bf00      	nop
 8002f84:	e006      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
    return;
 8002f86:	bf00      	nop
 8002f88:	e004      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
      return;
 8002f8a:	bf00      	nop
 8002f8c:	e002      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
      return;
 8002f8e:	bf00      	nop
 8002f90:	e000      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
    return;
 8002f92:	bf00      	nop
  }
}
 8002f94:	37e8      	adds	r7, #232	@ 0xe8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop

08002f9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe0:	b08c      	sub	sp, #48	@ 0x30
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	4313      	orrs	r3, r2
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4baa      	ldr	r3, [pc, #680]	@ (80032b4 <UART_SetConfig+0x2d8>)
 800300c:	4013      	ands	r3, r2
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003014:	430b      	orrs	r3, r1
 8003016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a9f      	ldr	r2, [pc, #636]	@ (80032b8 <UART_SetConfig+0x2dc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003044:	4313      	orrs	r3, r2
 8003046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003052:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800305c:	430b      	orrs	r3, r1
 800305e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	f023 010f 	bic.w	r1, r3, #15
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a90      	ldr	r2, [pc, #576]	@ (80032bc <UART_SetConfig+0x2e0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d125      	bne.n	80030cc <UART_SetConfig+0xf0>
 8003080:	4b8f      	ldr	r3, [pc, #572]	@ (80032c0 <UART_SetConfig+0x2e4>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b03      	cmp	r3, #3
 800308c:	d81a      	bhi.n	80030c4 <UART_SetConfig+0xe8>
 800308e:	a201      	add	r2, pc, #4	@ (adr r2, 8003094 <UART_SetConfig+0xb8>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030b5 	.word	0x080030b5
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030bd 	.word	0x080030bd
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030aa:	e116      	b.n	80032da <UART_SetConfig+0x2fe>
 80030ac:	2302      	movs	r3, #2
 80030ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030b2:	e112      	b.n	80032da <UART_SetConfig+0x2fe>
 80030b4:	2304      	movs	r3, #4
 80030b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ba:	e10e      	b.n	80032da <UART_SetConfig+0x2fe>
 80030bc:	2308      	movs	r3, #8
 80030be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030c2:	e10a      	b.n	80032da <UART_SetConfig+0x2fe>
 80030c4:	2310      	movs	r3, #16
 80030c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ca:	e106      	b.n	80032da <UART_SetConfig+0x2fe>
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a7c      	ldr	r2, [pc, #496]	@ (80032c4 <UART_SetConfig+0x2e8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d138      	bne.n	8003148 <UART_SetConfig+0x16c>
 80030d6:	4b7a      	ldr	r3, [pc, #488]	@ (80032c0 <UART_SetConfig+0x2e4>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b0c      	cmp	r3, #12
 80030e2:	d82d      	bhi.n	8003140 <UART_SetConfig+0x164>
 80030e4:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <UART_SetConfig+0x110>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003141 	.word	0x08003141
 80030f4:	08003141 	.word	0x08003141
 80030f8:	08003141 	.word	0x08003141
 80030fc:	08003131 	.word	0x08003131
 8003100:	08003141 	.word	0x08003141
 8003104:	08003141 	.word	0x08003141
 8003108:	08003141 	.word	0x08003141
 800310c:	08003129 	.word	0x08003129
 8003110:	08003141 	.word	0x08003141
 8003114:	08003141 	.word	0x08003141
 8003118:	08003141 	.word	0x08003141
 800311c:	08003139 	.word	0x08003139
 8003120:	2300      	movs	r3, #0
 8003122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003126:	e0d8      	b.n	80032da <UART_SetConfig+0x2fe>
 8003128:	2302      	movs	r3, #2
 800312a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800312e:	e0d4      	b.n	80032da <UART_SetConfig+0x2fe>
 8003130:	2304      	movs	r3, #4
 8003132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003136:	e0d0      	b.n	80032da <UART_SetConfig+0x2fe>
 8003138:	2308      	movs	r3, #8
 800313a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800313e:	e0cc      	b.n	80032da <UART_SetConfig+0x2fe>
 8003140:	2310      	movs	r3, #16
 8003142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003146:	e0c8      	b.n	80032da <UART_SetConfig+0x2fe>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5e      	ldr	r2, [pc, #376]	@ (80032c8 <UART_SetConfig+0x2ec>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d125      	bne.n	800319e <UART_SetConfig+0x1c2>
 8003152:	4b5b      	ldr	r3, [pc, #364]	@ (80032c0 <UART_SetConfig+0x2e4>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003158:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800315c:	2b30      	cmp	r3, #48	@ 0x30
 800315e:	d016      	beq.n	800318e <UART_SetConfig+0x1b2>
 8003160:	2b30      	cmp	r3, #48	@ 0x30
 8003162:	d818      	bhi.n	8003196 <UART_SetConfig+0x1ba>
 8003164:	2b20      	cmp	r3, #32
 8003166:	d00a      	beq.n	800317e <UART_SetConfig+0x1a2>
 8003168:	2b20      	cmp	r3, #32
 800316a:	d814      	bhi.n	8003196 <UART_SetConfig+0x1ba>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <UART_SetConfig+0x19a>
 8003170:	2b10      	cmp	r3, #16
 8003172:	d008      	beq.n	8003186 <UART_SetConfig+0x1aa>
 8003174:	e00f      	b.n	8003196 <UART_SetConfig+0x1ba>
 8003176:	2300      	movs	r3, #0
 8003178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800317c:	e0ad      	b.n	80032da <UART_SetConfig+0x2fe>
 800317e:	2302      	movs	r3, #2
 8003180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003184:	e0a9      	b.n	80032da <UART_SetConfig+0x2fe>
 8003186:	2304      	movs	r3, #4
 8003188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800318c:	e0a5      	b.n	80032da <UART_SetConfig+0x2fe>
 800318e:	2308      	movs	r3, #8
 8003190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003194:	e0a1      	b.n	80032da <UART_SetConfig+0x2fe>
 8003196:	2310      	movs	r3, #16
 8003198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800319c:	e09d      	b.n	80032da <UART_SetConfig+0x2fe>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a4a      	ldr	r2, [pc, #296]	@ (80032cc <UART_SetConfig+0x2f0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d125      	bne.n	80031f4 <UART_SetConfig+0x218>
 80031a8:	4b45      	ldr	r3, [pc, #276]	@ (80032c0 <UART_SetConfig+0x2e4>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80031b4:	d016      	beq.n	80031e4 <UART_SetConfig+0x208>
 80031b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80031b8:	d818      	bhi.n	80031ec <UART_SetConfig+0x210>
 80031ba:	2b80      	cmp	r3, #128	@ 0x80
 80031bc:	d00a      	beq.n	80031d4 <UART_SetConfig+0x1f8>
 80031be:	2b80      	cmp	r3, #128	@ 0x80
 80031c0:	d814      	bhi.n	80031ec <UART_SetConfig+0x210>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <UART_SetConfig+0x1f0>
 80031c6:	2b40      	cmp	r3, #64	@ 0x40
 80031c8:	d008      	beq.n	80031dc <UART_SetConfig+0x200>
 80031ca:	e00f      	b.n	80031ec <UART_SetConfig+0x210>
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031d2:	e082      	b.n	80032da <UART_SetConfig+0x2fe>
 80031d4:	2302      	movs	r3, #2
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031da:	e07e      	b.n	80032da <UART_SetConfig+0x2fe>
 80031dc:	2304      	movs	r3, #4
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031e2:	e07a      	b.n	80032da <UART_SetConfig+0x2fe>
 80031e4:	2308      	movs	r3, #8
 80031e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ea:	e076      	b.n	80032da <UART_SetConfig+0x2fe>
 80031ec:	2310      	movs	r3, #16
 80031ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031f2:	e072      	b.n	80032da <UART_SetConfig+0x2fe>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a35      	ldr	r2, [pc, #212]	@ (80032d0 <UART_SetConfig+0x2f4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d12a      	bne.n	8003254 <UART_SetConfig+0x278>
 80031fe:	4b30      	ldr	r3, [pc, #192]	@ (80032c0 <UART_SetConfig+0x2e4>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003204:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003208:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800320c:	d01a      	beq.n	8003244 <UART_SetConfig+0x268>
 800320e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003212:	d81b      	bhi.n	800324c <UART_SetConfig+0x270>
 8003214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003218:	d00c      	beq.n	8003234 <UART_SetConfig+0x258>
 800321a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800321e:	d815      	bhi.n	800324c <UART_SetConfig+0x270>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <UART_SetConfig+0x250>
 8003224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003228:	d008      	beq.n	800323c <UART_SetConfig+0x260>
 800322a:	e00f      	b.n	800324c <UART_SetConfig+0x270>
 800322c:	2300      	movs	r3, #0
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003232:	e052      	b.n	80032da <UART_SetConfig+0x2fe>
 8003234:	2302      	movs	r3, #2
 8003236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800323a:	e04e      	b.n	80032da <UART_SetConfig+0x2fe>
 800323c:	2304      	movs	r3, #4
 800323e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003242:	e04a      	b.n	80032da <UART_SetConfig+0x2fe>
 8003244:	2308      	movs	r3, #8
 8003246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800324a:	e046      	b.n	80032da <UART_SetConfig+0x2fe>
 800324c:	2310      	movs	r3, #16
 800324e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003252:	e042      	b.n	80032da <UART_SetConfig+0x2fe>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a17      	ldr	r2, [pc, #92]	@ (80032b8 <UART_SetConfig+0x2dc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d13a      	bne.n	80032d4 <UART_SetConfig+0x2f8>
 800325e:	4b18      	ldr	r3, [pc, #96]	@ (80032c0 <UART_SetConfig+0x2e4>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003264:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003268:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800326c:	d01a      	beq.n	80032a4 <UART_SetConfig+0x2c8>
 800326e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003272:	d81b      	bhi.n	80032ac <UART_SetConfig+0x2d0>
 8003274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003278:	d00c      	beq.n	8003294 <UART_SetConfig+0x2b8>
 800327a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800327e:	d815      	bhi.n	80032ac <UART_SetConfig+0x2d0>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <UART_SetConfig+0x2b0>
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003288:	d008      	beq.n	800329c <UART_SetConfig+0x2c0>
 800328a:	e00f      	b.n	80032ac <UART_SetConfig+0x2d0>
 800328c:	2300      	movs	r3, #0
 800328e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003292:	e022      	b.n	80032da <UART_SetConfig+0x2fe>
 8003294:	2302      	movs	r3, #2
 8003296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800329a:	e01e      	b.n	80032da <UART_SetConfig+0x2fe>
 800329c:	2304      	movs	r3, #4
 800329e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032a2:	e01a      	b.n	80032da <UART_SetConfig+0x2fe>
 80032a4:	2308      	movs	r3, #8
 80032a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032aa:	e016      	b.n	80032da <UART_SetConfig+0x2fe>
 80032ac:	2310      	movs	r3, #16
 80032ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032b2:	e012      	b.n	80032da <UART_SetConfig+0x2fe>
 80032b4:	cfff69f3 	.word	0xcfff69f3
 80032b8:	40008000 	.word	0x40008000
 80032bc:	40013800 	.word	0x40013800
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40004400 	.word	0x40004400
 80032c8:	40004800 	.word	0x40004800
 80032cc:	40004c00 	.word	0x40004c00
 80032d0:	40005000 	.word	0x40005000
 80032d4:	2310      	movs	r3, #16
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4aae      	ldr	r2, [pc, #696]	@ (8003598 <UART_SetConfig+0x5bc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	f040 8097 	bne.w	8003414 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d823      	bhi.n	8003336 <UART_SetConfig+0x35a>
 80032ee:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <UART_SetConfig+0x318>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003319 	.word	0x08003319
 80032f8:	08003337 	.word	0x08003337
 80032fc:	08003321 	.word	0x08003321
 8003300:	08003337 	.word	0x08003337
 8003304:	08003327 	.word	0x08003327
 8003308:	08003337 	.word	0x08003337
 800330c:	08003337 	.word	0x08003337
 8003310:	08003337 	.word	0x08003337
 8003314:	0800332f 	.word	0x0800332f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003318:	f7fe ff14 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 800331c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800331e:	e010      	b.n	8003342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003320:	4b9e      	ldr	r3, [pc, #632]	@ (800359c <UART_SetConfig+0x5c0>)
 8003322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003324:	e00d      	b.n	8003342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003326:	f7fe fe9f 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 800332a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800332c:	e009      	b.n	8003342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800332e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003334:	e005      	b.n	8003342 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003340:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8130 	beq.w	80035aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	4a94      	ldr	r2, [pc, #592]	@ (80035a0 <UART_SetConfig+0x5c4>)
 8003350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003354:	461a      	mov	r2, r3
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	fbb3 f3f2 	udiv	r3, r3, r2
 800335c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	429a      	cmp	r2, r3
 800336c:	d305      	bcc.n	800337a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	429a      	cmp	r2, r3
 8003378:	d903      	bls.n	8003382 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003380:	e113      	b.n	80035aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	2200      	movs	r2, #0
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	60fa      	str	r2, [r7, #12]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	4a84      	ldr	r2, [pc, #528]	@ (80035a0 <UART_SetConfig+0x5c4>)
 8003390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003394:	b29b      	uxth	r3, r3
 8003396:	2200      	movs	r2, #0
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033a4:	f7fc ffa4 	bl	80002f0 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	020b      	lsls	r3, r1, #8
 80033ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033be:	0202      	lsls	r2, r0, #8
 80033c0:	6979      	ldr	r1, [r7, #20]
 80033c2:	6849      	ldr	r1, [r1, #4]
 80033c4:	0849      	lsrs	r1, r1, #1
 80033c6:	2000      	movs	r0, #0
 80033c8:	460c      	mov	r4, r1
 80033ca:	4605      	mov	r5, r0
 80033cc:	eb12 0804 	adds.w	r8, r2, r4
 80033d0:	eb43 0905 	adc.w	r9, r3, r5
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	469a      	mov	sl, r3
 80033dc:	4693      	mov	fp, r2
 80033de:	4652      	mov	r2, sl
 80033e0:	465b      	mov	r3, fp
 80033e2:	4640      	mov	r0, r8
 80033e4:	4649      	mov	r1, r9
 80033e6:	f7fc ff83 	bl	80002f0 <__aeabi_uldivmod>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4613      	mov	r3, r2
 80033f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033f8:	d308      	bcc.n	800340c <UART_SetConfig+0x430>
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003400:	d204      	bcs.n	800340c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a3a      	ldr	r2, [r7, #32]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	e0ce      	b.n	80035aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003412:	e0ca      	b.n	80035aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800341c:	d166      	bne.n	80034ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800341e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003422:	2b08      	cmp	r3, #8
 8003424:	d827      	bhi.n	8003476 <UART_SetConfig+0x49a>
 8003426:	a201      	add	r2, pc, #4	@ (adr r2, 800342c <UART_SetConfig+0x450>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	08003451 	.word	0x08003451
 8003430:	08003459 	.word	0x08003459
 8003434:	08003461 	.word	0x08003461
 8003438:	08003477 	.word	0x08003477
 800343c:	08003467 	.word	0x08003467
 8003440:	08003477 	.word	0x08003477
 8003444:	08003477 	.word	0x08003477
 8003448:	08003477 	.word	0x08003477
 800344c:	0800346f 	.word	0x0800346f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003450:	f7fe fe78 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8003454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003456:	e014      	b.n	8003482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003458:	f7fe fe8a 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 800345c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800345e:	e010      	b.n	8003482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003460:	4b4e      	ldr	r3, [pc, #312]	@ (800359c <UART_SetConfig+0x5c0>)
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003464:	e00d      	b.n	8003482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003466:	f7fe fdff 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 800346a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800346c:	e009      	b.n	8003482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003474:	e005      	b.n	8003482 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003480:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8090 	beq.w	80035aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348e:	4a44      	ldr	r2, [pc, #272]	@ (80035a0 <UART_SetConfig+0x5c4>)
 8003490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003494:	461a      	mov	r2, r3
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	fbb3 f3f2 	udiv	r3, r3, r2
 800349c:	005a      	lsls	r2, r3, #1
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	441a      	add	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	d916      	bls.n	80034e4 <UART_SetConfig+0x508>
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034bc:	d212      	bcs.n	80034e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f023 030f 	bic.w	r3, r3, #15
 80034c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	8bfb      	ldrh	r3, [r7, #30]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	8bfa      	ldrh	r2, [r7, #30]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	e062      	b.n	80035aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034ea:	e05e      	b.n	80035aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d828      	bhi.n	8003546 <UART_SetConfig+0x56a>
 80034f4:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <UART_SetConfig+0x520>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7fe fe10 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8003524:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003526:	e014      	b.n	8003552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7fe fe22 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 800352c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800352e:	e010      	b.n	8003552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b1a      	ldr	r3, [pc, #104]	@ (800359c <UART_SetConfig+0x5c0>)
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003534:	e00d      	b.n	8003552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7fe fd97 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 800353a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800353c:	e009      	b.n	8003552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003544:	e005      	b.n	8003552 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003550:	bf00      	nop
    }

    if (pclk != 0U)
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	2b00      	cmp	r3, #0
 8003556:	d028      	beq.n	80035aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	4a10      	ldr	r2, [pc, #64]	@ (80035a0 <UART_SetConfig+0x5c4>)
 800355e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003562:	461a      	mov	r2, r3
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	fbb3 f2f2 	udiv	r2, r3, r2
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	441a      	add	r2, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	2b0f      	cmp	r3, #15
 8003580:	d910      	bls.n	80035a4 <UART_SetConfig+0x5c8>
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003588:	d20c      	bcs.n	80035a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	b29a      	uxth	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
 8003594:	e009      	b.n	80035aa <UART_SetConfig+0x5ce>
 8003596:	bf00      	nop
 8003598:	40008000 	.word	0x40008000
 800359c:	00f42400 	.word	0x00f42400
 80035a0:	080059d4 	.word	0x080059d4
      }
      else
      {
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80035c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3730      	adds	r7, #48	@ 0x30
 80035ce:	46bd      	mov	sp, r7
 80035d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01a      	beq.n	80036ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036d2:	d10a      	bne.n	80036ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
  }
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b098      	sub	sp, #96	@ 0x60
 800371c:	af02      	add	r7, sp, #8
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003728:	f7fd fc26 	bl	8000f78 <HAL_GetTick>
 800372c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b08      	cmp	r3, #8
 800373a:	d12f      	bne.n	800379c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800373c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003744:	2200      	movs	r2, #0
 8003746:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f88e 	bl	800386c <UART_WaitOnFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d022      	beq.n	800379c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800376a:	653b      	str	r3, [r7, #80]	@ 0x50
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003774:	647b      	str	r3, [r7, #68]	@ 0x44
 8003776:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800377a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e6      	bne.n	8003756 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e063      	b.n	8003864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d149      	bne.n	800383e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b2:	2200      	movs	r2, #0
 80037b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f857 	bl	800386c <UART_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d03c      	beq.n	800383e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	623b      	str	r3, [r7, #32]
   return(result);
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80037e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e6      	bne.n	80037c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3308      	adds	r3, #8
 80037fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	e853 3f00 	ldrex	r3, [r3]
 8003804:	60fb      	str	r3, [r7, #12]
   return(result);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3308      	adds	r3, #8
 8003814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003816:	61fa      	str	r2, [r7, #28]
 8003818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	617b      	str	r3, [r7, #20]
   return(result);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e5      	bne.n	80037f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e012      	b.n	8003864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3758      	adds	r7, #88	@ 0x58
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387c:	e04f      	b.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d04b      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fd fb77 	bl	8000f78 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <UART_WaitOnFlagUntilTimeout+0x30>
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e04e      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d037      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b80      	cmp	r3, #128	@ 0x80
 80038b2:	d034      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b40      	cmp	r3, #64	@ 0x40
 80038b8:	d031      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d110      	bne.n	80038ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2208      	movs	r2, #8
 80038ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f95b 	bl	8003b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2208      	movs	r2, #8
 80038da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e029      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038f8:	d111      	bne.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f941 	bl	8003b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e00f      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	bf0c      	ite	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	2300      	movne	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	429a      	cmp	r2, r3
 800393a:	d0a0      	beq.n	800387e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003948:	b480      	push	{r7}
 800394a:	b0a3      	sub	sp, #140	@ 0x8c
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397a:	d10e      	bne.n	800399a <UART_Start_Receive_IT+0x52>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <UART_Start_Receive_IT+0x48>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800398a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800398e:	e02d      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	22ff      	movs	r2, #255	@ 0xff
 8003994:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003998:	e028      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <UART_Start_Receive_IT+0x76>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d104      	bne.n	80039b4 <UART_Start_Receive_IT+0x6c>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	22ff      	movs	r2, #255	@ 0xff
 80039ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80039b2:	e01b      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	227f      	movs	r2, #127	@ 0x7f
 80039b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80039bc:	e016      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039c6:	d10d      	bne.n	80039e4 <UART_Start_Receive_IT+0x9c>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <UART_Start_Receive_IT+0x92>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	227f      	movs	r2, #127	@ 0x7f
 80039d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80039d8:	e008      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	223f      	movs	r2, #63	@ 0x3f
 80039de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80039e2:	e003      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2222      	movs	r2, #34	@ 0x22
 80039f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3308      	adds	r3, #8
 8003a02:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a06:	e853 3f00 	ldrex	r3, [r3]
 8003a0a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003a0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003a20:	673a      	str	r2, [r7, #112]	@ 0x70
 8003a22:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003a26:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8003a2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e3      	bne.n	80039fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a3c:	d14f      	bne.n	8003ade <UART_Start_Receive_IT+0x196>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003a44:	88fa      	ldrh	r2, [r7, #6]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d349      	bcc.n	8003ade <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a52:	d107      	bne.n	8003a64 <UART_Start_Receive_IT+0x11c>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a47      	ldr	r2, [pc, #284]	@ (8003b7c <UART_Start_Receive_IT+0x234>)
 8003a60:	675a      	str	r2, [r3, #116]	@ 0x74
 8003a62:	e002      	b.n	8003a6a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a46      	ldr	r2, [pc, #280]	@ (8003b80 <UART_Start_Receive_IT+0x238>)
 8003a68:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01a      	beq.n	8003aa8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a96:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003a9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e4      	bne.n	8003a72 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3308      	adds	r3, #8
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003ac8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003aca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003ace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e5      	bne.n	8003aa8 <UART_Start_Receive_IT+0x160>
 8003adc:	e046      	b.n	8003b6c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae6:	d107      	bne.n	8003af8 <UART_Start_Receive_IT+0x1b0>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d103      	bne.n	8003af8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a24      	ldr	r2, [pc, #144]	@ (8003b84 <UART_Start_Receive_IT+0x23c>)
 8003af4:	675a      	str	r2, [r3, #116]	@ 0x74
 8003af6:	e002      	b.n	8003afe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a23      	ldr	r2, [pc, #140]	@ (8003b88 <UART_Start_Receive_IT+0x240>)
 8003afc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d019      	beq.n	8003b3a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003b1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b26:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e6      	bne.n	8003b06 <UART_Start_Receive_IT+0x1be>
 8003b38:	e018      	b.n	8003b6c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	613b      	str	r3, [r7, #16]
   return(result);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f043 0320 	orr.w	r3, r3, #32
 8003b4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b58:	623b      	str	r3, [r7, #32]
 8003b5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	69f9      	ldr	r1, [r7, #28]
 8003b5e:	6a3a      	ldr	r2, [r7, #32]
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e6      	bne.n	8003b3a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	378c      	adds	r7, #140	@ 0x8c
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	080043a9 	.word	0x080043a9
 8003b80:	08004045 	.word	0x08004045
 8003b84:	08003e8d 	.word	0x08003e8d
 8003b88:	08003cd5 	.word	0x08003cd5

08003b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b095      	sub	sp, #84	@ 0x54
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e6      	bne.n	8003b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3308      	adds	r3, #8
 8003be8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e3      	bne.n	8003bc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d118      	bne.n	8003c38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f023 0310 	bic.w	r3, r3, #16
 8003c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6979      	ldr	r1, [r7, #20]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	613b      	str	r3, [r7, #16]
   return(result);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e6      	bne.n	8003c06 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c4c:	bf00      	nop
 8003c4e:	3754      	adds	r7, #84	@ 0x54
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff f99e 	bl	8002fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6979      	ldr	r1, [r7, #20]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e6      	bne.n	8003c84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff f969 	bl	8002f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cca:	bf00      	nop
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b09c      	sub	sp, #112	@ 0x70
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003ce2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cec:	2b22      	cmp	r3, #34	@ 0x22
 8003cee:	f040 80be 	bne.w	8003e6e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003d00:	b2d9      	uxtb	r1, r3
 8003d02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 80a1 	bne.w	8003e7e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e6      	bne.n	8003d3c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3308      	adds	r3, #8
 8003d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003d8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a33      	ldr	r2, [pc, #204]	@ (8003e88 <UART_RxISR_8BIT+0x1b4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d01f      	beq.n	8003e00 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d018      	beq.n	8003e00 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	623b      	str	r3, [r7, #32]
   return(result);
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003de2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003df4:	e841 2300 	strex	r3, r2, [r1]
 8003df8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e6      	bne.n	8003dce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d12e      	bne.n	8003e66 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0310 	bic.w	r3, r3, #16
 8003e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	69b9      	ldr	r1, [r7, #24]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	617b      	str	r3, [r7, #20]
   return(result);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e6      	bne.n	8003e0e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d103      	bne.n	8003e56 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2210      	movs	r2, #16
 8003e54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff f8b0 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e64:	e00b      	b.n	8003e7e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fc fbba 	bl	80005e0 <HAL_UART_RxCpltCallback>
}
 8003e6c:	e007      	b.n	8003e7e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0208 	orr.w	r2, r2, #8
 8003e7c:	619a      	str	r2, [r3, #24]
}
 8003e7e:	bf00      	nop
 8003e80:	3770      	adds	r7, #112	@ 0x70
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40008000 	.word	0x40008000

08003e8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b09c      	sub	sp, #112	@ 0x70
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003e9a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ea4:	2b22      	cmp	r3, #34	@ 0x22
 8003ea6:	f040 80be 	bne.w	8004026 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003eba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003ebe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ec8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ece:	1c9a      	adds	r2, r3, #2
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 80a1 	bne.w	8004036 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f08:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f12:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f14:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003f18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e6      	bne.n	8003ef4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3308      	adds	r3, #8
 8003f44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f46:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e5      	bne.n	8003f26 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a33      	ldr	r2, [pc, #204]	@ (8004040 <UART_RxISR_16BIT+0x1b4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d01f      	beq.n	8003fb8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d018      	beq.n	8003fb8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fa6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e6      	bne.n	8003f86 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d12e      	bne.n	800401e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f023 0310 	bic.w	r3, r3, #16
 8003fda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6979      	ldr	r1, [r7, #20]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e6      	bne.n	8003fc6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b10      	cmp	r3, #16
 8004004:	d103      	bne.n	800400e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2210      	movs	r2, #16
 800400c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fe ffd4 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800401c:	e00b      	b.n	8004036 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc fade 	bl	80005e0 <HAL_UART_RxCpltCallback>
}
 8004024:	e007      	b.n	8004036 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0208 	orr.w	r2, r2, #8
 8004034:	619a      	str	r2, [r3, #24]
}
 8004036:	bf00      	nop
 8004038:	3770      	adds	r7, #112	@ 0x70
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40008000 	.word	0x40008000

08004044 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b0ac      	sub	sp, #176	@ 0xb0
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004052:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800407a:	2b22      	cmp	r3, #34	@ 0x22
 800407c:	f040 8183 	bne.w	8004386 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004086:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800408a:	e126      	b.n	80042da <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004096:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800409a:	b2d9      	uxtb	r1, r3
 800409c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a6:	400a      	ands	r2, r1
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80040d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d053      	beq.n	8004186 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d011      	beq.n	800410e <UART_RxISR_8BIT_FIFOEN+0xca>
 80040ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2201      	movs	r2, #1
 80040fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004104:	f043 0201 	orr.w	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800410e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d011      	beq.n	800413e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800411a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00b      	beq.n	800413e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2202      	movs	r2, #2
 800412c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004134:	f043 0204 	orr.w	r2, r3, #4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800413e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d011      	beq.n	800416e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800414a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2204      	movs	r2, #4
 800415c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004164:	f043 0202 	orr.w	r2, r3, #2
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7fe ff19 	bl	8002fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 80a3 	bne.w	80042da <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80041a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041b8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80041bc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80041c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e4      	bne.n	8004194 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80041da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041f2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80041f4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80041f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004200:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e1      	bne.n	80041ca <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a60      	ldr	r2, [pc, #384]	@ (80043a0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d021      	beq.n	8004268 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01a      	beq.n	8004268 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004242:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004246:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004254:	657b      	str	r3, [r7, #84]	@ 0x54
 8004256:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800425a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e4      	bne.n	8004232 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d130      	bne.n	80042d2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	f023 0310 	bic.w	r3, r3, #16
 800428a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004298:	643b      	str	r3, [r7, #64]	@ 0x40
 800429a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800429e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e4      	bne.n	8004276 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d103      	bne.n	80042c2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2210      	movs	r2, #16
 80042c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042c8:	4619      	mov	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fe fe7a 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80042d0:	e00e      	b.n	80042f0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fc f984 	bl	80005e0 <HAL_UART_RxCpltCallback>
        break;
 80042d8:	e00a      	b.n	80042f0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042da:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d006      	beq.n	80042f0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80042e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f47f aece 	bne.w	800408c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80042f6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80042fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d049      	beq.n	8004396 <UART_RxISR_8BIT_FIFOEN+0x352>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004308:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800430c:	429a      	cmp	r2, r3
 800430e:	d242      	bcs.n	8004396 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3308      	adds	r3, #8
 8004316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004326:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3308      	adds	r3, #8
 8004330:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004334:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800433a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e3      	bne.n	8004310 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a16      	ldr	r2, [pc, #88]	@ (80043a4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800434c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	60bb      	str	r3, [r7, #8]
   return(result);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f043 0320 	orr.w	r3, r3, #32
 8004362:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6979      	ldr	r1, [r7, #20]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	613b      	str	r3, [r7, #16]
   return(result);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e4      	bne.n	800434e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004384:	e007      	b.n	8004396 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699a      	ldr	r2, [r3, #24]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0208 	orr.w	r2, r2, #8
 8004394:	619a      	str	r2, [r3, #24]
}
 8004396:	bf00      	nop
 8004398:	37b0      	adds	r7, #176	@ 0xb0
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40008000 	.word	0x40008000
 80043a4:	08003cd5 	.word	0x08003cd5

080043a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b0ae      	sub	sp, #184	@ 0xb8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80043b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043de:	2b22      	cmp	r3, #34	@ 0x22
 80043e0:	f040 8187 	bne.w	80046f2 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80043ea:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80043ee:	e12a      	b.n	8004646 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004402:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8004406:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800440a:	4013      	ands	r3, r2
 800440c:	b29a      	uxth	r2, r3
 800440e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004412:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004418:	1c9a      	adds	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800443a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	2b00      	cmp	r3, #0
 8004444:	d053      	beq.n	80044ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004446:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d011      	beq.n	8004476 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2201      	movs	r2, #1
 8004464:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446c:	f043 0201 	orr.w	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004476:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d011      	beq.n	80044a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2202      	movs	r2, #2
 8004494:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449c:	f043 0204 	orr.w	r2, r3, #4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d011      	beq.n	80044d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80044b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2204      	movs	r2, #4
 80044c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044cc:	f043 0202 	orr.w	r2, r3, #2
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d006      	beq.n	80044ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fe fd65 	bl	8002fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 80a5 	bne.w	8004646 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800450a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800450c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004510:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800451e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004522:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004526:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e2      	bne.n	80044fc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3308      	adds	r3, #8
 800453c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3308      	adds	r3, #8
 800455a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800455e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004560:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004564:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800456c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e1      	bne.n	8004536 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a60      	ldr	r2, [pc, #384]	@ (800470c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d021      	beq.n	80045d4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d01a      	beq.n	80045d4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045c2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e4      	bne.n	800459e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d130      	bne.n	800463e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f2:	f023 0310 	bic.w	r3, r3, #16
 80045f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004604:	647b      	str	r3, [r7, #68]	@ 0x44
 8004606:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800460a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e4      	bne.n	80045e2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b10      	cmp	r3, #16
 8004624:	d103      	bne.n	800462e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2210      	movs	r2, #16
 800462c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004634:	4619      	mov	r1, r3
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fe fcc4 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800463c:	e00e      	b.n	800465c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fb ffce 	bl	80005e0 <HAL_UART_RxCpltCallback>
        break;
 8004644:	e00a      	b.n	800465c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004646:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800464a:	2b00      	cmp	r3, #0
 800464c:	d006      	beq.n	800465c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800464e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	f47f aeca 	bne.w	80043f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004662:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004666:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800466a:	2b00      	cmp	r3, #0
 800466c:	d049      	beq.n	8004702 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004674:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004678:	429a      	cmp	r2, r3
 800467a:	d242      	bcs.n	8004702 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3308      	adds	r3, #8
 8004682:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	623b      	str	r3, [r7, #32]
   return(result);
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004692:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3308      	adds	r3, #8
 800469c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80046a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80046a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e3      	bne.n	800467c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a16      	ldr	r2, [pc, #88]	@ (8004710 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80046b8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f043 0320 	orr.w	r3, r3, #32
 80046ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	69b9      	ldr	r1, [r7, #24]
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e4      	bne.n	80046ba <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046f0:	e007      	b.n	8004702 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699a      	ldr	r2, [r3, #24]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0208 	orr.w	r2, r2, #8
 8004700:	619a      	str	r2, [r3, #24]
}
 8004702:	bf00      	nop
 8004704:	37b8      	adds	r7, #184	@ 0xb8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40008000 	.word	0x40008000
 8004710:	08003e8d 	.word	0x08003e8d

08004714 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_UARTEx_DisableFifoMode+0x16>
 8004762:	2302      	movs	r3, #2
 8004764:	e027      	b.n	80047b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2224      	movs	r2, #36	@ 0x24
 8004772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004794:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e02d      	b.n	8004836 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2224      	movs	r2, #36	@ 0x24
 80047e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f850 	bl	80048bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004852:	2302      	movs	r3, #2
 8004854:	e02d      	b.n	80048b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2224      	movs	r2, #36	@ 0x24
 8004862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0201 	bic.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f812 	bl	80048bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d108      	bne.n	80048de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048dc:	e031      	b.n	8004942 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048de:	2308      	movs	r3, #8
 80048e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048e2:	2308      	movs	r3, #8
 80048e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	0e5b      	lsrs	r3, r3, #25
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	0f5b      	lsrs	r3, r3, #29
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004906:	7bbb      	ldrb	r3, [r7, #14]
 8004908:	7b3a      	ldrb	r2, [r7, #12]
 800490a:	4911      	ldr	r1, [pc, #68]	@ (8004950 <UARTEx_SetNbDataToProcess+0x94>)
 800490c:	5c8a      	ldrb	r2, [r1, r2]
 800490e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004912:	7b3a      	ldrb	r2, [r7, #12]
 8004914:	490f      	ldr	r1, [pc, #60]	@ (8004954 <UARTEx_SetNbDataToProcess+0x98>)
 8004916:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004918:	fb93 f3f2 	sdiv	r3, r3, r2
 800491c:	b29a      	uxth	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	7b7a      	ldrb	r2, [r7, #13]
 8004928:	4909      	ldr	r1, [pc, #36]	@ (8004950 <UARTEx_SetNbDataToProcess+0x94>)
 800492a:	5c8a      	ldrb	r2, [r1, r2]
 800492c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004930:	7b7a      	ldrb	r2, [r7, #13]
 8004932:	4908      	ldr	r1, [pc, #32]	@ (8004954 <UARTEx_SetNbDataToProcess+0x98>)
 8004934:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004936:	fb93 f3f2 	sdiv	r3, r3, r2
 800493a:	b29a      	uxth	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	080059ec 	.word	0x080059ec
 8004954:	080059f4 	.word	0x080059f4

08004958 <std>:
 8004958:	2300      	movs	r3, #0
 800495a:	b510      	push	{r4, lr}
 800495c:	4604      	mov	r4, r0
 800495e:	e9c0 3300 	strd	r3, r3, [r0]
 8004962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004966:	6083      	str	r3, [r0, #8]
 8004968:	8181      	strh	r1, [r0, #12]
 800496a:	6643      	str	r3, [r0, #100]	@ 0x64
 800496c:	81c2      	strh	r2, [r0, #14]
 800496e:	6183      	str	r3, [r0, #24]
 8004970:	4619      	mov	r1, r3
 8004972:	2208      	movs	r2, #8
 8004974:	305c      	adds	r0, #92	@ 0x5c
 8004976:	f000 f8f4 	bl	8004b62 <memset>
 800497a:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <std+0x58>)
 800497c:	6263      	str	r3, [r4, #36]	@ 0x24
 800497e:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <std+0x5c>)
 8004980:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004982:	4b0d      	ldr	r3, [pc, #52]	@ (80049b8 <std+0x60>)
 8004984:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004986:	4b0d      	ldr	r3, [pc, #52]	@ (80049bc <std+0x64>)
 8004988:	6323      	str	r3, [r4, #48]	@ 0x30
 800498a:	4b0d      	ldr	r3, [pc, #52]	@ (80049c0 <std+0x68>)
 800498c:	6224      	str	r4, [r4, #32]
 800498e:	429c      	cmp	r4, r3
 8004990:	d006      	beq.n	80049a0 <std+0x48>
 8004992:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004996:	4294      	cmp	r4, r2
 8004998:	d002      	beq.n	80049a0 <std+0x48>
 800499a:	33d0      	adds	r3, #208	@ 0xd0
 800499c:	429c      	cmp	r4, r3
 800499e:	d105      	bne.n	80049ac <std+0x54>
 80049a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80049a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a8:	f000 b9b0 	b.w	8004d0c <__retarget_lock_init_recursive>
 80049ac:	bd10      	pop	{r4, pc}
 80049ae:	bf00      	nop
 80049b0:	08004add 	.word	0x08004add
 80049b4:	08004aff 	.word	0x08004aff
 80049b8:	08004b37 	.word	0x08004b37
 80049bc:	08004b5b 	.word	0x08004b5b
 80049c0:	200001b0 	.word	0x200001b0

080049c4 <stdio_exit_handler>:
 80049c4:	4a02      	ldr	r2, [pc, #8]	@ (80049d0 <stdio_exit_handler+0xc>)
 80049c6:	4903      	ldr	r1, [pc, #12]	@ (80049d4 <stdio_exit_handler+0x10>)
 80049c8:	4803      	ldr	r0, [pc, #12]	@ (80049d8 <stdio_exit_handler+0x14>)
 80049ca:	f000 b869 	b.w	8004aa0 <_fwalk_sglue>
 80049ce:	bf00      	nop
 80049d0:	2000000c 	.word	0x2000000c
 80049d4:	08005059 	.word	0x08005059
 80049d8:	2000001c 	.word	0x2000001c

080049dc <cleanup_stdio>:
 80049dc:	6841      	ldr	r1, [r0, #4]
 80049de:	4b0c      	ldr	r3, [pc, #48]	@ (8004a10 <cleanup_stdio+0x34>)
 80049e0:	4299      	cmp	r1, r3
 80049e2:	b510      	push	{r4, lr}
 80049e4:	4604      	mov	r4, r0
 80049e6:	d001      	beq.n	80049ec <cleanup_stdio+0x10>
 80049e8:	f000 fb36 	bl	8005058 <_fflush_r>
 80049ec:	68a1      	ldr	r1, [r4, #8]
 80049ee:	4b09      	ldr	r3, [pc, #36]	@ (8004a14 <cleanup_stdio+0x38>)
 80049f0:	4299      	cmp	r1, r3
 80049f2:	d002      	beq.n	80049fa <cleanup_stdio+0x1e>
 80049f4:	4620      	mov	r0, r4
 80049f6:	f000 fb2f 	bl	8005058 <_fflush_r>
 80049fa:	68e1      	ldr	r1, [r4, #12]
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <cleanup_stdio+0x3c>)
 80049fe:	4299      	cmp	r1, r3
 8004a00:	d004      	beq.n	8004a0c <cleanup_stdio+0x30>
 8004a02:	4620      	mov	r0, r4
 8004a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a08:	f000 bb26 	b.w	8005058 <_fflush_r>
 8004a0c:	bd10      	pop	{r4, pc}
 8004a0e:	bf00      	nop
 8004a10:	200001b0 	.word	0x200001b0
 8004a14:	20000218 	.word	0x20000218
 8004a18:	20000280 	.word	0x20000280

08004a1c <global_stdio_init.part.0>:
 8004a1c:	b510      	push	{r4, lr}
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <global_stdio_init.part.0+0x30>)
 8004a20:	4c0b      	ldr	r4, [pc, #44]	@ (8004a50 <global_stdio_init.part.0+0x34>)
 8004a22:	4a0c      	ldr	r2, [pc, #48]	@ (8004a54 <global_stdio_init.part.0+0x38>)
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	4620      	mov	r0, r4
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2104      	movs	r1, #4
 8004a2c:	f7ff ff94 	bl	8004958 <std>
 8004a30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a34:	2201      	movs	r2, #1
 8004a36:	2109      	movs	r1, #9
 8004a38:	f7ff ff8e 	bl	8004958 <std>
 8004a3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a40:	2202      	movs	r2, #2
 8004a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a46:	2112      	movs	r1, #18
 8004a48:	f7ff bf86 	b.w	8004958 <std>
 8004a4c:	200002e8 	.word	0x200002e8
 8004a50:	200001b0 	.word	0x200001b0
 8004a54:	080049c5 	.word	0x080049c5

08004a58 <__sfp_lock_acquire>:
 8004a58:	4801      	ldr	r0, [pc, #4]	@ (8004a60 <__sfp_lock_acquire+0x8>)
 8004a5a:	f000 b958 	b.w	8004d0e <__retarget_lock_acquire_recursive>
 8004a5e:	bf00      	nop
 8004a60:	200002f1 	.word	0x200002f1

08004a64 <__sfp_lock_release>:
 8004a64:	4801      	ldr	r0, [pc, #4]	@ (8004a6c <__sfp_lock_release+0x8>)
 8004a66:	f000 b953 	b.w	8004d10 <__retarget_lock_release_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	200002f1 	.word	0x200002f1

08004a70 <__sinit>:
 8004a70:	b510      	push	{r4, lr}
 8004a72:	4604      	mov	r4, r0
 8004a74:	f7ff fff0 	bl	8004a58 <__sfp_lock_acquire>
 8004a78:	6a23      	ldr	r3, [r4, #32]
 8004a7a:	b11b      	cbz	r3, 8004a84 <__sinit+0x14>
 8004a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a80:	f7ff bff0 	b.w	8004a64 <__sfp_lock_release>
 8004a84:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <__sinit+0x28>)
 8004a86:	6223      	str	r3, [r4, #32]
 8004a88:	4b04      	ldr	r3, [pc, #16]	@ (8004a9c <__sinit+0x2c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f5      	bne.n	8004a7c <__sinit+0xc>
 8004a90:	f7ff ffc4 	bl	8004a1c <global_stdio_init.part.0>
 8004a94:	e7f2      	b.n	8004a7c <__sinit+0xc>
 8004a96:	bf00      	nop
 8004a98:	080049dd 	.word	0x080049dd
 8004a9c:	200002e8 	.word	0x200002e8

08004aa0 <_fwalk_sglue>:
 8004aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa4:	4607      	mov	r7, r0
 8004aa6:	4688      	mov	r8, r1
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	2600      	movs	r6, #0
 8004aac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ab0:	f1b9 0901 	subs.w	r9, r9, #1
 8004ab4:	d505      	bpl.n	8004ac2 <_fwalk_sglue+0x22>
 8004ab6:	6824      	ldr	r4, [r4, #0]
 8004ab8:	2c00      	cmp	r4, #0
 8004aba:	d1f7      	bne.n	8004aac <_fwalk_sglue+0xc>
 8004abc:	4630      	mov	r0, r6
 8004abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac2:	89ab      	ldrh	r3, [r5, #12]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d907      	bls.n	8004ad8 <_fwalk_sglue+0x38>
 8004ac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004acc:	3301      	adds	r3, #1
 8004ace:	d003      	beq.n	8004ad8 <_fwalk_sglue+0x38>
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	47c0      	blx	r8
 8004ad6:	4306      	orrs	r6, r0
 8004ad8:	3568      	adds	r5, #104	@ 0x68
 8004ada:	e7e9      	b.n	8004ab0 <_fwalk_sglue+0x10>

08004adc <__sread>:
 8004adc:	b510      	push	{r4, lr}
 8004ade:	460c      	mov	r4, r1
 8004ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae4:	f000 f8c4 	bl	8004c70 <_read_r>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	bfab      	itete	ge
 8004aec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004aee:	89a3      	ldrhlt	r3, [r4, #12]
 8004af0:	181b      	addge	r3, r3, r0
 8004af2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004af6:	bfac      	ite	ge
 8004af8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004afa:	81a3      	strhlt	r3, [r4, #12]
 8004afc:	bd10      	pop	{r4, pc}

08004afe <__swrite>:
 8004afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b02:	461f      	mov	r7, r3
 8004b04:	898b      	ldrh	r3, [r1, #12]
 8004b06:	05db      	lsls	r3, r3, #23
 8004b08:	4605      	mov	r5, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	4616      	mov	r6, r2
 8004b0e:	d505      	bpl.n	8004b1c <__swrite+0x1e>
 8004b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b14:	2302      	movs	r3, #2
 8004b16:	2200      	movs	r2, #0
 8004b18:	f000 f898 	bl	8004c4c <_lseek_r>
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b26:	81a3      	strh	r3, [r4, #12]
 8004b28:	4632      	mov	r2, r6
 8004b2a:	463b      	mov	r3, r7
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b32:	f000 b8af 	b.w	8004c94 <_write_r>

08004b36 <__sseek>:
 8004b36:	b510      	push	{r4, lr}
 8004b38:	460c      	mov	r4, r1
 8004b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b3e:	f000 f885 	bl	8004c4c <_lseek_r>
 8004b42:	1c43      	adds	r3, r0, #1
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	bf15      	itete	ne
 8004b48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b52:	81a3      	strheq	r3, [r4, #12]
 8004b54:	bf18      	it	ne
 8004b56:	81a3      	strhne	r3, [r4, #12]
 8004b58:	bd10      	pop	{r4, pc}

08004b5a <__sclose>:
 8004b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b5e:	f000 b865 	b.w	8004c2c <_close_r>

08004b62 <memset>:
 8004b62:	4402      	add	r2, r0
 8004b64:	4603      	mov	r3, r0
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d100      	bne.n	8004b6c <memset+0xa>
 8004b6a:	4770      	bx	lr
 8004b6c:	f803 1b01 	strb.w	r1, [r3], #1
 8004b70:	e7f9      	b.n	8004b66 <memset+0x4>
	...

08004b74 <strtok>:
 8004b74:	4b16      	ldr	r3, [pc, #88]	@ (8004bd0 <strtok+0x5c>)
 8004b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7a:	681f      	ldr	r7, [r3, #0]
 8004b7c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004b7e:	4605      	mov	r5, r0
 8004b80:	460e      	mov	r6, r1
 8004b82:	b9ec      	cbnz	r4, 8004bc0 <strtok+0x4c>
 8004b84:	2050      	movs	r0, #80	@ 0x50
 8004b86:	f000 f92d 	bl	8004de4 <malloc>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	6478      	str	r0, [r7, #68]	@ 0x44
 8004b8e:	b920      	cbnz	r0, 8004b9a <strtok+0x26>
 8004b90:	4b10      	ldr	r3, [pc, #64]	@ (8004bd4 <strtok+0x60>)
 8004b92:	4811      	ldr	r0, [pc, #68]	@ (8004bd8 <strtok+0x64>)
 8004b94:	215b      	movs	r1, #91	@ 0x5b
 8004b96:	f000 f8bd 	bl	8004d14 <__assert_func>
 8004b9a:	e9c0 4400 	strd	r4, r4, [r0]
 8004b9e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004ba2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004ba6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004baa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004bae:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004bb2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004bb6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004bba:	6184      	str	r4, [r0, #24]
 8004bbc:	7704      	strb	r4, [r0, #28]
 8004bbe:	6244      	str	r4, [r0, #36]	@ 0x24
 8004bc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bc2:	4631      	mov	r1, r6
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bcc:	f000 b806 	b.w	8004bdc <__strtok_r>
 8004bd0:	20000018 	.word	0x20000018
 8004bd4:	080059fc 	.word	0x080059fc
 8004bd8:	08005a13 	.word	0x08005a13

08004bdc <__strtok_r>:
 8004bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bde:	4604      	mov	r4, r0
 8004be0:	b908      	cbnz	r0, 8004be6 <__strtok_r+0xa>
 8004be2:	6814      	ldr	r4, [r2, #0]
 8004be4:	b144      	cbz	r4, 8004bf8 <__strtok_r+0x1c>
 8004be6:	4620      	mov	r0, r4
 8004be8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004bec:	460f      	mov	r7, r1
 8004bee:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004bf2:	b91e      	cbnz	r6, 8004bfc <__strtok_r+0x20>
 8004bf4:	b965      	cbnz	r5, 8004c10 <__strtok_r+0x34>
 8004bf6:	6015      	str	r5, [r2, #0]
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	e005      	b.n	8004c08 <__strtok_r+0x2c>
 8004bfc:	42b5      	cmp	r5, r6
 8004bfe:	d1f6      	bne.n	8004bee <__strtok_r+0x12>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f0      	bne.n	8004be6 <__strtok_r+0xa>
 8004c04:	6014      	str	r4, [r2, #0]
 8004c06:	7003      	strb	r3, [r0, #0]
 8004c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c0a:	461c      	mov	r4, r3
 8004c0c:	e00c      	b.n	8004c28 <__strtok_r+0x4c>
 8004c0e:	b915      	cbnz	r5, 8004c16 <__strtok_r+0x3a>
 8004c10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004c14:	460e      	mov	r6, r1
 8004c16:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004c1a:	42ab      	cmp	r3, r5
 8004c1c:	d1f7      	bne.n	8004c0e <__strtok_r+0x32>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f3      	beq.n	8004c0a <__strtok_r+0x2e>
 8004c22:	2300      	movs	r3, #0
 8004c24:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004c28:	6014      	str	r4, [r2, #0]
 8004c2a:	e7ed      	b.n	8004c08 <__strtok_r+0x2c>

08004c2c <_close_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4d06      	ldr	r5, [pc, #24]	@ (8004c48 <_close_r+0x1c>)
 8004c30:	2300      	movs	r3, #0
 8004c32:	4604      	mov	r4, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	602b      	str	r3, [r5, #0]
 8004c38:	f7fb ff28 	bl	8000a8c <_close>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_close_r+0x1a>
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_close_r+0x1a>
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	200002ec 	.word	0x200002ec

08004c4c <_lseek_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4d07      	ldr	r5, [pc, #28]	@ (8004c6c <_lseek_r+0x20>)
 8004c50:	4604      	mov	r4, r0
 8004c52:	4608      	mov	r0, r1
 8004c54:	4611      	mov	r1, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	602a      	str	r2, [r5, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f7fb ff3d 	bl	8000ada <_lseek>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_lseek_r+0x1e>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_lseek_r+0x1e>
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	200002ec 	.word	0x200002ec

08004c70 <_read_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4d07      	ldr	r5, [pc, #28]	@ (8004c90 <_read_r+0x20>)
 8004c74:	4604      	mov	r4, r0
 8004c76:	4608      	mov	r0, r1
 8004c78:	4611      	mov	r1, r2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	602a      	str	r2, [r5, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f7fb fecb 	bl	8000a1a <_read>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_read_r+0x1e>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_read_r+0x1e>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	200002ec 	.word	0x200002ec

08004c94 <_write_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4d07      	ldr	r5, [pc, #28]	@ (8004cb4 <_write_r+0x20>)
 8004c98:	4604      	mov	r4, r0
 8004c9a:	4608      	mov	r0, r1
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	602a      	str	r2, [r5, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f7fb fed6 	bl	8000a54 <_write>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	d102      	bne.n	8004cb2 <_write_r+0x1e>
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	b103      	cbz	r3, 8004cb2 <_write_r+0x1e>
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
 8004cb4:	200002ec 	.word	0x200002ec

08004cb8 <__errno>:
 8004cb8:	4b01      	ldr	r3, [pc, #4]	@ (8004cc0 <__errno+0x8>)
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20000018 	.word	0x20000018

08004cc4 <__libc_init_array>:
 8004cc4:	b570      	push	{r4, r5, r6, lr}
 8004cc6:	4d0d      	ldr	r5, [pc, #52]	@ (8004cfc <__libc_init_array+0x38>)
 8004cc8:	4c0d      	ldr	r4, [pc, #52]	@ (8004d00 <__libc_init_array+0x3c>)
 8004cca:	1b64      	subs	r4, r4, r5
 8004ccc:	10a4      	asrs	r4, r4, #2
 8004cce:	2600      	movs	r6, #0
 8004cd0:	42a6      	cmp	r6, r4
 8004cd2:	d109      	bne.n	8004ce8 <__libc_init_array+0x24>
 8004cd4:	4d0b      	ldr	r5, [pc, #44]	@ (8004d04 <__libc_init_array+0x40>)
 8004cd6:	4c0c      	ldr	r4, [pc, #48]	@ (8004d08 <__libc_init_array+0x44>)
 8004cd8:	f000 fe3a 	bl	8005950 <_init>
 8004cdc:	1b64      	subs	r4, r4, r5
 8004cde:	10a4      	asrs	r4, r4, #2
 8004ce0:	2600      	movs	r6, #0
 8004ce2:	42a6      	cmp	r6, r4
 8004ce4:	d105      	bne.n	8004cf2 <__libc_init_array+0x2e>
 8004ce6:	bd70      	pop	{r4, r5, r6, pc}
 8004ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cec:	4798      	blx	r3
 8004cee:	3601      	adds	r6, #1
 8004cf0:	e7ee      	b.n	8004cd0 <__libc_init_array+0xc>
 8004cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf6:	4798      	blx	r3
 8004cf8:	3601      	adds	r6, #1
 8004cfa:	e7f2      	b.n	8004ce2 <__libc_init_array+0x1e>
 8004cfc:	08005ae4 	.word	0x08005ae4
 8004d00:	08005ae4 	.word	0x08005ae4
 8004d04:	08005ae4 	.word	0x08005ae4
 8004d08:	08005ae8 	.word	0x08005ae8

08004d0c <__retarget_lock_init_recursive>:
 8004d0c:	4770      	bx	lr

08004d0e <__retarget_lock_acquire_recursive>:
 8004d0e:	4770      	bx	lr

08004d10 <__retarget_lock_release_recursive>:
 8004d10:	4770      	bx	lr
	...

08004d14 <__assert_func>:
 8004d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d16:	4614      	mov	r4, r2
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4b09      	ldr	r3, [pc, #36]	@ (8004d40 <__assert_func+0x2c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4605      	mov	r5, r0
 8004d20:	68d8      	ldr	r0, [r3, #12]
 8004d22:	b954      	cbnz	r4, 8004d3a <__assert_func+0x26>
 8004d24:	4b07      	ldr	r3, [pc, #28]	@ (8004d44 <__assert_func+0x30>)
 8004d26:	461c      	mov	r4, r3
 8004d28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d2c:	9100      	str	r1, [sp, #0]
 8004d2e:	462b      	mov	r3, r5
 8004d30:	4905      	ldr	r1, [pc, #20]	@ (8004d48 <__assert_func+0x34>)
 8004d32:	f000 f9b9 	bl	80050a8 <fiprintf>
 8004d36:	f000 f9d9 	bl	80050ec <abort>
 8004d3a:	4b04      	ldr	r3, [pc, #16]	@ (8004d4c <__assert_func+0x38>)
 8004d3c:	e7f4      	b.n	8004d28 <__assert_func+0x14>
 8004d3e:	bf00      	nop
 8004d40:	20000018 	.word	0x20000018
 8004d44:	08005aa8 	.word	0x08005aa8
 8004d48:	08005a7a 	.word	0x08005a7a
 8004d4c:	08005a6d 	.word	0x08005a6d

08004d50 <_free_r>:
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	4605      	mov	r5, r0
 8004d54:	2900      	cmp	r1, #0
 8004d56:	d041      	beq.n	8004ddc <_free_r+0x8c>
 8004d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d5c:	1f0c      	subs	r4, r1, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bfb8      	it	lt
 8004d62:	18e4      	addlt	r4, r4, r3
 8004d64:	f000 f8e8 	bl	8004f38 <__malloc_lock>
 8004d68:	4a1d      	ldr	r2, [pc, #116]	@ (8004de0 <_free_r+0x90>)
 8004d6a:	6813      	ldr	r3, [r2, #0]
 8004d6c:	b933      	cbnz	r3, 8004d7c <_free_r+0x2c>
 8004d6e:	6063      	str	r3, [r4, #4]
 8004d70:	6014      	str	r4, [r2, #0]
 8004d72:	4628      	mov	r0, r5
 8004d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d78:	f000 b8e4 	b.w	8004f44 <__malloc_unlock>
 8004d7c:	42a3      	cmp	r3, r4
 8004d7e:	d908      	bls.n	8004d92 <_free_r+0x42>
 8004d80:	6820      	ldr	r0, [r4, #0]
 8004d82:	1821      	adds	r1, r4, r0
 8004d84:	428b      	cmp	r3, r1
 8004d86:	bf01      	itttt	eq
 8004d88:	6819      	ldreq	r1, [r3, #0]
 8004d8a:	685b      	ldreq	r3, [r3, #4]
 8004d8c:	1809      	addeq	r1, r1, r0
 8004d8e:	6021      	streq	r1, [r4, #0]
 8004d90:	e7ed      	b.n	8004d6e <_free_r+0x1e>
 8004d92:	461a      	mov	r2, r3
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	b10b      	cbz	r3, 8004d9c <_free_r+0x4c>
 8004d98:	42a3      	cmp	r3, r4
 8004d9a:	d9fa      	bls.n	8004d92 <_free_r+0x42>
 8004d9c:	6811      	ldr	r1, [r2, #0]
 8004d9e:	1850      	adds	r0, r2, r1
 8004da0:	42a0      	cmp	r0, r4
 8004da2:	d10b      	bne.n	8004dbc <_free_r+0x6c>
 8004da4:	6820      	ldr	r0, [r4, #0]
 8004da6:	4401      	add	r1, r0
 8004da8:	1850      	adds	r0, r2, r1
 8004daa:	4283      	cmp	r3, r0
 8004dac:	6011      	str	r1, [r2, #0]
 8004dae:	d1e0      	bne.n	8004d72 <_free_r+0x22>
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	6053      	str	r3, [r2, #4]
 8004db6:	4408      	add	r0, r1
 8004db8:	6010      	str	r0, [r2, #0]
 8004dba:	e7da      	b.n	8004d72 <_free_r+0x22>
 8004dbc:	d902      	bls.n	8004dc4 <_free_r+0x74>
 8004dbe:	230c      	movs	r3, #12
 8004dc0:	602b      	str	r3, [r5, #0]
 8004dc2:	e7d6      	b.n	8004d72 <_free_r+0x22>
 8004dc4:	6820      	ldr	r0, [r4, #0]
 8004dc6:	1821      	adds	r1, r4, r0
 8004dc8:	428b      	cmp	r3, r1
 8004dca:	bf04      	itt	eq
 8004dcc:	6819      	ldreq	r1, [r3, #0]
 8004dce:	685b      	ldreq	r3, [r3, #4]
 8004dd0:	6063      	str	r3, [r4, #4]
 8004dd2:	bf04      	itt	eq
 8004dd4:	1809      	addeq	r1, r1, r0
 8004dd6:	6021      	streq	r1, [r4, #0]
 8004dd8:	6054      	str	r4, [r2, #4]
 8004dda:	e7ca      	b.n	8004d72 <_free_r+0x22>
 8004ddc:	bd38      	pop	{r3, r4, r5, pc}
 8004dde:	bf00      	nop
 8004de0:	200002f8 	.word	0x200002f8

08004de4 <malloc>:
 8004de4:	4b02      	ldr	r3, [pc, #8]	@ (8004df0 <malloc+0xc>)
 8004de6:	4601      	mov	r1, r0
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	f000 b825 	b.w	8004e38 <_malloc_r>
 8004dee:	bf00      	nop
 8004df0:	20000018 	.word	0x20000018

08004df4 <sbrk_aligned>:
 8004df4:	b570      	push	{r4, r5, r6, lr}
 8004df6:	4e0f      	ldr	r6, [pc, #60]	@ (8004e34 <sbrk_aligned+0x40>)
 8004df8:	460c      	mov	r4, r1
 8004dfa:	6831      	ldr	r1, [r6, #0]
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	b911      	cbnz	r1, 8004e06 <sbrk_aligned+0x12>
 8004e00:	f000 f964 	bl	80050cc <_sbrk_r>
 8004e04:	6030      	str	r0, [r6, #0]
 8004e06:	4621      	mov	r1, r4
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 f95f 	bl	80050cc <_sbrk_r>
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	d103      	bne.n	8004e1a <sbrk_aligned+0x26>
 8004e12:	f04f 34ff 	mov.w	r4, #4294967295
 8004e16:	4620      	mov	r0, r4
 8004e18:	bd70      	pop	{r4, r5, r6, pc}
 8004e1a:	1cc4      	adds	r4, r0, #3
 8004e1c:	f024 0403 	bic.w	r4, r4, #3
 8004e20:	42a0      	cmp	r0, r4
 8004e22:	d0f8      	beq.n	8004e16 <sbrk_aligned+0x22>
 8004e24:	1a21      	subs	r1, r4, r0
 8004e26:	4628      	mov	r0, r5
 8004e28:	f000 f950 	bl	80050cc <_sbrk_r>
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d1f2      	bne.n	8004e16 <sbrk_aligned+0x22>
 8004e30:	e7ef      	b.n	8004e12 <sbrk_aligned+0x1e>
 8004e32:	bf00      	nop
 8004e34:	200002f4 	.word	0x200002f4

08004e38 <_malloc_r>:
 8004e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e3c:	1ccd      	adds	r5, r1, #3
 8004e3e:	f025 0503 	bic.w	r5, r5, #3
 8004e42:	3508      	adds	r5, #8
 8004e44:	2d0c      	cmp	r5, #12
 8004e46:	bf38      	it	cc
 8004e48:	250c      	movcc	r5, #12
 8004e4a:	2d00      	cmp	r5, #0
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	db01      	blt.n	8004e54 <_malloc_r+0x1c>
 8004e50:	42a9      	cmp	r1, r5
 8004e52:	d904      	bls.n	8004e5e <_malloc_r+0x26>
 8004e54:	230c      	movs	r3, #12
 8004e56:	6033      	str	r3, [r6, #0]
 8004e58:	2000      	movs	r0, #0
 8004e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f34 <_malloc_r+0xfc>
 8004e62:	f000 f869 	bl	8004f38 <__malloc_lock>
 8004e66:	f8d8 3000 	ldr.w	r3, [r8]
 8004e6a:	461c      	mov	r4, r3
 8004e6c:	bb44      	cbnz	r4, 8004ec0 <_malloc_r+0x88>
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4630      	mov	r0, r6
 8004e72:	f7ff ffbf 	bl	8004df4 <sbrk_aligned>
 8004e76:	1c43      	adds	r3, r0, #1
 8004e78:	4604      	mov	r4, r0
 8004e7a:	d158      	bne.n	8004f2e <_malloc_r+0xf6>
 8004e7c:	f8d8 4000 	ldr.w	r4, [r8]
 8004e80:	4627      	mov	r7, r4
 8004e82:	2f00      	cmp	r7, #0
 8004e84:	d143      	bne.n	8004f0e <_malloc_r+0xd6>
 8004e86:	2c00      	cmp	r4, #0
 8004e88:	d04b      	beq.n	8004f22 <_malloc_r+0xea>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	4639      	mov	r1, r7
 8004e8e:	4630      	mov	r0, r6
 8004e90:	eb04 0903 	add.w	r9, r4, r3
 8004e94:	f000 f91a 	bl	80050cc <_sbrk_r>
 8004e98:	4581      	cmp	r9, r0
 8004e9a:	d142      	bne.n	8004f22 <_malloc_r+0xea>
 8004e9c:	6821      	ldr	r1, [r4, #0]
 8004e9e:	1a6d      	subs	r5, r5, r1
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f7ff ffa6 	bl	8004df4 <sbrk_aligned>
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d03a      	beq.n	8004f22 <_malloc_r+0xea>
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	442b      	add	r3, r5
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	bb62      	cbnz	r2, 8004f14 <_malloc_r+0xdc>
 8004eba:	f8c8 7000 	str.w	r7, [r8]
 8004ebe:	e00f      	b.n	8004ee0 <_malloc_r+0xa8>
 8004ec0:	6822      	ldr	r2, [r4, #0]
 8004ec2:	1b52      	subs	r2, r2, r5
 8004ec4:	d420      	bmi.n	8004f08 <_malloc_r+0xd0>
 8004ec6:	2a0b      	cmp	r2, #11
 8004ec8:	d917      	bls.n	8004efa <_malloc_r+0xc2>
 8004eca:	1961      	adds	r1, r4, r5
 8004ecc:	42a3      	cmp	r3, r4
 8004ece:	6025      	str	r5, [r4, #0]
 8004ed0:	bf18      	it	ne
 8004ed2:	6059      	strne	r1, [r3, #4]
 8004ed4:	6863      	ldr	r3, [r4, #4]
 8004ed6:	bf08      	it	eq
 8004ed8:	f8c8 1000 	streq.w	r1, [r8]
 8004edc:	5162      	str	r2, [r4, r5]
 8004ede:	604b      	str	r3, [r1, #4]
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f000 f82f 	bl	8004f44 <__malloc_unlock>
 8004ee6:	f104 000b 	add.w	r0, r4, #11
 8004eea:	1d23      	adds	r3, r4, #4
 8004eec:	f020 0007 	bic.w	r0, r0, #7
 8004ef0:	1ac2      	subs	r2, r0, r3
 8004ef2:	bf1c      	itt	ne
 8004ef4:	1a1b      	subne	r3, r3, r0
 8004ef6:	50a3      	strne	r3, [r4, r2]
 8004ef8:	e7af      	b.n	8004e5a <_malloc_r+0x22>
 8004efa:	6862      	ldr	r2, [r4, #4]
 8004efc:	42a3      	cmp	r3, r4
 8004efe:	bf0c      	ite	eq
 8004f00:	f8c8 2000 	streq.w	r2, [r8]
 8004f04:	605a      	strne	r2, [r3, #4]
 8004f06:	e7eb      	b.n	8004ee0 <_malloc_r+0xa8>
 8004f08:	4623      	mov	r3, r4
 8004f0a:	6864      	ldr	r4, [r4, #4]
 8004f0c:	e7ae      	b.n	8004e6c <_malloc_r+0x34>
 8004f0e:	463c      	mov	r4, r7
 8004f10:	687f      	ldr	r7, [r7, #4]
 8004f12:	e7b6      	b.n	8004e82 <_malloc_r+0x4a>
 8004f14:	461a      	mov	r2, r3
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	42a3      	cmp	r3, r4
 8004f1a:	d1fb      	bne.n	8004f14 <_malloc_r+0xdc>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	6053      	str	r3, [r2, #4]
 8004f20:	e7de      	b.n	8004ee0 <_malloc_r+0xa8>
 8004f22:	230c      	movs	r3, #12
 8004f24:	6033      	str	r3, [r6, #0]
 8004f26:	4630      	mov	r0, r6
 8004f28:	f000 f80c 	bl	8004f44 <__malloc_unlock>
 8004f2c:	e794      	b.n	8004e58 <_malloc_r+0x20>
 8004f2e:	6005      	str	r5, [r0, #0]
 8004f30:	e7d6      	b.n	8004ee0 <_malloc_r+0xa8>
 8004f32:	bf00      	nop
 8004f34:	200002f8 	.word	0x200002f8

08004f38 <__malloc_lock>:
 8004f38:	4801      	ldr	r0, [pc, #4]	@ (8004f40 <__malloc_lock+0x8>)
 8004f3a:	f7ff bee8 	b.w	8004d0e <__retarget_lock_acquire_recursive>
 8004f3e:	bf00      	nop
 8004f40:	200002f0 	.word	0x200002f0

08004f44 <__malloc_unlock>:
 8004f44:	4801      	ldr	r0, [pc, #4]	@ (8004f4c <__malloc_unlock+0x8>)
 8004f46:	f7ff bee3 	b.w	8004d10 <__retarget_lock_release_recursive>
 8004f4a:	bf00      	nop
 8004f4c:	200002f0 	.word	0x200002f0

08004f50 <__sflush_r>:
 8004f50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f58:	0716      	lsls	r6, r2, #28
 8004f5a:	4605      	mov	r5, r0
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	d454      	bmi.n	800500a <__sflush_r+0xba>
 8004f60:	684b      	ldr	r3, [r1, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	dc02      	bgt.n	8004f6c <__sflush_r+0x1c>
 8004f66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	dd48      	ble.n	8004ffe <__sflush_r+0xae>
 8004f6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f6e:	2e00      	cmp	r6, #0
 8004f70:	d045      	beq.n	8004ffe <__sflush_r+0xae>
 8004f72:	2300      	movs	r3, #0
 8004f74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f78:	682f      	ldr	r7, [r5, #0]
 8004f7a:	6a21      	ldr	r1, [r4, #32]
 8004f7c:	602b      	str	r3, [r5, #0]
 8004f7e:	d030      	beq.n	8004fe2 <__sflush_r+0x92>
 8004f80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	0759      	lsls	r1, r3, #29
 8004f86:	d505      	bpl.n	8004f94 <__sflush_r+0x44>
 8004f88:	6863      	ldr	r3, [r4, #4]
 8004f8a:	1ad2      	subs	r2, r2, r3
 8004f8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f8e:	b10b      	cbz	r3, 8004f94 <__sflush_r+0x44>
 8004f90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f92:	1ad2      	subs	r2, r2, r3
 8004f94:	2300      	movs	r3, #0
 8004f96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f98:	6a21      	ldr	r1, [r4, #32]
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	47b0      	blx	r6
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	d106      	bne.n	8004fb2 <__sflush_r+0x62>
 8004fa4:	6829      	ldr	r1, [r5, #0]
 8004fa6:	291d      	cmp	r1, #29
 8004fa8:	d82b      	bhi.n	8005002 <__sflush_r+0xb2>
 8004faa:	4a2a      	ldr	r2, [pc, #168]	@ (8005054 <__sflush_r+0x104>)
 8004fac:	410a      	asrs	r2, r1
 8004fae:	07d6      	lsls	r6, r2, #31
 8004fb0:	d427      	bmi.n	8005002 <__sflush_r+0xb2>
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	6062      	str	r2, [r4, #4]
 8004fb6:	04d9      	lsls	r1, r3, #19
 8004fb8:	6922      	ldr	r2, [r4, #16]
 8004fba:	6022      	str	r2, [r4, #0]
 8004fbc:	d504      	bpl.n	8004fc8 <__sflush_r+0x78>
 8004fbe:	1c42      	adds	r2, r0, #1
 8004fc0:	d101      	bne.n	8004fc6 <__sflush_r+0x76>
 8004fc2:	682b      	ldr	r3, [r5, #0]
 8004fc4:	b903      	cbnz	r3, 8004fc8 <__sflush_r+0x78>
 8004fc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8004fc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fca:	602f      	str	r7, [r5, #0]
 8004fcc:	b1b9      	cbz	r1, 8004ffe <__sflush_r+0xae>
 8004fce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fd2:	4299      	cmp	r1, r3
 8004fd4:	d002      	beq.n	8004fdc <__sflush_r+0x8c>
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f7ff feba 	bl	8004d50 <_free_r>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fe0:	e00d      	b.n	8004ffe <__sflush_r+0xae>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b0      	blx	r6
 8004fe8:	4602      	mov	r2, r0
 8004fea:	1c50      	adds	r0, r2, #1
 8004fec:	d1c9      	bne.n	8004f82 <__sflush_r+0x32>
 8004fee:	682b      	ldr	r3, [r5, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0c6      	beq.n	8004f82 <__sflush_r+0x32>
 8004ff4:	2b1d      	cmp	r3, #29
 8004ff6:	d001      	beq.n	8004ffc <__sflush_r+0xac>
 8004ff8:	2b16      	cmp	r3, #22
 8004ffa:	d11e      	bne.n	800503a <__sflush_r+0xea>
 8004ffc:	602f      	str	r7, [r5, #0]
 8004ffe:	2000      	movs	r0, #0
 8005000:	e022      	b.n	8005048 <__sflush_r+0xf8>
 8005002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005006:	b21b      	sxth	r3, r3
 8005008:	e01b      	b.n	8005042 <__sflush_r+0xf2>
 800500a:	690f      	ldr	r7, [r1, #16]
 800500c:	2f00      	cmp	r7, #0
 800500e:	d0f6      	beq.n	8004ffe <__sflush_r+0xae>
 8005010:	0793      	lsls	r3, r2, #30
 8005012:	680e      	ldr	r6, [r1, #0]
 8005014:	bf08      	it	eq
 8005016:	694b      	ldreq	r3, [r1, #20]
 8005018:	600f      	str	r7, [r1, #0]
 800501a:	bf18      	it	ne
 800501c:	2300      	movne	r3, #0
 800501e:	eba6 0807 	sub.w	r8, r6, r7
 8005022:	608b      	str	r3, [r1, #8]
 8005024:	f1b8 0f00 	cmp.w	r8, #0
 8005028:	dde9      	ble.n	8004ffe <__sflush_r+0xae>
 800502a:	6a21      	ldr	r1, [r4, #32]
 800502c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800502e:	4643      	mov	r3, r8
 8005030:	463a      	mov	r2, r7
 8005032:	4628      	mov	r0, r5
 8005034:	47b0      	blx	r6
 8005036:	2800      	cmp	r0, #0
 8005038:	dc08      	bgt.n	800504c <__sflush_r+0xfc>
 800503a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800503e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005042:	81a3      	strh	r3, [r4, #12]
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800504c:	4407      	add	r7, r0
 800504e:	eba8 0800 	sub.w	r8, r8, r0
 8005052:	e7e7      	b.n	8005024 <__sflush_r+0xd4>
 8005054:	dfbffffe 	.word	0xdfbffffe

08005058 <_fflush_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	690b      	ldr	r3, [r1, #16]
 800505c:	4605      	mov	r5, r0
 800505e:	460c      	mov	r4, r1
 8005060:	b913      	cbnz	r3, 8005068 <_fflush_r+0x10>
 8005062:	2500      	movs	r5, #0
 8005064:	4628      	mov	r0, r5
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	b118      	cbz	r0, 8005072 <_fflush_r+0x1a>
 800506a:	6a03      	ldr	r3, [r0, #32]
 800506c:	b90b      	cbnz	r3, 8005072 <_fflush_r+0x1a>
 800506e:	f7ff fcff 	bl	8004a70 <__sinit>
 8005072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f3      	beq.n	8005062 <_fflush_r+0xa>
 800507a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800507c:	07d0      	lsls	r0, r2, #31
 800507e:	d404      	bmi.n	800508a <_fflush_r+0x32>
 8005080:	0599      	lsls	r1, r3, #22
 8005082:	d402      	bmi.n	800508a <_fflush_r+0x32>
 8005084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005086:	f7ff fe42 	bl	8004d0e <__retarget_lock_acquire_recursive>
 800508a:	4628      	mov	r0, r5
 800508c:	4621      	mov	r1, r4
 800508e:	f7ff ff5f 	bl	8004f50 <__sflush_r>
 8005092:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005094:	07da      	lsls	r2, r3, #31
 8005096:	4605      	mov	r5, r0
 8005098:	d4e4      	bmi.n	8005064 <_fflush_r+0xc>
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	059b      	lsls	r3, r3, #22
 800509e:	d4e1      	bmi.n	8005064 <_fflush_r+0xc>
 80050a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050a2:	f7ff fe35 	bl	8004d10 <__retarget_lock_release_recursive>
 80050a6:	e7dd      	b.n	8005064 <_fflush_r+0xc>

080050a8 <fiprintf>:
 80050a8:	b40e      	push	{r1, r2, r3}
 80050aa:	b503      	push	{r0, r1, lr}
 80050ac:	4601      	mov	r1, r0
 80050ae:	ab03      	add	r3, sp, #12
 80050b0:	4805      	ldr	r0, [pc, #20]	@ (80050c8 <fiprintf+0x20>)
 80050b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80050b6:	6800      	ldr	r0, [r0, #0]
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	f000 f847 	bl	800514c <_vfiprintf_r>
 80050be:	b002      	add	sp, #8
 80050c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050c4:	b003      	add	sp, #12
 80050c6:	4770      	bx	lr
 80050c8:	20000018 	.word	0x20000018

080050cc <_sbrk_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4d06      	ldr	r5, [pc, #24]	@ (80050e8 <_sbrk_r+0x1c>)
 80050d0:	2300      	movs	r3, #0
 80050d2:	4604      	mov	r4, r0
 80050d4:	4608      	mov	r0, r1
 80050d6:	602b      	str	r3, [r5, #0]
 80050d8:	f7fb fd0c 	bl	8000af4 <_sbrk>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_sbrk_r+0x1a>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_sbrk_r+0x1a>
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	200002ec 	.word	0x200002ec

080050ec <abort>:
 80050ec:	b508      	push	{r3, lr}
 80050ee:	2006      	movs	r0, #6
 80050f0:	f000 fb8e 	bl	8005810 <raise>
 80050f4:	2001      	movs	r0, #1
 80050f6:	f7fb fc85 	bl	8000a04 <_exit>

080050fa <__sfputc_r>:
 80050fa:	6893      	ldr	r3, [r2, #8]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	b410      	push	{r4}
 8005102:	6093      	str	r3, [r2, #8]
 8005104:	da08      	bge.n	8005118 <__sfputc_r+0x1e>
 8005106:	6994      	ldr	r4, [r2, #24]
 8005108:	42a3      	cmp	r3, r4
 800510a:	db01      	blt.n	8005110 <__sfputc_r+0x16>
 800510c:	290a      	cmp	r1, #10
 800510e:	d103      	bne.n	8005118 <__sfputc_r+0x1e>
 8005110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005114:	f000 bac0 	b.w	8005698 <__swbuf_r>
 8005118:	6813      	ldr	r3, [r2, #0]
 800511a:	1c58      	adds	r0, r3, #1
 800511c:	6010      	str	r0, [r2, #0]
 800511e:	7019      	strb	r1, [r3, #0]
 8005120:	4608      	mov	r0, r1
 8005122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005126:	4770      	bx	lr

08005128 <__sfputs_r>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	4606      	mov	r6, r0
 800512c:	460f      	mov	r7, r1
 800512e:	4614      	mov	r4, r2
 8005130:	18d5      	adds	r5, r2, r3
 8005132:	42ac      	cmp	r4, r5
 8005134:	d101      	bne.n	800513a <__sfputs_r+0x12>
 8005136:	2000      	movs	r0, #0
 8005138:	e007      	b.n	800514a <__sfputs_r+0x22>
 800513a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513e:	463a      	mov	r2, r7
 8005140:	4630      	mov	r0, r6
 8005142:	f7ff ffda 	bl	80050fa <__sfputc_r>
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	d1f3      	bne.n	8005132 <__sfputs_r+0xa>
 800514a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800514c <_vfiprintf_r>:
 800514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005150:	460d      	mov	r5, r1
 8005152:	b09d      	sub	sp, #116	@ 0x74
 8005154:	4614      	mov	r4, r2
 8005156:	4698      	mov	r8, r3
 8005158:	4606      	mov	r6, r0
 800515a:	b118      	cbz	r0, 8005164 <_vfiprintf_r+0x18>
 800515c:	6a03      	ldr	r3, [r0, #32]
 800515e:	b90b      	cbnz	r3, 8005164 <_vfiprintf_r+0x18>
 8005160:	f7ff fc86 	bl	8004a70 <__sinit>
 8005164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005166:	07d9      	lsls	r1, r3, #31
 8005168:	d405      	bmi.n	8005176 <_vfiprintf_r+0x2a>
 800516a:	89ab      	ldrh	r3, [r5, #12]
 800516c:	059a      	lsls	r2, r3, #22
 800516e:	d402      	bmi.n	8005176 <_vfiprintf_r+0x2a>
 8005170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005172:	f7ff fdcc 	bl	8004d0e <__retarget_lock_acquire_recursive>
 8005176:	89ab      	ldrh	r3, [r5, #12]
 8005178:	071b      	lsls	r3, r3, #28
 800517a:	d501      	bpl.n	8005180 <_vfiprintf_r+0x34>
 800517c:	692b      	ldr	r3, [r5, #16]
 800517e:	b99b      	cbnz	r3, 80051a8 <_vfiprintf_r+0x5c>
 8005180:	4629      	mov	r1, r5
 8005182:	4630      	mov	r0, r6
 8005184:	f000 fac6 	bl	8005714 <__swsetup_r>
 8005188:	b170      	cbz	r0, 80051a8 <_vfiprintf_r+0x5c>
 800518a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800518c:	07dc      	lsls	r4, r3, #31
 800518e:	d504      	bpl.n	800519a <_vfiprintf_r+0x4e>
 8005190:	f04f 30ff 	mov.w	r0, #4294967295
 8005194:	b01d      	add	sp, #116	@ 0x74
 8005196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	0598      	lsls	r0, r3, #22
 800519e:	d4f7      	bmi.n	8005190 <_vfiprintf_r+0x44>
 80051a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051a2:	f7ff fdb5 	bl	8004d10 <__retarget_lock_release_recursive>
 80051a6:	e7f3      	b.n	8005190 <_vfiprintf_r+0x44>
 80051a8:	2300      	movs	r3, #0
 80051aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80051ac:	2320      	movs	r3, #32
 80051ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051b6:	2330      	movs	r3, #48	@ 0x30
 80051b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005368 <_vfiprintf_r+0x21c>
 80051bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051c0:	f04f 0901 	mov.w	r9, #1
 80051c4:	4623      	mov	r3, r4
 80051c6:	469a      	mov	sl, r3
 80051c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051cc:	b10a      	cbz	r2, 80051d2 <_vfiprintf_r+0x86>
 80051ce:	2a25      	cmp	r2, #37	@ 0x25
 80051d0:	d1f9      	bne.n	80051c6 <_vfiprintf_r+0x7a>
 80051d2:	ebba 0b04 	subs.w	fp, sl, r4
 80051d6:	d00b      	beq.n	80051f0 <_vfiprintf_r+0xa4>
 80051d8:	465b      	mov	r3, fp
 80051da:	4622      	mov	r2, r4
 80051dc:	4629      	mov	r1, r5
 80051de:	4630      	mov	r0, r6
 80051e0:	f7ff ffa2 	bl	8005128 <__sfputs_r>
 80051e4:	3001      	adds	r0, #1
 80051e6:	f000 80a7 	beq.w	8005338 <_vfiprintf_r+0x1ec>
 80051ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051ec:	445a      	add	r2, fp
 80051ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80051f0:	f89a 3000 	ldrb.w	r3, [sl]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 809f 	beq.w	8005338 <_vfiprintf_r+0x1ec>
 80051fa:	2300      	movs	r3, #0
 80051fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005204:	f10a 0a01 	add.w	sl, sl, #1
 8005208:	9304      	str	r3, [sp, #16]
 800520a:	9307      	str	r3, [sp, #28]
 800520c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005210:	931a      	str	r3, [sp, #104]	@ 0x68
 8005212:	4654      	mov	r4, sl
 8005214:	2205      	movs	r2, #5
 8005216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800521a:	4853      	ldr	r0, [pc, #332]	@ (8005368 <_vfiprintf_r+0x21c>)
 800521c:	f7fb f818 	bl	8000250 <memchr>
 8005220:	9a04      	ldr	r2, [sp, #16]
 8005222:	b9d8      	cbnz	r0, 800525c <_vfiprintf_r+0x110>
 8005224:	06d1      	lsls	r1, r2, #27
 8005226:	bf44      	itt	mi
 8005228:	2320      	movmi	r3, #32
 800522a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800522e:	0713      	lsls	r3, r2, #28
 8005230:	bf44      	itt	mi
 8005232:	232b      	movmi	r3, #43	@ 0x2b
 8005234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005238:	f89a 3000 	ldrb.w	r3, [sl]
 800523c:	2b2a      	cmp	r3, #42	@ 0x2a
 800523e:	d015      	beq.n	800526c <_vfiprintf_r+0x120>
 8005240:	9a07      	ldr	r2, [sp, #28]
 8005242:	4654      	mov	r4, sl
 8005244:	2000      	movs	r0, #0
 8005246:	f04f 0c0a 	mov.w	ip, #10
 800524a:	4621      	mov	r1, r4
 800524c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005250:	3b30      	subs	r3, #48	@ 0x30
 8005252:	2b09      	cmp	r3, #9
 8005254:	d94b      	bls.n	80052ee <_vfiprintf_r+0x1a2>
 8005256:	b1b0      	cbz	r0, 8005286 <_vfiprintf_r+0x13a>
 8005258:	9207      	str	r2, [sp, #28]
 800525a:	e014      	b.n	8005286 <_vfiprintf_r+0x13a>
 800525c:	eba0 0308 	sub.w	r3, r0, r8
 8005260:	fa09 f303 	lsl.w	r3, r9, r3
 8005264:	4313      	orrs	r3, r2
 8005266:	9304      	str	r3, [sp, #16]
 8005268:	46a2      	mov	sl, r4
 800526a:	e7d2      	b.n	8005212 <_vfiprintf_r+0xc6>
 800526c:	9b03      	ldr	r3, [sp, #12]
 800526e:	1d19      	adds	r1, r3, #4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	9103      	str	r1, [sp, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	bfbb      	ittet	lt
 8005278:	425b      	neglt	r3, r3
 800527a:	f042 0202 	orrlt.w	r2, r2, #2
 800527e:	9307      	strge	r3, [sp, #28]
 8005280:	9307      	strlt	r3, [sp, #28]
 8005282:	bfb8      	it	lt
 8005284:	9204      	strlt	r2, [sp, #16]
 8005286:	7823      	ldrb	r3, [r4, #0]
 8005288:	2b2e      	cmp	r3, #46	@ 0x2e
 800528a:	d10a      	bne.n	80052a2 <_vfiprintf_r+0x156>
 800528c:	7863      	ldrb	r3, [r4, #1]
 800528e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005290:	d132      	bne.n	80052f8 <_vfiprintf_r+0x1ac>
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	1d1a      	adds	r2, r3, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	9203      	str	r2, [sp, #12]
 800529a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800529e:	3402      	adds	r4, #2
 80052a0:	9305      	str	r3, [sp, #20]
 80052a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005378 <_vfiprintf_r+0x22c>
 80052a6:	7821      	ldrb	r1, [r4, #0]
 80052a8:	2203      	movs	r2, #3
 80052aa:	4650      	mov	r0, sl
 80052ac:	f7fa ffd0 	bl	8000250 <memchr>
 80052b0:	b138      	cbz	r0, 80052c2 <_vfiprintf_r+0x176>
 80052b2:	9b04      	ldr	r3, [sp, #16]
 80052b4:	eba0 000a 	sub.w	r0, r0, sl
 80052b8:	2240      	movs	r2, #64	@ 0x40
 80052ba:	4082      	lsls	r2, r0
 80052bc:	4313      	orrs	r3, r2
 80052be:	3401      	adds	r4, #1
 80052c0:	9304      	str	r3, [sp, #16]
 80052c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c6:	4829      	ldr	r0, [pc, #164]	@ (800536c <_vfiprintf_r+0x220>)
 80052c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052cc:	2206      	movs	r2, #6
 80052ce:	f7fa ffbf 	bl	8000250 <memchr>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	d03f      	beq.n	8005356 <_vfiprintf_r+0x20a>
 80052d6:	4b26      	ldr	r3, [pc, #152]	@ (8005370 <_vfiprintf_r+0x224>)
 80052d8:	bb1b      	cbnz	r3, 8005322 <_vfiprintf_r+0x1d6>
 80052da:	9b03      	ldr	r3, [sp, #12]
 80052dc:	3307      	adds	r3, #7
 80052de:	f023 0307 	bic.w	r3, r3, #7
 80052e2:	3308      	adds	r3, #8
 80052e4:	9303      	str	r3, [sp, #12]
 80052e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e8:	443b      	add	r3, r7
 80052ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80052ec:	e76a      	b.n	80051c4 <_vfiprintf_r+0x78>
 80052ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80052f2:	460c      	mov	r4, r1
 80052f4:	2001      	movs	r0, #1
 80052f6:	e7a8      	b.n	800524a <_vfiprintf_r+0xfe>
 80052f8:	2300      	movs	r3, #0
 80052fa:	3401      	adds	r4, #1
 80052fc:	9305      	str	r3, [sp, #20]
 80052fe:	4619      	mov	r1, r3
 8005300:	f04f 0c0a 	mov.w	ip, #10
 8005304:	4620      	mov	r0, r4
 8005306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800530a:	3a30      	subs	r2, #48	@ 0x30
 800530c:	2a09      	cmp	r2, #9
 800530e:	d903      	bls.n	8005318 <_vfiprintf_r+0x1cc>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0c6      	beq.n	80052a2 <_vfiprintf_r+0x156>
 8005314:	9105      	str	r1, [sp, #20]
 8005316:	e7c4      	b.n	80052a2 <_vfiprintf_r+0x156>
 8005318:	fb0c 2101 	mla	r1, ip, r1, r2
 800531c:	4604      	mov	r4, r0
 800531e:	2301      	movs	r3, #1
 8005320:	e7f0      	b.n	8005304 <_vfiprintf_r+0x1b8>
 8005322:	ab03      	add	r3, sp, #12
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	462a      	mov	r2, r5
 8005328:	4b12      	ldr	r3, [pc, #72]	@ (8005374 <_vfiprintf_r+0x228>)
 800532a:	a904      	add	r1, sp, #16
 800532c:	4630      	mov	r0, r6
 800532e:	f3af 8000 	nop.w
 8005332:	4607      	mov	r7, r0
 8005334:	1c78      	adds	r0, r7, #1
 8005336:	d1d6      	bne.n	80052e6 <_vfiprintf_r+0x19a>
 8005338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800533a:	07d9      	lsls	r1, r3, #31
 800533c:	d405      	bmi.n	800534a <_vfiprintf_r+0x1fe>
 800533e:	89ab      	ldrh	r3, [r5, #12]
 8005340:	059a      	lsls	r2, r3, #22
 8005342:	d402      	bmi.n	800534a <_vfiprintf_r+0x1fe>
 8005344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005346:	f7ff fce3 	bl	8004d10 <__retarget_lock_release_recursive>
 800534a:	89ab      	ldrh	r3, [r5, #12]
 800534c:	065b      	lsls	r3, r3, #25
 800534e:	f53f af1f 	bmi.w	8005190 <_vfiprintf_r+0x44>
 8005352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005354:	e71e      	b.n	8005194 <_vfiprintf_r+0x48>
 8005356:	ab03      	add	r3, sp, #12
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	462a      	mov	r2, r5
 800535c:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <_vfiprintf_r+0x228>)
 800535e:	a904      	add	r1, sp, #16
 8005360:	4630      	mov	r0, r6
 8005362:	f000 f879 	bl	8005458 <_printf_i>
 8005366:	e7e4      	b.n	8005332 <_vfiprintf_r+0x1e6>
 8005368:	08005aa9 	.word	0x08005aa9
 800536c:	08005ab3 	.word	0x08005ab3
 8005370:	00000000 	.word	0x00000000
 8005374:	08005129 	.word	0x08005129
 8005378:	08005aaf 	.word	0x08005aaf

0800537c <_printf_common>:
 800537c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005380:	4616      	mov	r6, r2
 8005382:	4698      	mov	r8, r3
 8005384:	688a      	ldr	r2, [r1, #8]
 8005386:	690b      	ldr	r3, [r1, #16]
 8005388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800538c:	4293      	cmp	r3, r2
 800538e:	bfb8      	it	lt
 8005390:	4613      	movlt	r3, r2
 8005392:	6033      	str	r3, [r6, #0]
 8005394:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005398:	4607      	mov	r7, r0
 800539a:	460c      	mov	r4, r1
 800539c:	b10a      	cbz	r2, 80053a2 <_printf_common+0x26>
 800539e:	3301      	adds	r3, #1
 80053a0:	6033      	str	r3, [r6, #0]
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	0699      	lsls	r1, r3, #26
 80053a6:	bf42      	ittt	mi
 80053a8:	6833      	ldrmi	r3, [r6, #0]
 80053aa:	3302      	addmi	r3, #2
 80053ac:	6033      	strmi	r3, [r6, #0]
 80053ae:	6825      	ldr	r5, [r4, #0]
 80053b0:	f015 0506 	ands.w	r5, r5, #6
 80053b4:	d106      	bne.n	80053c4 <_printf_common+0x48>
 80053b6:	f104 0a19 	add.w	sl, r4, #25
 80053ba:	68e3      	ldr	r3, [r4, #12]
 80053bc:	6832      	ldr	r2, [r6, #0]
 80053be:	1a9b      	subs	r3, r3, r2
 80053c0:	42ab      	cmp	r3, r5
 80053c2:	dc26      	bgt.n	8005412 <_printf_common+0x96>
 80053c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053c8:	6822      	ldr	r2, [r4, #0]
 80053ca:	3b00      	subs	r3, #0
 80053cc:	bf18      	it	ne
 80053ce:	2301      	movne	r3, #1
 80053d0:	0692      	lsls	r2, r2, #26
 80053d2:	d42b      	bmi.n	800542c <_printf_common+0xb0>
 80053d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053d8:	4641      	mov	r1, r8
 80053da:	4638      	mov	r0, r7
 80053dc:	47c8      	blx	r9
 80053de:	3001      	adds	r0, #1
 80053e0:	d01e      	beq.n	8005420 <_printf_common+0xa4>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	6922      	ldr	r2, [r4, #16]
 80053e6:	f003 0306 	and.w	r3, r3, #6
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	bf02      	ittt	eq
 80053ee:	68e5      	ldreq	r5, [r4, #12]
 80053f0:	6833      	ldreq	r3, [r6, #0]
 80053f2:	1aed      	subeq	r5, r5, r3
 80053f4:	68a3      	ldr	r3, [r4, #8]
 80053f6:	bf0c      	ite	eq
 80053f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053fc:	2500      	movne	r5, #0
 80053fe:	4293      	cmp	r3, r2
 8005400:	bfc4      	itt	gt
 8005402:	1a9b      	subgt	r3, r3, r2
 8005404:	18ed      	addgt	r5, r5, r3
 8005406:	2600      	movs	r6, #0
 8005408:	341a      	adds	r4, #26
 800540a:	42b5      	cmp	r5, r6
 800540c:	d11a      	bne.n	8005444 <_printf_common+0xc8>
 800540e:	2000      	movs	r0, #0
 8005410:	e008      	b.n	8005424 <_printf_common+0xa8>
 8005412:	2301      	movs	r3, #1
 8005414:	4652      	mov	r2, sl
 8005416:	4641      	mov	r1, r8
 8005418:	4638      	mov	r0, r7
 800541a:	47c8      	blx	r9
 800541c:	3001      	adds	r0, #1
 800541e:	d103      	bne.n	8005428 <_printf_common+0xac>
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005428:	3501      	adds	r5, #1
 800542a:	e7c6      	b.n	80053ba <_printf_common+0x3e>
 800542c:	18e1      	adds	r1, r4, r3
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	2030      	movs	r0, #48	@ 0x30
 8005432:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005436:	4422      	add	r2, r4
 8005438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800543c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005440:	3302      	adds	r3, #2
 8005442:	e7c7      	b.n	80053d4 <_printf_common+0x58>
 8005444:	2301      	movs	r3, #1
 8005446:	4622      	mov	r2, r4
 8005448:	4641      	mov	r1, r8
 800544a:	4638      	mov	r0, r7
 800544c:	47c8      	blx	r9
 800544e:	3001      	adds	r0, #1
 8005450:	d0e6      	beq.n	8005420 <_printf_common+0xa4>
 8005452:	3601      	adds	r6, #1
 8005454:	e7d9      	b.n	800540a <_printf_common+0x8e>
	...

08005458 <_printf_i>:
 8005458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800545c:	7e0f      	ldrb	r7, [r1, #24]
 800545e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005460:	2f78      	cmp	r7, #120	@ 0x78
 8005462:	4691      	mov	r9, r2
 8005464:	4680      	mov	r8, r0
 8005466:	460c      	mov	r4, r1
 8005468:	469a      	mov	sl, r3
 800546a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800546e:	d807      	bhi.n	8005480 <_printf_i+0x28>
 8005470:	2f62      	cmp	r7, #98	@ 0x62
 8005472:	d80a      	bhi.n	800548a <_printf_i+0x32>
 8005474:	2f00      	cmp	r7, #0
 8005476:	f000 80d2 	beq.w	800561e <_printf_i+0x1c6>
 800547a:	2f58      	cmp	r7, #88	@ 0x58
 800547c:	f000 80b9 	beq.w	80055f2 <_printf_i+0x19a>
 8005480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005488:	e03a      	b.n	8005500 <_printf_i+0xa8>
 800548a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800548e:	2b15      	cmp	r3, #21
 8005490:	d8f6      	bhi.n	8005480 <_printf_i+0x28>
 8005492:	a101      	add	r1, pc, #4	@ (adr r1, 8005498 <_printf_i+0x40>)
 8005494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005498:	080054f1 	.word	0x080054f1
 800549c:	08005505 	.word	0x08005505
 80054a0:	08005481 	.word	0x08005481
 80054a4:	08005481 	.word	0x08005481
 80054a8:	08005481 	.word	0x08005481
 80054ac:	08005481 	.word	0x08005481
 80054b0:	08005505 	.word	0x08005505
 80054b4:	08005481 	.word	0x08005481
 80054b8:	08005481 	.word	0x08005481
 80054bc:	08005481 	.word	0x08005481
 80054c0:	08005481 	.word	0x08005481
 80054c4:	08005605 	.word	0x08005605
 80054c8:	0800552f 	.word	0x0800552f
 80054cc:	080055bf 	.word	0x080055bf
 80054d0:	08005481 	.word	0x08005481
 80054d4:	08005481 	.word	0x08005481
 80054d8:	08005627 	.word	0x08005627
 80054dc:	08005481 	.word	0x08005481
 80054e0:	0800552f 	.word	0x0800552f
 80054e4:	08005481 	.word	0x08005481
 80054e8:	08005481 	.word	0x08005481
 80054ec:	080055c7 	.word	0x080055c7
 80054f0:	6833      	ldr	r3, [r6, #0]
 80054f2:	1d1a      	adds	r2, r3, #4
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6032      	str	r2, [r6, #0]
 80054f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005500:	2301      	movs	r3, #1
 8005502:	e09d      	b.n	8005640 <_printf_i+0x1e8>
 8005504:	6833      	ldr	r3, [r6, #0]
 8005506:	6820      	ldr	r0, [r4, #0]
 8005508:	1d19      	adds	r1, r3, #4
 800550a:	6031      	str	r1, [r6, #0]
 800550c:	0606      	lsls	r6, r0, #24
 800550e:	d501      	bpl.n	8005514 <_printf_i+0xbc>
 8005510:	681d      	ldr	r5, [r3, #0]
 8005512:	e003      	b.n	800551c <_printf_i+0xc4>
 8005514:	0645      	lsls	r5, r0, #25
 8005516:	d5fb      	bpl.n	8005510 <_printf_i+0xb8>
 8005518:	f9b3 5000 	ldrsh.w	r5, [r3]
 800551c:	2d00      	cmp	r5, #0
 800551e:	da03      	bge.n	8005528 <_printf_i+0xd0>
 8005520:	232d      	movs	r3, #45	@ 0x2d
 8005522:	426d      	negs	r5, r5
 8005524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005528:	4859      	ldr	r0, [pc, #356]	@ (8005690 <_printf_i+0x238>)
 800552a:	230a      	movs	r3, #10
 800552c:	e011      	b.n	8005552 <_printf_i+0xfa>
 800552e:	6821      	ldr	r1, [r4, #0]
 8005530:	6833      	ldr	r3, [r6, #0]
 8005532:	0608      	lsls	r0, r1, #24
 8005534:	f853 5b04 	ldr.w	r5, [r3], #4
 8005538:	d402      	bmi.n	8005540 <_printf_i+0xe8>
 800553a:	0649      	lsls	r1, r1, #25
 800553c:	bf48      	it	mi
 800553e:	b2ad      	uxthmi	r5, r5
 8005540:	2f6f      	cmp	r7, #111	@ 0x6f
 8005542:	4853      	ldr	r0, [pc, #332]	@ (8005690 <_printf_i+0x238>)
 8005544:	6033      	str	r3, [r6, #0]
 8005546:	bf14      	ite	ne
 8005548:	230a      	movne	r3, #10
 800554a:	2308      	moveq	r3, #8
 800554c:	2100      	movs	r1, #0
 800554e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005552:	6866      	ldr	r6, [r4, #4]
 8005554:	60a6      	str	r6, [r4, #8]
 8005556:	2e00      	cmp	r6, #0
 8005558:	bfa2      	ittt	ge
 800555a:	6821      	ldrge	r1, [r4, #0]
 800555c:	f021 0104 	bicge.w	r1, r1, #4
 8005560:	6021      	strge	r1, [r4, #0]
 8005562:	b90d      	cbnz	r5, 8005568 <_printf_i+0x110>
 8005564:	2e00      	cmp	r6, #0
 8005566:	d04b      	beq.n	8005600 <_printf_i+0x1a8>
 8005568:	4616      	mov	r6, r2
 800556a:	fbb5 f1f3 	udiv	r1, r5, r3
 800556e:	fb03 5711 	mls	r7, r3, r1, r5
 8005572:	5dc7      	ldrb	r7, [r0, r7]
 8005574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005578:	462f      	mov	r7, r5
 800557a:	42bb      	cmp	r3, r7
 800557c:	460d      	mov	r5, r1
 800557e:	d9f4      	bls.n	800556a <_printf_i+0x112>
 8005580:	2b08      	cmp	r3, #8
 8005582:	d10b      	bne.n	800559c <_printf_i+0x144>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	07df      	lsls	r7, r3, #31
 8005588:	d508      	bpl.n	800559c <_printf_i+0x144>
 800558a:	6923      	ldr	r3, [r4, #16]
 800558c:	6861      	ldr	r1, [r4, #4]
 800558e:	4299      	cmp	r1, r3
 8005590:	bfde      	ittt	le
 8005592:	2330      	movle	r3, #48	@ 0x30
 8005594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800559c:	1b92      	subs	r2, r2, r6
 800559e:	6122      	str	r2, [r4, #16]
 80055a0:	f8cd a000 	str.w	sl, [sp]
 80055a4:	464b      	mov	r3, r9
 80055a6:	aa03      	add	r2, sp, #12
 80055a8:	4621      	mov	r1, r4
 80055aa:	4640      	mov	r0, r8
 80055ac:	f7ff fee6 	bl	800537c <_printf_common>
 80055b0:	3001      	adds	r0, #1
 80055b2:	d14a      	bne.n	800564a <_printf_i+0x1f2>
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	b004      	add	sp, #16
 80055ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	f043 0320 	orr.w	r3, r3, #32
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	4833      	ldr	r0, [pc, #204]	@ (8005694 <_printf_i+0x23c>)
 80055c8:	2778      	movs	r7, #120	@ 0x78
 80055ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	6831      	ldr	r1, [r6, #0]
 80055d2:	061f      	lsls	r7, r3, #24
 80055d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80055d8:	d402      	bmi.n	80055e0 <_printf_i+0x188>
 80055da:	065f      	lsls	r7, r3, #25
 80055dc:	bf48      	it	mi
 80055de:	b2ad      	uxthmi	r5, r5
 80055e0:	6031      	str	r1, [r6, #0]
 80055e2:	07d9      	lsls	r1, r3, #31
 80055e4:	bf44      	itt	mi
 80055e6:	f043 0320 	orrmi.w	r3, r3, #32
 80055ea:	6023      	strmi	r3, [r4, #0]
 80055ec:	b11d      	cbz	r5, 80055f6 <_printf_i+0x19e>
 80055ee:	2310      	movs	r3, #16
 80055f0:	e7ac      	b.n	800554c <_printf_i+0xf4>
 80055f2:	4827      	ldr	r0, [pc, #156]	@ (8005690 <_printf_i+0x238>)
 80055f4:	e7e9      	b.n	80055ca <_printf_i+0x172>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	f023 0320 	bic.w	r3, r3, #32
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	e7f6      	b.n	80055ee <_printf_i+0x196>
 8005600:	4616      	mov	r6, r2
 8005602:	e7bd      	b.n	8005580 <_printf_i+0x128>
 8005604:	6833      	ldr	r3, [r6, #0]
 8005606:	6825      	ldr	r5, [r4, #0]
 8005608:	6961      	ldr	r1, [r4, #20]
 800560a:	1d18      	adds	r0, r3, #4
 800560c:	6030      	str	r0, [r6, #0]
 800560e:	062e      	lsls	r6, r5, #24
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	d501      	bpl.n	8005618 <_printf_i+0x1c0>
 8005614:	6019      	str	r1, [r3, #0]
 8005616:	e002      	b.n	800561e <_printf_i+0x1c6>
 8005618:	0668      	lsls	r0, r5, #25
 800561a:	d5fb      	bpl.n	8005614 <_printf_i+0x1bc>
 800561c:	8019      	strh	r1, [r3, #0]
 800561e:	2300      	movs	r3, #0
 8005620:	6123      	str	r3, [r4, #16]
 8005622:	4616      	mov	r6, r2
 8005624:	e7bc      	b.n	80055a0 <_printf_i+0x148>
 8005626:	6833      	ldr	r3, [r6, #0]
 8005628:	1d1a      	adds	r2, r3, #4
 800562a:	6032      	str	r2, [r6, #0]
 800562c:	681e      	ldr	r6, [r3, #0]
 800562e:	6862      	ldr	r2, [r4, #4]
 8005630:	2100      	movs	r1, #0
 8005632:	4630      	mov	r0, r6
 8005634:	f7fa fe0c 	bl	8000250 <memchr>
 8005638:	b108      	cbz	r0, 800563e <_printf_i+0x1e6>
 800563a:	1b80      	subs	r0, r0, r6
 800563c:	6060      	str	r0, [r4, #4]
 800563e:	6863      	ldr	r3, [r4, #4]
 8005640:	6123      	str	r3, [r4, #16]
 8005642:	2300      	movs	r3, #0
 8005644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005648:	e7aa      	b.n	80055a0 <_printf_i+0x148>
 800564a:	6923      	ldr	r3, [r4, #16]
 800564c:	4632      	mov	r2, r6
 800564e:	4649      	mov	r1, r9
 8005650:	4640      	mov	r0, r8
 8005652:	47d0      	blx	sl
 8005654:	3001      	adds	r0, #1
 8005656:	d0ad      	beq.n	80055b4 <_printf_i+0x15c>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	079b      	lsls	r3, r3, #30
 800565c:	d413      	bmi.n	8005686 <_printf_i+0x22e>
 800565e:	68e0      	ldr	r0, [r4, #12]
 8005660:	9b03      	ldr	r3, [sp, #12]
 8005662:	4298      	cmp	r0, r3
 8005664:	bfb8      	it	lt
 8005666:	4618      	movlt	r0, r3
 8005668:	e7a6      	b.n	80055b8 <_printf_i+0x160>
 800566a:	2301      	movs	r3, #1
 800566c:	4632      	mov	r2, r6
 800566e:	4649      	mov	r1, r9
 8005670:	4640      	mov	r0, r8
 8005672:	47d0      	blx	sl
 8005674:	3001      	adds	r0, #1
 8005676:	d09d      	beq.n	80055b4 <_printf_i+0x15c>
 8005678:	3501      	adds	r5, #1
 800567a:	68e3      	ldr	r3, [r4, #12]
 800567c:	9903      	ldr	r1, [sp, #12]
 800567e:	1a5b      	subs	r3, r3, r1
 8005680:	42ab      	cmp	r3, r5
 8005682:	dcf2      	bgt.n	800566a <_printf_i+0x212>
 8005684:	e7eb      	b.n	800565e <_printf_i+0x206>
 8005686:	2500      	movs	r5, #0
 8005688:	f104 0619 	add.w	r6, r4, #25
 800568c:	e7f5      	b.n	800567a <_printf_i+0x222>
 800568e:	bf00      	nop
 8005690:	08005aba 	.word	0x08005aba
 8005694:	08005acb 	.word	0x08005acb

08005698 <__swbuf_r>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	460e      	mov	r6, r1
 800569c:	4614      	mov	r4, r2
 800569e:	4605      	mov	r5, r0
 80056a0:	b118      	cbz	r0, 80056aa <__swbuf_r+0x12>
 80056a2:	6a03      	ldr	r3, [r0, #32]
 80056a4:	b90b      	cbnz	r3, 80056aa <__swbuf_r+0x12>
 80056a6:	f7ff f9e3 	bl	8004a70 <__sinit>
 80056aa:	69a3      	ldr	r3, [r4, #24]
 80056ac:	60a3      	str	r3, [r4, #8]
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	071a      	lsls	r2, r3, #28
 80056b2:	d501      	bpl.n	80056b8 <__swbuf_r+0x20>
 80056b4:	6923      	ldr	r3, [r4, #16]
 80056b6:	b943      	cbnz	r3, 80056ca <__swbuf_r+0x32>
 80056b8:	4621      	mov	r1, r4
 80056ba:	4628      	mov	r0, r5
 80056bc:	f000 f82a 	bl	8005714 <__swsetup_r>
 80056c0:	b118      	cbz	r0, 80056ca <__swbuf_r+0x32>
 80056c2:	f04f 37ff 	mov.w	r7, #4294967295
 80056c6:	4638      	mov	r0, r7
 80056c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	6922      	ldr	r2, [r4, #16]
 80056ce:	1a98      	subs	r0, r3, r2
 80056d0:	6963      	ldr	r3, [r4, #20]
 80056d2:	b2f6      	uxtb	r6, r6
 80056d4:	4283      	cmp	r3, r0
 80056d6:	4637      	mov	r7, r6
 80056d8:	dc05      	bgt.n	80056e6 <__swbuf_r+0x4e>
 80056da:	4621      	mov	r1, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	f7ff fcbb 	bl	8005058 <_fflush_r>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d1ed      	bne.n	80056c2 <__swbuf_r+0x2a>
 80056e6:	68a3      	ldr	r3, [r4, #8]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	60a3      	str	r3, [r4, #8]
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	6022      	str	r2, [r4, #0]
 80056f2:	701e      	strb	r6, [r3, #0]
 80056f4:	6962      	ldr	r2, [r4, #20]
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d004      	beq.n	8005706 <__swbuf_r+0x6e>
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	07db      	lsls	r3, r3, #31
 8005700:	d5e1      	bpl.n	80056c6 <__swbuf_r+0x2e>
 8005702:	2e0a      	cmp	r6, #10
 8005704:	d1df      	bne.n	80056c6 <__swbuf_r+0x2e>
 8005706:	4621      	mov	r1, r4
 8005708:	4628      	mov	r0, r5
 800570a:	f7ff fca5 	bl	8005058 <_fflush_r>
 800570e:	2800      	cmp	r0, #0
 8005710:	d0d9      	beq.n	80056c6 <__swbuf_r+0x2e>
 8005712:	e7d6      	b.n	80056c2 <__swbuf_r+0x2a>

08005714 <__swsetup_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4b29      	ldr	r3, [pc, #164]	@ (80057bc <__swsetup_r+0xa8>)
 8005718:	4605      	mov	r5, r0
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	460c      	mov	r4, r1
 800571e:	b118      	cbz	r0, 8005728 <__swsetup_r+0x14>
 8005720:	6a03      	ldr	r3, [r0, #32]
 8005722:	b90b      	cbnz	r3, 8005728 <__swsetup_r+0x14>
 8005724:	f7ff f9a4 	bl	8004a70 <__sinit>
 8005728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800572c:	0719      	lsls	r1, r3, #28
 800572e:	d422      	bmi.n	8005776 <__swsetup_r+0x62>
 8005730:	06da      	lsls	r2, r3, #27
 8005732:	d407      	bmi.n	8005744 <__swsetup_r+0x30>
 8005734:	2209      	movs	r2, #9
 8005736:	602a      	str	r2, [r5, #0]
 8005738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800573c:	81a3      	strh	r3, [r4, #12]
 800573e:	f04f 30ff 	mov.w	r0, #4294967295
 8005742:	e033      	b.n	80057ac <__swsetup_r+0x98>
 8005744:	0758      	lsls	r0, r3, #29
 8005746:	d512      	bpl.n	800576e <__swsetup_r+0x5a>
 8005748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800574a:	b141      	cbz	r1, 800575e <__swsetup_r+0x4a>
 800574c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005750:	4299      	cmp	r1, r3
 8005752:	d002      	beq.n	800575a <__swsetup_r+0x46>
 8005754:	4628      	mov	r0, r5
 8005756:	f7ff fafb 	bl	8004d50 <_free_r>
 800575a:	2300      	movs	r3, #0
 800575c:	6363      	str	r3, [r4, #52]	@ 0x34
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	2300      	movs	r3, #0
 8005768:	6063      	str	r3, [r4, #4]
 800576a:	6923      	ldr	r3, [r4, #16]
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f043 0308 	orr.w	r3, r3, #8
 8005774:	81a3      	strh	r3, [r4, #12]
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	b94b      	cbnz	r3, 800578e <__swsetup_r+0x7a>
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005784:	d003      	beq.n	800578e <__swsetup_r+0x7a>
 8005786:	4621      	mov	r1, r4
 8005788:	4628      	mov	r0, r5
 800578a:	f000 f883 	bl	8005894 <__smakebuf_r>
 800578e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005792:	f013 0201 	ands.w	r2, r3, #1
 8005796:	d00a      	beq.n	80057ae <__swsetup_r+0x9a>
 8005798:	2200      	movs	r2, #0
 800579a:	60a2      	str	r2, [r4, #8]
 800579c:	6962      	ldr	r2, [r4, #20]
 800579e:	4252      	negs	r2, r2
 80057a0:	61a2      	str	r2, [r4, #24]
 80057a2:	6922      	ldr	r2, [r4, #16]
 80057a4:	b942      	cbnz	r2, 80057b8 <__swsetup_r+0xa4>
 80057a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80057aa:	d1c5      	bne.n	8005738 <__swsetup_r+0x24>
 80057ac:	bd38      	pop	{r3, r4, r5, pc}
 80057ae:	0799      	lsls	r1, r3, #30
 80057b0:	bf58      	it	pl
 80057b2:	6962      	ldrpl	r2, [r4, #20]
 80057b4:	60a2      	str	r2, [r4, #8]
 80057b6:	e7f4      	b.n	80057a2 <__swsetup_r+0x8e>
 80057b8:	2000      	movs	r0, #0
 80057ba:	e7f7      	b.n	80057ac <__swsetup_r+0x98>
 80057bc:	20000018 	.word	0x20000018

080057c0 <_raise_r>:
 80057c0:	291f      	cmp	r1, #31
 80057c2:	b538      	push	{r3, r4, r5, lr}
 80057c4:	4605      	mov	r5, r0
 80057c6:	460c      	mov	r4, r1
 80057c8:	d904      	bls.n	80057d4 <_raise_r+0x14>
 80057ca:	2316      	movs	r3, #22
 80057cc:	6003      	str	r3, [r0, #0]
 80057ce:	f04f 30ff 	mov.w	r0, #4294967295
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80057d6:	b112      	cbz	r2, 80057de <_raise_r+0x1e>
 80057d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057dc:	b94b      	cbnz	r3, 80057f2 <_raise_r+0x32>
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 f830 	bl	8005844 <_getpid_r>
 80057e4:	4622      	mov	r2, r4
 80057e6:	4601      	mov	r1, r0
 80057e8:	4628      	mov	r0, r5
 80057ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057ee:	f000 b817 	b.w	8005820 <_kill_r>
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d00a      	beq.n	800580c <_raise_r+0x4c>
 80057f6:	1c59      	adds	r1, r3, #1
 80057f8:	d103      	bne.n	8005802 <_raise_r+0x42>
 80057fa:	2316      	movs	r3, #22
 80057fc:	6003      	str	r3, [r0, #0]
 80057fe:	2001      	movs	r0, #1
 8005800:	e7e7      	b.n	80057d2 <_raise_r+0x12>
 8005802:	2100      	movs	r1, #0
 8005804:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005808:	4620      	mov	r0, r4
 800580a:	4798      	blx	r3
 800580c:	2000      	movs	r0, #0
 800580e:	e7e0      	b.n	80057d2 <_raise_r+0x12>

08005810 <raise>:
 8005810:	4b02      	ldr	r3, [pc, #8]	@ (800581c <raise+0xc>)
 8005812:	4601      	mov	r1, r0
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	f7ff bfd3 	b.w	80057c0 <_raise_r>
 800581a:	bf00      	nop
 800581c:	20000018 	.word	0x20000018

08005820 <_kill_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d07      	ldr	r5, [pc, #28]	@ (8005840 <_kill_r+0x20>)
 8005824:	2300      	movs	r3, #0
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	4611      	mov	r1, r2
 800582c:	602b      	str	r3, [r5, #0]
 800582e:	f7fb f8d9 	bl	80009e4 <_kill>
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	d102      	bne.n	800583c <_kill_r+0x1c>
 8005836:	682b      	ldr	r3, [r5, #0]
 8005838:	b103      	cbz	r3, 800583c <_kill_r+0x1c>
 800583a:	6023      	str	r3, [r4, #0]
 800583c:	bd38      	pop	{r3, r4, r5, pc}
 800583e:	bf00      	nop
 8005840:	200002ec 	.word	0x200002ec

08005844 <_getpid_r>:
 8005844:	f7fb b8c6 	b.w	80009d4 <_getpid>

08005848 <__swhatbuf_r>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	460c      	mov	r4, r1
 800584c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005850:	2900      	cmp	r1, #0
 8005852:	b096      	sub	sp, #88	@ 0x58
 8005854:	4615      	mov	r5, r2
 8005856:	461e      	mov	r6, r3
 8005858:	da0d      	bge.n	8005876 <__swhatbuf_r+0x2e>
 800585a:	89a3      	ldrh	r3, [r4, #12]
 800585c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005860:	f04f 0100 	mov.w	r1, #0
 8005864:	bf14      	ite	ne
 8005866:	2340      	movne	r3, #64	@ 0x40
 8005868:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800586c:	2000      	movs	r0, #0
 800586e:	6031      	str	r1, [r6, #0]
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	b016      	add	sp, #88	@ 0x58
 8005874:	bd70      	pop	{r4, r5, r6, pc}
 8005876:	466a      	mov	r2, sp
 8005878:	f000 f848 	bl	800590c <_fstat_r>
 800587c:	2800      	cmp	r0, #0
 800587e:	dbec      	blt.n	800585a <__swhatbuf_r+0x12>
 8005880:	9901      	ldr	r1, [sp, #4]
 8005882:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005886:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800588a:	4259      	negs	r1, r3
 800588c:	4159      	adcs	r1, r3
 800588e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005892:	e7eb      	b.n	800586c <__swhatbuf_r+0x24>

08005894 <__smakebuf_r>:
 8005894:	898b      	ldrh	r3, [r1, #12]
 8005896:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005898:	079d      	lsls	r5, r3, #30
 800589a:	4606      	mov	r6, r0
 800589c:	460c      	mov	r4, r1
 800589e:	d507      	bpl.n	80058b0 <__smakebuf_r+0x1c>
 80058a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	6123      	str	r3, [r4, #16]
 80058a8:	2301      	movs	r3, #1
 80058aa:	6163      	str	r3, [r4, #20]
 80058ac:	b003      	add	sp, #12
 80058ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058b0:	ab01      	add	r3, sp, #4
 80058b2:	466a      	mov	r2, sp
 80058b4:	f7ff ffc8 	bl	8005848 <__swhatbuf_r>
 80058b8:	9f00      	ldr	r7, [sp, #0]
 80058ba:	4605      	mov	r5, r0
 80058bc:	4639      	mov	r1, r7
 80058be:	4630      	mov	r0, r6
 80058c0:	f7ff faba 	bl	8004e38 <_malloc_r>
 80058c4:	b948      	cbnz	r0, 80058da <__smakebuf_r+0x46>
 80058c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ca:	059a      	lsls	r2, r3, #22
 80058cc:	d4ee      	bmi.n	80058ac <__smakebuf_r+0x18>
 80058ce:	f023 0303 	bic.w	r3, r3, #3
 80058d2:	f043 0302 	orr.w	r3, r3, #2
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	e7e2      	b.n	80058a0 <__smakebuf_r+0xc>
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	6020      	str	r0, [r4, #0]
 80058de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	9b01      	ldr	r3, [sp, #4]
 80058e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80058ea:	b15b      	cbz	r3, 8005904 <__smakebuf_r+0x70>
 80058ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f0:	4630      	mov	r0, r6
 80058f2:	f000 f81d 	bl	8005930 <_isatty_r>
 80058f6:	b128      	cbz	r0, 8005904 <__smakebuf_r+0x70>
 80058f8:	89a3      	ldrh	r3, [r4, #12]
 80058fa:	f023 0303 	bic.w	r3, r3, #3
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	81a3      	strh	r3, [r4, #12]
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	431d      	orrs	r5, r3
 8005908:	81a5      	strh	r5, [r4, #12]
 800590a:	e7cf      	b.n	80058ac <__smakebuf_r+0x18>

0800590c <_fstat_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d07      	ldr	r5, [pc, #28]	@ (800592c <_fstat_r+0x20>)
 8005910:	2300      	movs	r3, #0
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	4611      	mov	r1, r2
 8005918:	602b      	str	r3, [r5, #0]
 800591a:	f7fb f8c3 	bl	8000aa4 <_fstat>
 800591e:	1c43      	adds	r3, r0, #1
 8005920:	d102      	bne.n	8005928 <_fstat_r+0x1c>
 8005922:	682b      	ldr	r3, [r5, #0]
 8005924:	b103      	cbz	r3, 8005928 <_fstat_r+0x1c>
 8005926:	6023      	str	r3, [r4, #0]
 8005928:	bd38      	pop	{r3, r4, r5, pc}
 800592a:	bf00      	nop
 800592c:	200002ec 	.word	0x200002ec

08005930 <_isatty_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d06      	ldr	r5, [pc, #24]	@ (800594c <_isatty_r+0x1c>)
 8005934:	2300      	movs	r3, #0
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	f7fb f8c2 	bl	8000ac4 <_isatty>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_isatty_r+0x1a>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	b103      	cbz	r3, 800594a <_isatty_r+0x1a>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	200002ec 	.word	0x200002ec

08005950 <_init>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr

0800595c <_fini>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr
